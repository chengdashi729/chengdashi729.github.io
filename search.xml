<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络笔记</title>
      <link href="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="一些基本了解"><a href="#一些基本了解" class="headerlink" title="一些基本了解"></a>一些基本了解</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><ul><li>硬件</li><li>软件</li><li>协议</li></ul><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><h5 id="边缘部分（用户直接使用）"><a href="#边缘部分（用户直接使用）" class="headerlink" title="边缘部分（用户直接使用）"></a>边缘部分（用户直接使用）</h5><ul><li>C&#x2F;S方式</li><li>P2P方式</li></ul><h5 id="核心部分（交换机，路由器，服务器等）"><a href="#核心部分（交换机，路由器，服务器等）" class="headerlink" title="核心部分（交换机，路由器，服务器等）"></a>核心部分（交换机，路由器，服务器等）</h5><p>为边缘部分服务</p><h4 id="功能组成"><a href="#功能组成" class="headerlink" title="功能组成"></a>功能组成</h4><h5 id="通讯子网"><a href="#通讯子网" class="headerlink" title="通讯子网"></a>通讯子网</h5><ul><li>实现数据通信</li><li>实现资源共享功能的设备和软件的集合。</li><li>包括：物理层，数据链路层，网络层</li></ul><h5 id="资源子网"><a href="#资源子网" class="headerlink" title="资源子网"></a>资源子网</h5><ul><li>实现资源共享&#x2F;数据处理。</li><li>各种传输介质，通信设备，相应的网络协议组成。</li><li>包括：会话层，表示层，应用层。</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>数据通信</li><li>资源共享</li><li>分布式处理，提高可靠性，负载均衡。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="分布范围"><a href="#分布范围" class="headerlink" title="分布范围"></a>分布范围</h4><ul><li>广域网【WAN】</li><li>城域网【MAN】</li><li>局域网【LAN】</li><li>个人区域网【PAN】</li></ul><h4 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h4><ul><li>公用网</li><li>专用网</li></ul><h4 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h4><ul><li>电路交换</li><li>报文交换</li><li>分组交换</li></ul><h4 id="拓扑技术"><a href="#拓扑技术" class="headerlink" title="拓扑技术"></a>拓扑技术</h4><ul><li>总线型</li><li>星型</li><li>环形</li><li>网状型</li></ul><h4 id="传输技术"><a href="#传输技术" class="headerlink" title="传输技术"></a>传输技术</h4><h5 id="广播式"><a href="#广播式" class="headerlink" title="广播式"></a>广播式</h5><ul><li>共享公共通信信道</li></ul><h5 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h5><ul><li>使用分组存储转发和路由选择机制</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>计算机网络是互联的，自治的计算机集合。【是一个将分散的，具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统】</li></ul><h3 id="标准化工作"><a href="#标准化工作" class="headerlink" title="标准化工作"></a>标准化工作</h3><h4 id="标准的分类："><a href="#标准的分类：" class="headerlink" title="标准的分类："></a>标准的分类：</h4><ul><li><p>法定标准</p><ul><li>由权威机构制定的正式的，合法的标准 OSI</li></ul></li><li><p>事实标准</p><ul><li>某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准   TCP&#x2F;IP</li></ul></li></ul><h4 id="标准化工作的相关组织"><a href="#标准化工作的相关组织" class="headerlink" title="标准化工作的相关组织"></a>标准化工作的相关组织</h4><ul><li><p>国际标准化组织 ISO</p><ul><li>OSI参考模型，HDLC协议</li></ul></li><li><p>国际电信联盟 ITU</p><ul><li>制定通信规则</li></ul></li><li><p>国际电气电子工程师协会IEEE</p><ul><li>学术机构，IEEE802系列标准，5G</li></ul></li><li><p>internet工程任务组IETF</p><ul><li>负责因特网相关标准的制定   RFC XXXX</li></ul></li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><ul><li>速率即数据率或数据传输率或比特率</li><li>连接在计算机网络上的主机在数字通道上传送数据位数的速率。</li><li>单位：b&#x2F;s，kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s，Tb&#x2F;s【存储容量  1Byte（字节）  &#x3D;  8bit（比特）】  1KB &#x3D; 2十次方B &#x3D; 1024B &#x3D; 1024*8b</li></ul><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ul><li>“带宽”原本指的是某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（Hz）。</li><li>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中某一点到另一个点所能通过的“最高数据率”。单位是“比特每秒”，b&#x2F;s，kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s.  【网络设备所支持的最高速度】</li><li>通俗理解就是，设备所能发送数据的最大速率。理论值。</li></ul><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ul><li>表示在单位时间内通过某个网络（或信道，接口）的数据量。单位b&#x2F;s，kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s等。</li><li>吞吐量受网络的带宽或网络的额定速率的限制。</li><li>通俗的理解就是，带宽在实际中的实际速率。</li></ul><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><blockquote><p>指数据（报文&#x2F;分组&#x2F;比特流）从网络（或链路）的一端传送到另一端所需的时间。也叫延迟或迟延。单位是s。</p></blockquote><h4 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h4><ul><li>主机或路由器发送数据帧所需要的时间。【从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间】】</li><li>发送时延 &#x3D; 数据帧长度（bit）【数据长度】   &#x2F;    发送速率（bit&#x2F;s）【信道带宽】</li></ul><h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><ul><li>是电磁波在信道中传播一定的距离需要花费的时间。【取决于电磁波传播速度和链路长度】</li><li>传播时延 &#x3D;  信道长度（m）  &#x2F;   电磁波在信道上的传播速率 （m&#x2F;s )</li></ul><h4 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h4><p>主机或路由器在收到分组时要花费一定的时间进行处理，例如分析分组的首部，从分组中提取数据部分，进行差错检验或查找适当的路由等。</p><h4 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h4><p>分组在经过网络传输时，要经过许多路由器，但分组在进入路由器后要先在输入队列中排队等待处理。</p><h4 id="总时延"><a href="#总时延" class="headerlink" title="总时延"></a>总时延</h4><p>总时延&#x3D; 发送时延 + 传播时延 +  处理时延 + 排队时延</p><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><ul><li>时延带宽积（bit） &#x3D;  传播时延（s） *  带宽（b&#x2F;s)</li><li>链路的时延带宽积又称为以比特为单位的链路长度。【即“某段链路现在有多少比特】</li></ul><h3 id="往返时间RTT"><a href="#往返时间RTT" class="headerlink" title="往返时间RTT"></a>往返时间RTT</h3><p>从发送方发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延。</p><h4 id="RTT"><a href="#RTT" class="headerlink" title="RTT"></a>RTT</h4><ul><li>往返传播时延  &#x3D;   传播时延 * 2</li><li>末端处理时间</li><li>RTT越大，在收到确认之前，可以发送的数据越多。</li></ul><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><h4 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h4><p>信道利用率 &#x3D;   有数据通过时间 &#x2F;  （有 + 无 ） 数据通过时间</p><h4 id="网络利用率"><a href="#网络利用率" class="headerlink" title="网络利用率"></a>网络利用率</h4><ul><li><p>信道利用率加权平均值</p></li><li><p>信道或网络的利用率过高会产生非常大的时延。</p></li></ul><h2 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h2><blockquote><p>从功能上描述计算机网络结构</p></blockquote><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><h4 id="为什么要分层"><a href="#为什么要分层" class="headerlink" title="为什么要分层"></a>为什么要分层</h4><blockquote><p>例如：发送文件前要完成的工作：</p></blockquote><ul><li>发起通信的计算机必须将数据通信的通路进行激活。</li><li>要告诉网络如何识别目的主机。</li><li>发起通信的计算机要查明目的主机是否开机，并且与网络连接正常。</li><li>发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。</li><li>确保差错和意外可以解决。</li><li>。。。。</li></ul><h4 id="怎么分层："><a href="#怎么分层：" class="headerlink" title="怎么分层："></a>怎么分层：</h4><ul><li>协议</li><li>服务</li><li>接口</li></ul><h4 id="分层的基本原则："><a href="#分层的基本原则：" class="headerlink" title="分层的基本原则："></a>分层的基本原则：</h4><ul><li>每层之间相互独立，每层只实现一种相对独立的功能。</li><li>每层之间界面自然清晰，易于理解，相互交流尽可能少。</li><li>结构上可分割开，每层都采用最合适的技术来实现。</li><li>保持下层对上层的独立性，上层单向使用下层提供的服务。</li><li>整个分层结构应该能促进标准化工作。</li></ul><h3 id="正式认识分层结构："><a href="#正式认识分层结构：" class="headerlink" title="正式认识分层结构："></a>正式认识分层结构：</h3><h4 id="实体"><a href="#实体" class="headerlink" title="实体:"></a>实体:</h4><blockquote><p> 第n层中的活动元素称为n层实体。同一层的实体叫对等实体。</p></blockquote><h4 id="协议"><a href="#协议" class="headerlink" title="协议:"></a>协议:</h4><blockquote><p>为进行网络中的对等实体数据交换而建立的规则，标准或约定被称为网络协议。【水平】</p></blockquote><ul><li>语法：规定传输数据的格式。</li><li>语义：规定所要完成的功能。</li><li>同步：规定各种操作的顺序。</li></ul><h4 id="接口（访问服务点SAP）："><a href="#接口（访问服务点SAP）：" class="headerlink" title="接口（访问服务点SAP）："></a>接口（访问服务点SAP）：</h4><p>上层使用下层服务的入口。</p><h4 id="服务："><a href="#服务：" class="headerlink" title="服务："></a>服务：</h4><p>下层为相邻上层提供的功能调用。【垂直】</p><ul><li>SDU  服务数据单元：为完成用户所要求的的功能而应传送的数据。</li><li>PCI  协议控制信息：控制协议操作的信息。</li><li>PDI协议数据单元：对等层次之间传送的数据单位。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2dc8bd6a63d4514240475c55728c8a4bab52477c9e1a281a33490c38ef987e9b.png"></li></ul><h3 id="概念总结："><a href="#概念总结：" class="headerlink" title="概念总结："></a>概念总结：</h3><ul><li>网络体系结构是从功能上描述计算机网络结构。</li><li>计算机网络体系结构简称网络体系结构是分层结构。</li><li>每层遵循某个&#x2F;些网络协议以完成本层功能。</li><li>计算机网络体系结构是计算机网络的各层及其协议的集合。</li><li>第n层在向n+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能。</li><li>仅仅在相邻层间有接口，且所提供服务的具体实现细节对上一层完全屏蔽。</li><li>体系结构是抽象的，而实现是指能运行的一些软件和硬件。</li></ul><h2 id="计算机网络分层结构："><a href="#计算机网络分层结构：" class="headerlink" title="计算机网络分层结构："></a>计算机网络分层结构：</h2><h3 id="7层OSI参考模型（法定标准）"><a href="#7层OSI参考模型（法定标准）" class="headerlink" title="7层OSI参考模型（法定标准）"></a>7层OSI参考模型（法定标准）</h3><blockquote><p>为了解决计算机网络复杂的大问题</p></blockquote><p>分层结构（按功能）</p><h4 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h4><p>支持异构网络系统的互联互通。</p><h4 id="国际标准化组织（ISO）于1984年提出开放系统互连（OSI-参考模型。"><a href="#国际标准化组织（ISO）于1984年提出开放系统互连（OSI-参考模型。" class="headerlink" title="国际标准化组织（ISO）于1984年提出开放系统互连（OSI)参考模型。"></a>国际标准化组织（ISO）于1984年提出开放系统互连（OSI)参考模型。</h4><p>但是，理论成功，市场失败。</p><h4 id="OSI七层"><a href="#OSI七层" class="headerlink" title="OSI七层"></a>OSI七层</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07ecbbee2cf7f5d2418ec0fba2af0fd52d50080b2519bbd44138787249ad6c44.png" alt="OSI参考模型解释通信过程"></p><h5 id="应用层【7】"><a href="#应用层【7】" class="headerlink" title="应用层【7】"></a>应用层【7】</h5><ul><li><p>DATA(H7)</p></li><li><p>用户与网络的界面【所有能和用户交互产生网络流量的程序】</p></li><li><p>典型的应用层服务：</p><ul><li>文件传输（FTP)</li><li>电子邮件（SMTP)</li><li>万维网（HTTP)</li></ul></li></ul><h5 id="表示层【6】"><a href="#表示层【6】" class="headerlink" title="表示层【6】"></a>表示层【6】</h5><ul><li><p>7-PDU(H6)</p></li><li><p>用于处理在两个通信系统中交换信息的表示方式（语法和语义）</p></li><li><p>功能：</p><ul><li>数据格式转换</li><li>数据加密解密</li><li>数据压缩和恢复</li></ul></li><li><p>主要协议：</p><ul><li>JPEG</li><li>ASCII</li></ul></li></ul><h5 id="会话层【5】"><a href="#会话层【5】" class="headerlink" title="会话层【5】"></a>会话层【5】</h5><ul><li><p>6-PDU(H5)</p></li><li><p>向表示层实体&#x2F;用户进程提供建立连接并在连接上有序的传输数据。【这是会话，也是建立同步（SYN)】</p></li><li><p>功能：</p><ul><li>建立，管理，终止会话</li><li>使用校验点可使会话在通信失效时从校验点&#x2F;同步点继续恢复通信，实现数据同步。【适用于传输大文件】</li></ul></li><li><p>主要协议：</p><ul><li>ASDP</li><li>ASP</li></ul></li></ul><h5 id="传输层【4】"><a href="#传输层【4】" class="headerlink" title="传输层【4】"></a>传输层【4】</h5><ul><li><p>5-PDU(H4)</p></li><li><p>负责主机中两个进程的通信，即端到端的通信。传输单位是报文段或用户数据报。</p></li><li><p>功能：</p><ul><li><p>可靠传输，不可靠传输</p><ul><li>可靠传输【有确认机制】</li><li>不可靠传输【不需要建立连接和确认机制】</li></ul></li><li><p>差错控制</p><ul><li>帧错误、帧丢失、帧重复。</li></ul></li><li><p>流量控制</p><ul><li>协调发送端和接收端的速度问题。</li></ul></li><li><p>复用分用</p><ul><li>复用：多个应用层进程可同时使用下面运输层的服务。</li><li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程。</li></ul></li></ul></li><li><p>主要协议：</p><ul><li>TCP</li><li>UDP</li></ul></li></ul><h5 id="网络层【3】"><a href="#网络层【3】" class="headerlink" title="网络层【3】"></a>网络层【3】</h5><ul><li><p>4-PDU(H3)</p></li><li><p>主要任务是把分组从源端传到目的端，为分组交换网上不同主机提供通信服务。网络层传输单位是数据报。</p></li><li><p>功能：</p><ul><li><p>路由选择</p><ul><li>最佳路径</li></ul></li><li><p>流量控制</p><ul><li>协调发送端和接收端的速度问题。【主要是限制发送端的速度】</li></ul></li><li><p>差错控制</p><ul><li>帧错误、帧丢失、帧重复。</li></ul></li><li><p>拥塞控制</p><ul><li>若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。</li></ul></li></ul></li><li><p>主要协议：</p><ul><li>IP</li><li>IPX</li><li>ICMP</li><li>IGMP</li><li>ARR</li><li>RARP</li><li>OSPF</li></ul></li></ul><h5 id="数据链路层【2】"><a href="#数据链路层【2】" class="headerlink" title="数据链路层【2】"></a>数据链路层【2】</h5><ul><li><p>3-PUD(H2)[不仅加了首部，还加了尾部]</p></li><li><p>主要任务是把网络层传下来的数据报组装成帧。【数据链路层&#x2F;链路层的传输单位是帧】</p></li><li><p>功能：</p><ul><li><p>成帧</p><ul><li>定义帧的开始和结束</li></ul></li><li><p>差错控制</p><ul><li>帧错+位错</li></ul></li><li><p>流量控制</p><ul><li>协调发送端和接收端的速度问题。</li></ul></li><li><p>访问（接入）控制</p><ul><li>控制对信道的访问</li></ul></li></ul></li><li><p>主要协议：</p><ul><li>SDLC</li><li>HDLC</li><li>PPP</li><li>STP</li></ul></li></ul><h5 id="物理层【1】"><a href="#物理层【1】" class="headerlink" title="物理层【1】"></a>物理层【1】</h5><ul><li><p>主要任务是在物理媒体上实现比特流的透明传输。【物理层传输的单位是比特】</p></li><li><p>透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</p></li><li><p>功能：</p><ul><li><p>定义接口特性</p></li><li><p>定义传输模式</p><ul><li><p>单工</p><ul><li>单工数据传输只支持数据在一个方向上传输；在同一时间只有一方能接受或发送信息，不能实现双向通信，举例：电视，广播。</li></ul></li><li><p>半双工</p><ul><li>半双工数据传输允许数据在两个方向上传输,但是,在某一时刻,只允许数据在一个方向上传输,它实际上是一种切换方向的单工通信；在同一时间只可以有一方接受或发送信息，可以实现双向通信。举例：对讲机。</li></ul></li><li><p>双工</p><ul><li>双工数据通信允许数据同时在两个方向上传输,因此,全双工通信是两个单工通信方式的结合,它要求发送设备和接收设备都有独立的接收和发送能力；在同一时间可以同时接受和发送信息，实现双向通信，举例：电话通信。</li></ul></li></ul></li><li><p>定义传输速率</p></li><li><p>比特同步</p></li><li><p>比特编码</p></li></ul></li><li><p>主要协议：</p><ul><li>Rj45</li><li>802.3</li></ul></li></ul><h3 id="4层TCP-x2F-IP参考模型（事实标准）"><a href="#4层TCP-x2F-IP参考模型（事实标准）" class="headerlink" title="4层TCP&#x2F;IP参考模型（事实标准）"></a>4层TCP&#x2F;IP参考模型（事实标准）</h3><ul><li>应用层</li><li>传输层</li><li>网际层</li><li>网络接口层</li></ul><h3 id="5层参考模型："><a href="#5层参考模型：" class="headerlink" title="5层参考模型："></a>5层参考模型：</h3><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0646f31c95743cec3356b8777e177ff34161309993d69f253adf37814eea0295.png" alt="5层参考模型的数据封装与解封装"></p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><blockquote><p>支持各种网络应用</p></blockquote><p>主要协议：</p><ul><li>FTP</li><li>SMTP</li><li>HTTP</li></ul><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><blockquote><p>进程-进程的数据传输</p></blockquote><p>主要协议：</p><ul><li>TCP</li><li>UDP</li></ul><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><blockquote><p>源主机到目的主机的数据分组路由与转发</p></blockquote><p>主要协议：</p><ul><li>IP</li><li>ICMP</li><li>OSPF</li></ul><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><blockquote><p>把网络层传下来的数据报组装成帧</p></blockquote><p>主要协议：</p><ul><li>Ethernet</li><li>ppp</li></ul><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><blockquote><p>实现比特传输</p></blockquote><p>主要协议：</p><ul><li>Rj45</li><li>802.3</li></ul><blockquote><p>综合了OSI和TCP&#x2F;IP的优点</p></blockquote><h3 id="OSI参考模型和TCP-x2F-IP参考模型相同点："><a href="#OSI参考模型和TCP-x2F-IP参考模型相同点：" class="headerlink" title="OSI参考模型和TCP&#x2F;IP参考模型相同点："></a>OSI参考模型和TCP&#x2F;IP参考模型相同点：</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ul><li>都分层</li><li>基于独立的协议栈的概念</li><li>都可以实现异构网络互联</li></ul><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li><p>OSI定义三点：服务，协议，接口</p></li><li><p>OSI先出现，参考模型先于协议发明，不偏向特定协议</p></li><li><p>TCP&#x2F;IP设计之初就考虑到异构网互联的问题，将IP作为重要层次。</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e0ace6e71c326e99639c5c1b3c1a03df7330a527dcddae61a3a6d6550f52ffe7.png"></p><ul><li><p>面向连接分为三个阶段：</p><ul><li>第一是建立连接，在此阶段，发出一个建立连接的请求。</li><li>第二阶段是：只有在连接成功之后，才能开始数据传输。</li><li>第三是：接着当数据传输完毕，必须释放连接。</li></ul></li><li><p>面向无连接</p><ul><li>没有这么多阶段，直接进行数据传输</li></ul></li></ul></li></ul><h2 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h2><blockquote><p> 物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</p></blockquote><h3 id="主要任务："><a href="#主要任务：" class="headerlink" title="主要任务："></a>主要任务：</h3><blockquote><p>确定与传输媒体接口有关的一些特性。</p></blockquote><ul><li>定义标准。</li></ul><h3 id="有哪些特性："><a href="#有哪些特性：" class="headerlink" title="有哪些特性："></a>有哪些特性：</h3><h4 id="机械特性："><a href="#机械特性：" class="headerlink" title="机械特性："></a>机械特性：</h4><p>定义物理连接的特性，规定物理连接时所采用的规格，接口形状，引线数目，引脚数量和排列情况。</p><h4 id="电气特性："><a href="#电气特性：" class="headerlink" title="电气特性："></a>电气特性：</h4><p>规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等。</p><h4 id="功能特性："><a href="#功能特性：" class="headerlink" title="功能特性："></a>功能特性：</h4><p>指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途。</p><h4 id="规程特性："><a href="#规程特性：" class="headerlink" title="规程特性："></a>规程特性：</h4><p>（过程特性）定义各条物理线路的工作规程和时序关系。</p><h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4542774b214afbc6a6ad3e49223cbd06f57679d185608f00954d410b3e0eb924.png" alt="典型的数据通信模型"></p><h4 id="数据通信的相关术语："><a href="#数据通信的相关术语：" class="headerlink" title="数据通信的相关术语："></a>数据通信的相关术语：</h4><blockquote><p> 通信的目的是传送消息。</p></blockquote><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><blockquote><p>传送信息的实体，通常是有意义的符号序列。</p></blockquote><h5 id="信号："><a href="#信号：" class="headerlink" title="信号："></a>信号：</h5><p>数据的电气&#x2F;电磁的表现，是数据在传输过程中的存在形式。</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9403af4267f5fae3a189ac45dc9fc638a1644c7267a44294b066b9260307a129.png" alt="数字信号：代表消息的参数取值是离散的。"></li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/409d3aa712c24088d9b12dc1a6a8117a6c34344a9815fdc1d0d7f0fe56faa591.png" alt="模拟信号：代表消息的参数取值是连续的。"></li></ul><h5 id="信源："><a href="#信源：" class="headerlink" title="信源："></a>信源：</h5><blockquote><p>产生和发送数据的源头。</p></blockquote><h5 id="信宿："><a href="#信宿：" class="headerlink" title="信宿："></a>信宿：</h5><blockquote><p>接收数据的终点。</p></blockquote><h5 id="信道："><a href="#信道：" class="headerlink" title="信道："></a>信道：</h5><blockquote><p>信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p></blockquote><h6 id="传输信号："><a href="#传输信号：" class="headerlink" title="传输信号："></a>传输信号：</h6><ul><li>模拟信道（传送模拟信号）</li><li>数字信道（传送数字信号）</li></ul><h6 id="传输介质："><a href="#传输介质：" class="headerlink" title="传输介质："></a>传输介质：</h6><ul><li>无线信道</li><li>有线信道</li></ul><h4 id="三种通信方式："><a href="#三种通信方式：" class="headerlink" title="三种通信方式："></a>三种通信方式：</h4><blockquote><p>从通信双方信道的交互方式看，可以有三种基本方式。</p></blockquote><h5 id="单工通信"><a href="#单工通信" class="headerlink" title="单工通信"></a>单工通信</h5><blockquote><p>只有一个方向的通信而没有反方向的交互，仅需要一条信道。</p></blockquote><h5 id="半双工通信"><a href="#半双工通信" class="headerlink" title="半双工通信"></a>半双工通信</h5><blockquote><p>通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道。</p></blockquote><h5 id="全双工通信"><a href="#全双工通信" class="headerlink" title="全双工通信"></a>全双工通信</h5><blockquote><p>通信双方可以同时发送和接收信息，也需要两条信道。</p></blockquote><h4 id="两种数据传输方式："><a href="#两种数据传输方式：" class="headerlink" title="两种数据传输方式："></a>两种数据传输方式：</h4><h5 id="串行传输"><a href="#串行传输" class="headerlink" title="串行传输"></a>串行传输</h5><blockquote><p>速度慢，费用低，适合远距离</p></blockquote><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a1f13e22cda81a72654d9a759ee268a0eb3944dcd07b88505879bf148aaa8373.png"></p><h5 id="并行传输"><a href="#并行传输" class="headerlink" title="并行传输"></a>并行传输</h5><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bc7b93564397262dadf2f386283738a1c6c169c8874d8ee03e2fd59b37e8af83.png" alt="速度快，费用高，适合近距离"></p><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f2b4ba6abf7064a876d4591a57fd7a339562c145885ce84b5a99fc54e2a81125.png"></p><h4 id="码元、波特、速率、带宽"><a href="#码元、波特、速率、带宽" class="headerlink" title="码元、波特、速率、带宽"></a>码元、波特、速率、带宽</h4><h5 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h5><blockquote><p>码元是指用一个固定时长的信号波形（数字脉冲），代表不同离散数值的基本波形，是数字通信中信号的计量单位，这个时长内的信号称为K进制码元，而该时长称为码元宽度。当码元的离散状态有M个时（M大于2），此时的码元为M进制码元。</p></blockquote><ul><li><p>k进制码元—4进制码元—&gt;码元的离散状态有4个—&gt;4种高低不同的信号波形      00、01、10、11</p></li><li><p>1码元可以携带多个比特的信息量。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一中代表1状态。</p></li></ul><h5 id="波特"><a href="#波特" class="headerlink" title="波特"></a>波特</h5><blockquote><p>单位时间内数字通信系统所传输的码元的个数（也可称为脉冲个数或信号变化的次数），单位是波特（Baud）。1波特表示通信系统每秒传输一个码元。【1Baud &#x3D;  1码元&#x2F;s】</p></blockquote><h5 id="速率-1"><a href="#速率-1" class="headerlink" title="速率"></a>速率</h5><blockquote><p>也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量。可以用码元传输速率和信息传输速率表示。</p></blockquote><ul><li><p>码元传输速率：</p><ul><li>别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元的个数（也可称为脉冲个数或信号变化的次数），单位是波特（Baud）。1波特表示通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，但是码元速率与进制数无关。【1s传输多少个码元】</li></ul></li><li><p>信息传输速率：</p><ul><li>别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数（即比特数），单位是比特&#x2F;s（b&#x2F;s）【1s能传输多少个比特】</li></ul></li><li><p>关系：</p><ul><li>若一个码元携带n  bit的信息量，则M  Baud的码元传输速率所对应的信息传输速率为M *  n  bit&#x2F;s。</li></ul></li></ul><h5 id="带宽-1"><a href="#带宽-1" class="headerlink" title="带宽"></a>带宽</h5><blockquote><p>表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”，常用来表示网络的通信线路所能传输数据的能力。单位是b&#x2F;s。</p></blockquote><h4 id="奈氏准则和香农定理"><a href="#奈氏准则和香农定理" class="headerlink" title="奈氏准则和香农定理"></a>奈氏准则和香农定理</h4><h5 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h5><h6 id="影响失真程度的因素："><a href="#影响失真程度的因素：" class="headerlink" title="影响失真程度的因素："></a>影响失真程度的因素：</h6><ul><li>码元传输速率【速率越高，失真程度越严重】</li><li>信号传输距离【距离越远，衰减就越久，干扰就越久】</li><li>噪声干扰【越多就越容易失真】</li><li>传输媒体质量【质量越差，失真越严重】</li></ul><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/73db8278f55982286c177a466db4d14b646f361bea890c4b339f5c05392a8cce.png"></p><h6 id="码间串扰"><a href="#码间串扰" class="headerlink" title="码间串扰"></a>码间串扰</h6><blockquote><p> 接收端收到的信号波形失去了码元之间清晰界限的现象。</p></blockquote><p>信道带宽：</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7c5fe7396fc60554797616c399d26aae13795e7200b0311bb9906b4d8942ef32.png" alt="是信道能通过的最高频率和最低频率之差"></li></ul><h4 id="奈氏准则（奈奎斯特定理）"><a href="#奈氏准则（奈奎斯特定理）" class="headerlink" title="奈氏准则（奈奎斯特定理）"></a>奈氏准则（奈奎斯特定理）</h4><blockquote><p>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为2W  Baud，W是信道带宽，单位是Hz。</p></blockquote><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220619115536746.png" alt="理想低通信道下的极限数据传输率 = 2Wlog2V   ( b/s)"></p><h5 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h5><ul><li>在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限 ，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别称为不可能。</li><li>信道的频带越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输。</li><li>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制。</li><li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法。</li></ul><h4 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h4><h5 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h5><blockquote><p>噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，信噪比就很重要。</p></blockquote><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/21bb576d5a6eaff0faf81f13e8fcec09fd7b791b547eac45e7a7f4f2df6668c8.png" alt="信噪比 =  信号的平均功率/噪声的平均功率，常记为S/N，并用分贝（dB）作为肚量单位，即：信噪比（dB） =  10log10（S/N)  数值等价"></p><h6 id="香农定理："><a href="#香农定理：" class="headerlink" title="香农定理："></a>香农定理：</h6><blockquote><p> 在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p></blockquote><h6 id="结论：-1"><a href="#结论：-1" class="headerlink" title="结论："></a>结论：</h6><ul><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。</li><li>对一定的传输带宽和一定的信噪比，信息的传输速率的上限就确定了。</li><li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输。</li><li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。</li><li>从香农定理可以看出，若信道带宽W或信噪比S&#x2F;N没有上限（不可能），那么信道的极限信息传输速率就没有上限。</li></ul><h4 id="奈氏准则和香农定理区别"><a href="#奈氏准则和香农定理区别" class="headerlink" title="奈氏准则和香农定理区别"></a>奈氏准则和香农定理区别</h4><h5 id="奈氏准则（内忧）"><a href="#奈氏准则（内忧）" class="headerlink" title="奈氏准则（内忧）"></a>奈氏准则（内忧）</h5><ul><li>带宽受限无噪声条件下，为了避免码间串扰，码元传输速率的上限2W Baud</li><li>理想低通信道下的极限数据传输率 &#x3D; 2W log2V</li><li>要想提高数据率，就要提高带宽&#x2F;采用更好的编码技术</li></ul><h5 id="香农定理（外患）"><a href="#香农定理（外患）" class="headerlink" title="香农定理（外患）"></a>香农定理（外患）</h5><ul><li>带宽受限有噪声条件下的信息传输速率。</li><li>信道的极限数据传输速率 &#x3D; Wlog2（1+S&#x2F;N)</li><li>要想提高数据率，就要提高带宽&#x2F;信噪比。</li></ul><h4 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h4><h5 id="基带信号与带宽信号"><a href="#基带信号与带宽信号" class="headerlink" title="基带信号与带宽信号"></a>基带信号与带宽信号</h5><h6 id="信道"><a href="#信道" class="headerlink" title="信道:"></a>信道:</h6><blockquote><p>信号的传输媒介，一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p></blockquote><ul><li><p>按传输信号：</p><ul><li>模拟信道（传送模拟信号）</li><li>数字信道（传送数字信号）</li></ul></li><li><p>按传输介质：</p><ul><li>无线信道</li><li>有线信道</li></ul></li></ul><h6 id="信道上传送的信号："><a href="#信道上传送的信号：" class="headerlink" title="信道上传送的信号："></a>信道上传送的信号：</h6><ul><li><p>基带信号：</p><ul><li>将数字信号1和0直接用两种不同的电压表示，再送到数字信道上去传输（基带传输）</li><li>来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，比如我们说话的声波就是基带信号。</li></ul></li><li><p>宽带信号：</p><ul><li>将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输（宽带传输）。</li><li>把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）</li></ul></li><li><p>总结：</p><ul><li>在传输距离较近时，计算机网络采用基带传输方式（近距离衰减小，从而信号内容不易发生变化）</li><li>在传输距离较远时，计算机网络采用宽带传输方式（远距离衰减大，即使信号变化大也能最后过滤出来基带信号）</li></ul></li></ul><h5 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h5><h6 id="数据———-gt-数字信号"><a href="#数据———-gt-数字信号" class="headerlink" title="数据———&gt;数字信号"></a>数据———&gt;数字信号</h6><ul><li>数字数据__数字发送器___-&gt; 数字信号</li><li>模拟数据___PCM编码器__-&gt;数字信号</li></ul><h6 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h6><ul><li><p>非归零编码【NRZ]</p><ul><li>高1低0</li><li>编码容易实现，但没有检错功能，且无法判断一个码元的开始和结束，以至于收发双方难以保持同步。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e955952ddd7c9ea35ebcd512d9ed474bad6be4a719dc1a8c7ae2f2a5f1adbfab.png"></li></ul></li><li><p>曼彻斯特编码</p><ul><li>曼彻斯特编码(Manchester)又称裂相码、同步码、相位编码，是一种用电平跳变来表示1或0的编码方法，其变化规则很简单，即每个码元均用两个不同相位的电平信号表示，也就是一个周期的方波，但0码和1码的相位正好相反。由于曼彻斯特码在每个时钟位都必须有一次变化，因此，其编码的效率仅可达到50%左右，位中间的跳变既作时钟信号（可用于同步），又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。每一个码元都被调成两个电平，所以数据传输速率只有调制速率的1&#x2F;2.</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/d2db19f1ec0e6a807cf9f9a0eeadd8e67b0d231406017dc922bb1e21cf694500.png"></li></ul></li><li><p>差分曼彻斯特编码</p><ul><li>同1异0</li><li>常用于局域网传输，其规则是：若码元为1，则前半个码元的电平与上一个码元的后半个码元的电平相同，若为0，则相反。该编码的特点是，在每个码元的中间，都有一次电平的跳转，可以实现自同步，且抗干扰性强于曼彻斯特编码。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bb67f7aa73890884dfaa7896d59725e7388dd4a17aa777b94881b539166e4cd5.png"></li></ul></li><li><p>归零编码【RZ】</p><ul><li>信号电平在一个码元之内都有恢复到零的这种编码成编码方式。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0c4a2ab225cbde44b78bd054efba3741f301a63c14f271b9c67fdd0be865bceb.png"></li></ul></li><li><p>反向不归零编码【NRZI】</p><ul><li>信号电平翻转表示0，信号电平不变表示1.</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9ffa8e9603d321e94116dbad43ae9e6ed71bfee0f81970727758e533633c5e5a.png"></li></ul></li><li><p>4B&#x2F;5B编码</p><ul><li>比特流中插入额外的比特以打破一连串的0或1，就是用5个比特来编码4个比特的数据，之后再传给接收方，因此称为4B&#x2F;5B。编码效率为80%。</li><li>只采用16种对应16种不同的4位码，其他的16种作为控制码（帧的开始和结束，线路的状态信息等）或保留。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1056c2249ba93d9a9da8499b70bf891ee0034a63641cfe2baa5409e8036d6ba2.png"></li></ul></li></ul><h6 id="模拟数据编码为数字信号："><a href="#模拟数据编码为数字信号：" class="headerlink" title="模拟数据编码为数字信号："></a>模拟数据编码为数字信号：</h6><ul><li><p>计算机内部处理的是二进制数据，处理的都是数字音频，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列（即实现音频数字化）。</p></li><li><p>最典型的例子就是对音频信号进行编码的脉冲调制（PCM),在计算机应用中，能够达到最高保真水平的就是PCM编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的WAV文件中均有应用。它主要包括三步：抽样、量化、编码。</p><ul><li><p>抽样：</p><ul><li>对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。</li><li>为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样：f采样频率 &gt;&#x3D; 2f信号最高频率</li></ul></li><li><p>量化：</p><ul><li>把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的数字值。</li></ul></li><li><p>编码：</p><ul><li>把量化的结果转换为与之对应的二进制编码。</li></ul></li></ul></li></ul><h5 id="调制："><a href="#调制：" class="headerlink" title="调制："></a>调制：</h5><h6 id="数据—–-gt-模拟信号"><a href="#数据—–-gt-模拟信号" class="headerlink" title="数据—–&gt;模拟信号"></a>数据—–&gt;模拟信号</h6><ul><li>数字数据___调制器___-&gt;模拟信号</li><li>模拟数据____放大器调制器___-&gt;模拟信号</li></ul><h6 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h6><ul><li><p>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程。</p></li><li><p>调幅（2ASK)</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f073b0c9c6e8d487e561933e3aa12fab49365d0a28a8d1d3f92f2f20eca03392.png"></li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a1cde732f6504fb22abd486c864483feb86096e0d938e912cb5792e3c4c86498.png"></li></ul></li><li><p>调频（2FSK)</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f073b0c9c6e8d487e561933e3aa12fab49365d0a28a8d1d3f92f2f20eca03392.png"></li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ba3cb6e14f503589b214d1baa9e7ad931aeebc40228525f6f05164ff6b59e7dc.png"></li></ul></li><li><p>调相（2PSK)</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f073b0c9c6e8d487e561933e3aa12fab49365d0a28a8d1d3f92f2f20eca03392.png"></li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/417f9399d85860dd5ea2f5f4bea6780069e939619c4bbe34a46a1d97ab218fc4.png"></li></ul></li><li><p>调幅+调相（QAM)</p></li></ul><h6 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h6><blockquote><p>为了实现传输的有效性，可能需较高的频率。这种调制方式还可以使用频分复用技术，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式：模拟的声音数据是加载到模拟的载波信号中传输的。</p></blockquote><h3 id="物理层传输介质及分类："><a href="#物理层传输介质及分类：" class="headerlink" title="物理层传输介质及分类："></a>物理层传输介质及分类：</h3><blockquote><p>传输介质也称传输媒体&#x2F;传输媒介，它就是数据传输系统中在发送设备和接收设备之间的物理通路。</p></blockquote><h4 id="传输媒体并不是物理层。"><a href="#传输媒体并不是物理层。" class="headerlink" title="传输媒体并不是物理层。"></a>传输媒体并不是物理层。</h4><ul><li>传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为0层。在传输媒体中传输的是信号，但传输媒体并不知道传输的信号代表什么意思。</li><li>但物理层规定了电气特性，因此能够识别所传送的比特流。</li></ul><h4 id="传输介质：-1"><a href="#传输介质：-1" class="headerlink" title="传输介质："></a>传输介质：</h4><h5 id="导向性传输介质"><a href="#导向性传输介质" class="headerlink" title="导向性传输介质"></a>导向性传输介质</h5><p>电磁波被导向沿着固定媒体（铜线&#x2F;光纤）传播。</p><h6 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h6><blockquote><p>双绞线是古老，又常用的传输介质，它由两根采用一定规则并排绞合的、相互绝缘的铜导线组成。【绞合可以减少对相邻导线的电磁干扰。】</p></blockquote><ul><li><p>无屏蔽双绞线</p><ul><li><p>无屏蔽层的双绞线就称为非屏障双绞线（UTP).</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/60885c7fb67558e732aeeb5c015d0a56a6d388cb8dd1a4ae2f8533db36524082.png"></p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6797cae2019626e4fc5bcb3dc134d4fd04ccd40f480b4f603430c697c2c61da1.png"></li></ul></li></ul></li><li><p>屏蔽双绞线</p><ul><li><p>为了进一步提高电磁干扰能力，可在双绞线的外面再加上一个由金属丝编织成的屏蔽层，这就是屏蔽双绞线（STP)</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5e85ad519eef0db2742e7683bae75b476449bf18c85698cafd22a5c059e9e14d.png"></p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a735e51d114d6764658d5c86d6a26324ff7f99e96b82425917dbae06b585a531.png"></p><p>双绞线价格便宜，是最常用的传输介质之一，在局域网和传统电话网中普遍使用。模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里。距离太远时，对于模拟传输，要用放大器放大衰减的信号；对于数字传输，要用中继器将失真的信号整型。</p></li></ul></li></ul></li></ul><h6 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h6><blockquote><p>同轴电缆由导体铜质芯线、绝缘层、网状屏蔽层和塑料外层构成。</p></blockquote><ul><li><p>按特性阻抗数值的不同：</p><ul><li>50欧姆同轴电缆主要用于传送基带数字信号，又称基带同轴电缆，在局域网中得到了广泛的应用。</li><li>75欧姆同轴电缆主要用于传送宽带信号，又称为宽带同轴电缆，它主要用于有线电视系统。</li></ul><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c2027e20dd7e117399eedb699549c195175d3b589f326c3e8db085b2ea48da7d.png"></p></li></ul><h6 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h6><ul><li><p>光纤通信就是光导纤维（简称光纤）传递光脉冲来进行通信。有光脉冲表示1，无光脉冲表示0.而可见光的频率大约是10的8次方MHz，因为光纤通信系统的带宽远远大于目前其他各种传输媒体的带宽。</p><ul><li>光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲；在接收端用光电二极管做成光检测器，在检测到光脉冲时可还原出电脉冲。</li></ul></li><li><p>光纤主要由纤芯（实心的！）和包层构成，光波通过纤芯进行传导，包层较纤芯有较低的折射率。当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角。因此，如果入射角足够大，就会出现全反射，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去。</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6e251522c04a115548ef03b299b5fcef133a910bc0bbb9c08efd411dad6300e0.png"></p></li><li><p>按射入光线的条数</p><ul><li><p>多模脉冲</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/abcdb6252cfdd62f0ef3a75a97effecaf49840b9b615d0113ababfa82f967a4b.png"></li></ul></li><li><p>单模光纤</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/befcfb726fbcbee3f3af4b37284242370cf5d9819ced9aa8a19b984dbde52b5a.png"></li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bcb4a0e12ef5b577631dd7652ea0092a272e0ba0b5ce7e4c08805e1833b7a883.png"></p></li></ul></li><li><p>特点：</p><ul><li>传输损耗小，中继距离长，对远距离传输特别经济。</li><li>抗雷电和电磁干扰性能好。</li><li>无串音干扰，保密性好，也不易被窃听或截取数据。</li><li>体积下，重量轻。</li></ul></li></ul><h5 id="非导向性传输介质"><a href="#非导向性传输介质" class="headerlink" title="非导向性传输介质"></a>非导向性传输介质</h5><h6 id="自由空间，介质可以是空气、真空、海水等。"><a href="#自由空间，介质可以是空气、真空、海水等。" class="headerlink" title="自由空间，介质可以是空气、真空、海水等。"></a>自由空间，介质可以是空气、真空、海水等。</h6><h6 id="无线电波"><a href="#无线电波" class="headerlink" title="无线电波"></a>无线电波</h6><ul><li>信号向所有方向传播</li><li>较强的穿透能力，可传远距离，广泛用于通信领域（如手机通信）。</li></ul><h6 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h6><blockquote><p>信号向固定方向传播</p></blockquote><ul><li><p>微波通信频率较高、频段范围宽，因此数据率很高。</p><ul><li><p>地面微波接力通信</p></li><li><p>卫星通信</p><ul><li><p>优点</p><ul><li>通信容量大</li><li>距离远</li><li>覆盖广</li><li>广播通信和多址通信</li></ul></li><li><p>缺点</p><ul><li>传播时延长（250-270ms）</li><li>受气候影响大（eg：强风、太阳黑子爆发、日凌）</li><li>误码率较高</li><li>成本高</li></ul></li></ul></li></ul></li></ul><h6 id="红外线、激光"><a href="#红外线、激光" class="headerlink" title="红外线、激光"></a>红外线、激光</h6><ul><li>信号向固定方向传播</li><li>把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号，再在空间中传播。</li></ul><h3 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h3><h4 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h4><h5 id="诞生原因："><a href="#诞生原因：" class="headerlink" title="诞生原因："></a>诞生原因：</h5><ul><li>由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度将造成信号失真，因此会导致接收错误。</li></ul><h5 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h5><ul><li>对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。【再生数字信号】</li></ul><h5 id="中继器的两端："><a href="#中继器的两端：" class="headerlink" title="中继器的两端："></a>中继器的两端：</h5><ul><li>两端的网络部分是网段，而不是子网，适用于完全相同的两类网络的互连，且两个网段速率要相同。</li><li>中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据。</li><li>两端可连相同媒体，也可连不同媒体。</li><li>中继器的两端的网段一定要是同一个协议。（中继器不会存储转发）</li></ul><h5 id="5-4-3规则："><a href="#5-4-3规则：" class="headerlink" title="5-4-3规则："></a>5-4-3规则：</h5><ul><li>网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1ef5280dd7d485fdc610370ef287c1b232fcbe00d3a1dd794a83a0fccc9b7c97.png" alt="最多不超过五个网段，在五个网段中最多有四个物理层网络设备，只有三个段可以挂接计算机。"></li></ul><h4 id="集线器（多口中继器）"><a href="#集线器（多口中继器）" class="headerlink" title="集线器（多口中继器）"></a>集线器（多口中继器）</h4><h5 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h5><p>对信号进行再生放大转发，对衰减的信号进行放大，接着转发到其他所有（除输入端口外）处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p><h5 id="集线器不能分割冲突域。"><a href="#集线器不能分割冲突域。" class="headerlink" title="集线器不能分割冲突域。"></a>集线器不能分割冲突域。</h5><p>连在集线器上的工作主机平方带宽。</p><h2 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="数据链路层基本概念："><a href="#数据链路层基本概念：" class="headerlink" title="数据链路层基本概念："></a>数据链路层基本概念：</h3><h4 id="结点："><a href="#结点：" class="headerlink" title="结点："></a>结点：</h4><blockquote><p>主机、路由器</p></blockquote><h4 id="链路："><a href="#链路：" class="headerlink" title="链路："></a>链路：</h4><blockquote><p>网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。</p></blockquote><h4 id="数据链路："><a href="#数据链路：" class="headerlink" title="数据链路："></a>数据链路：</h4><blockquote><p>网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路。</p></blockquote><h4 id="帧："><a href="#帧：" class="headerlink" title="帧："></a>帧：</h4><blockquote><p>链路层的协议数据单元，封装网络层数据报。</p></blockquote><p>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p><h3 id="链路层的功能："><a href="#链路层的功能：" class="headerlink" title="链路层的功能："></a>链路层的功能：</h3><blockquote><p>数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。其主要作用是加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p></blockquote><h4 id="为网络层提供服务："><a href="#为网络层提供服务：" class="headerlink" title="为网络层提供服务："></a>为网络层提供服务：</h4><h5 id="无确认无连接服务"><a href="#无确认无连接服务" class="headerlink" title="无确认无连接服务"></a>无确认无连接服务</h5><ul><li>通信质量好</li><li>有线传输链路</li></ul><h5 id="有确认无连接服务"><a href="#有确认无连接服务" class="headerlink" title="有确认无连接服务"></a>有确认无连接服务</h5><ul><li>通信质量差的无线传输链路</li></ul><h5 id="有确认面向连接服务"><a href="#有确认面向连接服务" class="headerlink" title="有确认面向连接服务"></a>有确认面向连接服务</h5><ul><li>通信质量差的无线传输链路</li></ul><h4 id="链路管理【用于面向连接的服务】："><a href="#链路管理【用于面向连接的服务】：" class="headerlink" title="链路管理【用于面向连接的服务】："></a>链路管理【用于面向连接的服务】：</h4><ul><li>连接的建立</li><li>维持</li><li>释放</li></ul><h5 id="组帧："><a href="#组帧：" class="headerlink" title="组帧："></a>组帧：</h5><h6 id="封装成帧："><a href="#封装成帧：" class="headerlink" title="封装成帧："></a>封装成帧：</h6><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0cefc2e4fcb5ba596b8f7249c40a08c9557f480b0a9ab26327f452a06fc0f916.png"></p></li><li><p>封装成帧就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束</p></li><li><p>首部和尾部包含许多的控制信息，他们的一个重要作用:帧定界（确定帧的界限）。</p></li><li><p>帧同步：</p><ul><li>接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。</li></ul></li></ul><h6 id="透明传输："><a href="#透明传输：" class="headerlink" title="透明传输："></a>透明传输：</h6><ul><li>透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西。</li><li>当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的。</li></ul><h6 id="组帧的四种方法："><a href="#组帧的四种方法：" class="headerlink" title="组帧的四种方法："></a>组帧的四种方法：</h6><ul><li><p>字符计数法</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/70f78a4fb46b056d09640979adf9fdf4c04f62e73099880ab5a4f9f8282c3401.png"></p></li><li><p>帧首部使用一个计数字段（第一个字节，八位）来标明帧内字符数。</p></li><li><p>缺点：</p><ul><li>容易一错全错。</li></ul></li></ul></li><li><p>字符（节）填充法</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/df77f8e3df514576fce173cd3d21e868d738eb0a823408b5e57afd6f38af4eca.png"></li></ul></li><li><p>零比特填充法</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1b53e0afba2141730fb61ab288701f69c920dc5d666753428bf1e94b41cce5bb.png"></li><li>保证了透明传输:在传送的比特流中可以传送任意比特组合，而不会引起对帧边界的判断错误。</li></ul></li><li><p>违规编码法</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2c27e2fc0eba438ce7f6b7425b1723286a451fce51a3f81a3cb82f1495b5c6c9.png"></li><li>可以用“高-高”，“低-低”来定界帧的起始和终止。</li></ul><p>由于字节计数法中Count字段的脆弱性（其值若有差错将导致灾难性后果〉及字符填充实现上的复杂性和不兼容性，目前较普遍使用的帧同步法是比特填充和违规编码法。</p></li></ul><h5 id="流量控制与可靠传输机制："><a href="#流量控制与可靠传输机制：" class="headerlink" title="流量控制与可靠传输机制："></a>流量控制与可靠传输机制：</h5><blockquote><p>较高的发送速度和较低的接收能力的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p></blockquote><h6 id="流量控制在不同层："><a href="#流量控制在不同层：" class="headerlink" title="流量控制在不同层："></a>流量控制在不同层：</h6><ul><li><p>数据链路层：</p><ul><li>数据链路层的流量控制是点对点的。</li><li>数据链路层流量控制手段:接收方收不下就不回复确认。</li></ul></li><li><p>传输层：</p><ul><li>传输层的流量控制是端到端的。</li><li>传输层流量控制手段:接收端给发送端一个窗口公告。</li></ul></li></ul><h6 id="流量控制方法："><a href="#流量控制方法：" class="headerlink" title="流量控制方法："></a>流量控制方法：</h6><ul><li><p>停止-等待协议：</p><ul><li><p>每发送完一个帧就停止发送,等待对方的确认，在收到确认后再发送下一个帧。</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/86476c5d33b14f214e5d345a56960854f95b788d257a0aab491617a4bb5005f3.png"></p></li><li><p>发送窗口大小&#x3D;1，接收窗口大小&#x3D;1;</p></li><li><p>为什么要有停止-等待协议：</p><ul><li><p>除了比特出差错，底层信道还会出现丢包问题。</p><ul><li>丢包:物理线路故障、设备故障、病毒攻击、路由信息错误等原因，会导致数据包的丢失。</li></ul></li><li><p>为了实现流量控制。</p></li></ul></li><li><p>研究停等协议的前提：</p><ul><li>虽然现在常用全双工通信方式，但为了讨论问题方便，仅考虑一方发送数据（发送方)，一方接收数据（接收方）。</li><li>因为是在讨论可靠传输的原理，所以并不考虑数据是在哪一个层次上传送的。</li><li>“停止-等待”就是每发送完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组。</li></ul></li><li><p>停等协议的应用情况：</p><ul><li><p>无差错情况</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a4a1c0b758b4e9f06b35e27cc8761d6893977e69aa7a4796e8d141d558b499fc.png"></li></ul></li><li><p>有差错情况</p><ul><li><p>数据帧丢失或检测到帧出错</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cd98bbf99a36b935fcad1d36a8e1d1ef87fe67849badbd8a404c69c5818c21cb.png"></li><li>发完一个帧后，必须保留它的副本。</li><li>数据帧和确认帧必须编号。</li></ul></li><li><p>ACK丢失</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3ed31b3691b1d44356edd7f00f43201ef30d95ce27c72a76e838c8f1b4542463.png"></li></ul></li><li><p>ACK迟到</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f7a04cabaccb22b930c8fd9585fcd582dc9bf7cc1ce848e48240c910bf34f371.png"></li></ul></li></ul></li></ul></li><li><p>停等协议性能分析：</p><ul><li><p>优点：</p><ul><li>简单</li></ul></li><li><p>缺点：</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2fd4546081251b77cc0e79b6965d0d071851e23f12c897ba309c74376230cb19.png"></p></li><li><p>信道利用率太低</p><ul><li>信道利用率：发送方在一个发送周期内,有效地发送数据所需要的时间占整个发送周期的比率。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/875db2e25ed4a2a59bd66b5815a5d26eb00f2a5b9b072da2e3fa29a969a19802.png"></li><li>信道吞吐率&#x3D;信道利用率*发送方的发送速率</li></ul></li></ul></li></ul></li><li><p>停等协议的弊端：</p><ul><li>必须增加序号范围。</li><li>发送方需要缓存多个分组。</li></ul></li></ul></li><li><p>滑动窗口协议：</p><ul><li><p>后退N帧协议（GBN）</p><ul><li><p>发送窗口大小&gt;1，接收窗口大小&#x3D;1;</p></li><li><p>滑动窗口</p><ul><li><p>发送窗口</p><ul><li>发送方维持一组连续的允许发送的帧的序号。</li></ul></li><li><p>接收窗口</p><ul><li>接收方维持一组连续的允许接收帧的序号。</li></ul></li><li><p>滑动窗口长度：</p><ul><li>若采用n个比特对帧编号，那么发送窗口的尺寸Wt,应满足: 1≤Wt&lt;2n次方-1。因为发送窗口尺寸过大，就会使得接收方无法区别新帧和旧帧。</li></ul></li></ul></li><li><p>GBN发送方必须响应的三件事</p><ul><li><p>上层的调用</p><ul><li>上层要发送数据时，发送方先检查发送窗口是否已满，如果未满，则产生一个帧并将其发送;如果窗口已满.发送方只需将数据返回给上层，暗示上层窗口已满。上层等一会再发送。(实际实现中，发送方可以缓存这些数据，窗口不满时再发送帧)。</li></ul></li><li><p>收到了一个ACK</p><ul><li>GBN协议中，对n号帧的确认采用累积确认的方式，标明接收方已经收到n号帧和它之前的全部帧。</li></ul></li><li><p>超时事件</p><ul><li>协议的名字为后退N帧&#x2F;回退N帧，来源于出现丢失和时延过长帧时发送方的行为。就像在停等协议中一样，定时器将再次用于恢复数据帧或确认帧的丢失。如果出现超时，发送方重传所有已发送但未被确认的帧。</li></ul></li></ul></li><li><p>GBN接收方要做的事</p><ul><li>如果正确收到n号帧，并且按序，那么接收方为n帧发送一个ACK，并将该帧中的数据部分交付给上层。</li><li>其余情况都丢弃帧，并为最近按序接收的帧重新发送ACK。接收方无需缓存任何失序帧，只需要维护一个信息:expectedseqnum(下一个按序接收的帧序号)。</li></ul></li><li><p>GBN协议重点总结：</p><ul><li>1.累积确认（偶尔捎带确认)</li><li>2接收方只按顺序接收帧,不按序无情丢弃</li><li>3.确认序列号最大的、按序到达的帧</li><li>4.发送窗口最大为2的n次方-1，接收窗口大小为1</li></ul></li><li><p>GBN协议性能分析：</p><ul><li><p>优点：</p><ul><li>因连续发送数据帧而提高了信道利用率</li></ul></li><li><p>缺点：</p><ul><li>在重传时必须把原来已经正确传送的数据帧重传，使传送效率降低</li></ul></li></ul></li></ul></li><li><p>选择重传协议(SR)</p><ul><li><p>发送窗口大小&gt;1，接收窗口大小&gt;1;</p></li><li><p>SR发送方必须响应的三件事</p><ul><li><p>上层的调用</p><ul><li>从上层收到数据后，SR发送方检查下一个可用于该帧的序号，如果序号位于发送窗口内，则发送数据帧;否则就像GBN一样，要么将数据缓存，要么返回给上层之后再传输。</li></ul></li><li><p>收到了一个ACK</p><ul><li>如果收到ACK，加入该帧序号在窗口内，则SR发送方将那个被确认的帧标记为已接收。如果该帧序号是窗口的下界（最左边第一个窗口对应的序号），则窗口向前移动到具有最小序号的未确认帧处。如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧。</li></ul></li><li><p>超时事件</p><ul><li>每个帧都有自己的定时器，一个超时事件发生后只重传一个帧。</li></ul></li></ul></li><li><p>SR接收方要做的事</p><ul><li><p>来者不拒（窗口内的帧）</p><ul><li>SR接收方将确认一个正确接收的帧而不管其是否按序。失序的帧将被缓存，并返回给发送方一个该帧的确认帧【收谁确认谁】，直到所有帧（即序号更小的帧）皆被收到为止，这时才可以将一批帧按序交付给上层，然后向前移动滑动窗口。</li><li>如果收到了窗口序号外(小于窗口下界)的帧，就返回一个ACK。</li></ul></li></ul></li><li><p>滑动窗口长度</p><ul><li><p>发送窗口最好等于接收窗口。（大了会溢出，小了没意义）</p></li><li><p>WTmay&#x3D;WRmax  &#x3D;  2的(n-1)次方</p><ul><li>n：是多少比特来标志</li></ul></li></ul></li><li><p>SR协议重点总结：</p><ul><li>对数据帧逐一确认，收一个确认一个。</li><li>只重传出错帧</li><li>接收方有缓存</li></ul></li></ul></li></ul></li></ul><h5 id="差错控制（帧错-x2F-位错）："><a href="#差错控制（帧错-x2F-位错）：" class="headerlink" title="差错控制（帧错&#x2F;位错）："></a>差错控制（帧错&#x2F;位错）：</h5><blockquote><p>概括来说，传输中的差错都是由于噪声引起的。</p></blockquote><ul><li><p>全局性：</p><ul><li>1.由于线路本身电气特性所产生的随机噪声(热噪声)，是信道固有的，随机存在的。</li><li>解决办法:提高信噪比来减少或避免干扰。(对传感器下手)</li></ul></li><li><p>局部性：</p><ul><li>2.外界特定的短暂原因所造成的冲击噪声，是产生差错的主要原因。</li><li>解决办法:通常利用编码技术来解决。</li></ul></li></ul><h6 id="差错："><a href="#差错：" class="headerlink" title="差错："></a>差错：</h6><ul><li><p>位错：</p><ul><li>【比特位出错，1变成o，0变成1。】</li></ul></li><li><p>帧错（[#1]-[#2]-[#3]）：</p><ul><li>丢失:收到[#1]-[#3]</li><li>重复:收到[#1]-[#2]-[#2]-[#3]</li><li>失序:收到[#1]-[#3]-[#2]</li></ul></li></ul><h6 id="差错控制（比特错）："><a href="#差错控制（比特错）：" class="headerlink" title="差错控制（比特错）："></a>差错控制（比特错）：</h6><ul><li><p>检错编码</p><ul><li><p>奇偶校验码</p><ul><li><p>n-1位信息元<br>1位校验元</p></li><li><p>奇校验码</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2238bb8558b4b29b02a9d09e7fa228c0827eae15f041905bd6e3b333aff46323.png"></li><li>特点：只能检查出奇数个比特错误，检错能力为50%。</li></ul></li><li><p>偶校验码</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/d4482ad6d5680d8fc4f67dc9e061a438643ee277d769363a89b9876dd32e1fd2.png"></li></ul></li></ul></li><li><p>循环冗余码CRC</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4d4514c10ba321fdcc8eb171e97e0c6956a8c6290f60fe56ca8bc365dad6ce12.png"></p></li><li><p>最终发送的数据：</p><ul><li>要发送的数据+帧检验序列FCS</li></ul></li><li><p>计算冗余码：</p><ul><li>加0      假设生成多项式G(x)的阶为r，则加r个0。</li><li>模2除法      数据加o后除以多项式，余数为冗余码&#x2F;FCS&#x2F;<br>CRC检验码的比特序列。</li></ul></li><li><p>接收端检错过程：</p><ul><li>把收到的每一个帧都除以同样的除数，然后检查得到的余数R。</li><li>1.余数为0，判定这个帧没有差错，接受。</li><li>2.余数为不为o，判定这个帧有差错（无法确定到位)，丢弃。</li><li>FCS的生成以及接收端CRC检验都是由硬件实现，处理很迅速，因此不会延误数据的传输。</li></ul></li><li><p>在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对帧的无差错接收，即“凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。接收端丢弃的帧虽然曾收到了，但是最终还是因为有差错被丢弃。“凡是接收端数据链路层接收的帧均无差错”。</p><ul><li>“可靠传输”  : 数据链路层发送端发送什么，接收端就收到什么。</li><li>链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输。</li></ul></li></ul></li></ul></li><li><p>纠错编码</p><ul><li><p>海明码</p><ul><li><p>发现双比特错，纠正单比特错。</p></li><li><p>工作原理；</p><ul><li>动一发而牵全身</li></ul></li><li><p>工作流程：</p><ul><li><p>确定校验码位数r</p><ul><li><p>海明不等式</p><ul><li>2的r次方 &gt; k+r+1<br>r为冗余信息位，k为信息位</li></ul></li><li><p>例：要发送的数据：  D &#x3D; 101101</p><ul><li>数据的位数k&#x3D;6,<br>满足不等式的最小r为4，<br>也就是D&#x3D;101101的海明码应该有6+4&#x3D;10位，其中原数据6位，效验码4位。</li></ul></li></ul></li><li><p>确定校验码和数据的位置</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a5dfc4dbe129496ff360eeb79763cacbccd0466adbb38b825907903d152454ab.png"></li></ul></li><li><p>求出校验码的值</p><ul><li>令所有要检验的位异或 &#x3D; 0。 </li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0387ef41788865abe965e9df50c267e75cc513fd1d298cc172ae28decb9e5eb8.png"></li></ul></li><li><p>检错并纠错</p><ul><li>令所有要校验的位异或运算。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bf1efcbca2d92f0b33da941d6259fb286977cc0946c5c4da260b9e41b6cd19e1.png"></li></ul></li></ul></li></ul></li></ul></li></ul><h6 id="编码：-1"><a href="#编码：-1" class="headerlink" title="编码："></a>编码：</h6><ul><li><p>数据链路层编码和物理层的数据编码与调制不同。</p></li><li><p>数据链路层</p><ul><li>而数据链路层的编码针对的是一组比特,它通过冗余码的技术实现一组二进制比特串在传输过程是否出现了差错。</li></ul></li><li><p>物理层</p><ul><li>物理层编码针对的是单个比特，解决传输过程中比特的同步等问题,如曼彻斯特编码。</li></ul></li><li><p>冗余编码：</p><ul><li>在数据发送之前，先按某种关系附加上一定的冗余位，构成一个符合某一规则的码字后再发送。当要发送的有效数据变化时，相应的冗余位也随之变化，使码字遵从不变的规则。接收端根据收到码字是否仍符合原规则，从而判断是否出错。</li></ul></li></ul><h3 id="介质访问控制："><a href="#介质访问控制：" class="headerlink" title="介质访问控制："></a>介质访问控制：</h3><blockquote><p>介质访问控制的内容就是，采取一定的措施，使得两对节点之间的通信不会发生互相干扰的情况。</p></blockquote><h4 id="协议："><a href="#协议：" class="headerlink" title="协议："></a>协议：</h4><h5 id="信道划分介质访问控制-MAC-Multiple-Access-Control-协议"><a href="#信道划分介质访问控制-MAC-Multiple-Access-Control-协议" class="headerlink" title="信道划分介质访问控制(MAC Multiple Access Control)协议:"></a>信道划分介质访问控制(MAC Multiple Access Control)协议:</h5><ul><li>基于多路复用技术划分资源。</li><li>网络负载重:共享信道效率高，且公平</li><li>网络负载轻:共享信道效率低</li></ul><h5 id="随机访问MAC协议"><a href="#随机访问MAC协议" class="headerlink" title="随机访问MAC协议:"></a>随机访问MAC协议:</h5><ul><li>用户根据意愿随机发送信息，发送信息时可独占信道带宽。</li><li>网络负载重:产生冲突开销</li><li>网络负载轻:共享信道效率高，单个结点可利用信道全部带宽</li></ul><h5 id="轮询访问MAC协议-x2F-轮流协议-x2F-轮转访问MAC协议"><a href="#轮询访问MAC协议-x2F-轮流协议-x2F-轮转访问MAC协议" class="headerlink" title="轮询访问MAC协议&#x2F;轮流协议&#x2F;轮转访问MAC协议:"></a>轮询访问MAC协议&#x2F;轮流协议&#x2F;轮转访问MAC协议:</h5><blockquote><p>既要不产生冲突，又要发送时占全部带宽。</p></blockquote><h6 id="轮询协议："><a href="#轮询协议：" class="headerlink" title="轮询协议："></a>轮询协议：</h6><blockquote><p>主结点轮流“邀请”从属节点发送数据。</p></blockquote><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/881655e483ced38f15ecfeefcd7c58f317a600c2c9b4715396878c433d2ad104.png"></p></li><li><p>问题：</p><ul><li>轮询开销</li><li>等待延迟</li><li>单点故障</li></ul></li></ul><h4 id="介质访问控制：-1"><a href="#介质访问控制：-1" class="headerlink" title="介质访问控制："></a>介质访问控制：</h4><h5 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h5><p>信道划分介质访问控制</p><blockquote><p>信道划分介质访问控制:将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网络上的设备。</p></blockquote><h6 id="可以分为几种方式："><a href="#可以分为几种方式：" class="headerlink" title="可以分为几种方式："></a>可以分为几种方式：</h6><ul><li><p>频分多路复用FDM</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e90d4bce13bc9569c2965d1fdf1601cc74d7aae65d8a54956e8644d30b754745.png"></p></li><li><p>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽（频率带宽）资源。</p></li><li><p>优点：</p><ul><li>充分利用传输介质带宽，系统效率较高;</li><li>由于技术比较成熟，实现也比较容易。</li></ul></li></ul></li><li><p>时分多路复用TDM</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/63656d09e0f2171ad0dd3e1e852f7a55d3312690f141ddc48d7974c74f95d810.png"></p><ul><li>TDM帧是在物理层传送的比特流所划分的帧，标志一个周期。</li></ul></li><li><p>将时间划分为一段段等长的时分复用帧（TDM帧）。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙，所有用户轮流占用信道。</p></li><li><p>改进的时分复用–统计时分复用STDM</p><ul><li>每一个STDM帧中的时隙数小于连接在集中器上的用户数。各用户有了数据就随时发往集中器的输入缓存，然后集中器按顺序依次扫描输入缓存，把缓存中的输入数据放入STDM帧中，一个STDM帧满了就发出。STDM帧不是固定分配时隙,而是按需动态分配时隙。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e24314043fe1aa7a80773c10fbfd6159ac9fc2095dbf3b8fbb81bd1579571e6f.png"></li></ul></li></ul></li><li><p>波分多路复用WDM</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/d52ff26592c103093c17743978225bc52723a728d4fd2e4b63629406a2ea235c.png"></li><li>波分多路复用就是光的频分多路复用，在一根光纤中传输多种不同波长（频率）的光信号，由于波长（频率)不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。</li></ul></li><li><p>码分多路复用CDM</p><ul><li><p>码分多址(CDMA）是码分复用的一种方式。</p><ul><li><p>1个比特分为多个码分&#x2F;芯片（chip），每一个站点被指定一个唯一的m位的芯片序列。发送1时站点发送芯片序列，发送0时发送芯片序列反码（通常把0写出-1）。</p></li><li><p>如何不打架：</p><ul><li>多个站点同时发送数据的时候，要求各个站点芯片序列相互正交。</li></ul></li><li><p>如何合并：</p><ul><li>各路数据在信道中被线性相加。</li></ul></li><li><p>如何分离：</p><ul><li>合并的数据和源站规格化内积。</li></ul></li></ul></li></ul></li></ul><h5 id="动态划分信道"><a href="#动态划分信道" class="headerlink" title="动态划分信道"></a>动态划分信道</h5><h6 id="动态媒体接入控制-x2F-多点接入"><a href="#动态媒体接入控制-x2F-多点接入" class="headerlink" title="动态媒体接入控制&#x2F;多点接入"></a>动态媒体接入控制&#x2F;多点接入</h6><blockquote><p>特点:信道并非在用户通信时固定分配给用户。</p></blockquote><h6 id="轮询访问介质访问控制"><a href="#轮询访问介质访问控制" class="headerlink" title="轮询访问介质访问控制"></a>轮询访问介质访问控制</h6><ul><li><p>令牌传递协议：</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a1434d2f74d950afc001dee521b30720aa3e08ad8bdcf7bd045b56dc62670936.png"></p><ul><li><p>令牌：</p><ul><li>一个特殊格式的MAC控制帧，不含任何信息。</li><li>控制信道的使用，确保同一时刻只有一个结点独占信道。</li><li>令牌环网无碰撞</li></ul></li><li><p>每个结点都可以在一定的时间内(令牌持有时间）获得发送数据的权利，并不是无限制地持有令牌。</p></li></ul></li><li><p>问题：</p><ul><li>令牌开销</li><li>等待延迟</li><li>单点故障</li></ul></li><li><p>应用于令牌环网（物理星型拓扑，逻辑环形拓扑）。</p></li><li><p>采用令牌传送方式的网络常用于负载较重、通信量较大的网络中。</p></li></ul></li></ul><h6 id="随机访问介质访问控制"><a href="#随机访问介质访问控制" class="headerlink" title="随机访问介质访问控制"></a>随机访问介质访问控制</h6><blockquote><p> 所有的用户可随机发送信息发送信息时占全部带宽</p></blockquote><ul><li><p>ALOHA协议</p><ul><li><p>纯ALOHA协议</p><ul><li><p>纯ALOHA协议思想:不监听信道，不按时间槽发送，随机重发。【想发就发】</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8d5a9d4289f4467b665cd8d8dcaf9e93720825c9d2564134ef83660261e6c2b4.png"></p><ul><li><p>冲突如何检测</p><ul><li>如果发生冲突，接收方在就会检测出差错,然后不予确认，发送方在一定时间内收不到就判断发生冲突。</li></ul></li><li><p>冲突如何解决</p><ul><li>超时后等一随机时间再重传。</li></ul></li></ul></li></ul></li><li><p>时隙ALOHA协议</p><ul><li>时隙ALOHA协议的思想:把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道,若发生冲突，则必须等到下一个时间片开始时刻再发送。【控制想发就发的随意性】</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/de7e904baf641a02d9e64323ed2642b75c99e859e7811db048668344d28f922a.png"></li></ul></li><li><p>关于ALOHA协议</p><ul><li>1.纯ALOHA比时隙ALOHA吞吐量更低，效率更低。</li><li>2.纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发。</li></ul></li></ul></li><li><p>CSMA协议</p><ul><li><p>载波监听多路访问协议CSMA (carrier sense multiple access)</p></li><li><p>CS:</p><ul><li>载波侦听&#x2F;监听，每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加)。当一个站检测到的信号电压摆动值超过一定门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞，即发生了冲突。</li></ul></li><li><p>MA:</p><ul><li>多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</li></ul></li><li><p>协议思想：发送帧之前，监听信道。</p><ul><li><p>监听结果：</p><ul><li><p>信道空闲：</p><ul><li>发送完整帧</li></ul></li><li><p>信道忙：</p><ul><li>推迟发送</li></ul></li></ul></li></ul></li><li><p>信道划分：</p><ul><li><p>1-坚持CSMA</p><ul><li><p>1-坚持指的是对于监听信道忙之后的坚持。</p></li><li><p>1-坚持CSMA思想：如果一个主机要发送消息，那么它先监听信道。</p><ul><li>空闲则直接传输，不必等待。</li><li>忙则一直监听，直到空闲马上传输。</li><li>如果有冲突，站点就马上发送，避免了媒体利用率的损失。</li></ul></li><li><p>优点：</p><ul><li>只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。</li></ul></li><li><p>缺点：</p><ul><li>假如有两个或两个以上的站点有数据要发送，冲突就不可避免。</li></ul></li></ul></li><li><p>非坚持CSMA</p><ul><li><p>非坚持指的是对于监听信道忙之后就不继续监听。</p></li><li><p>非坚持CSMA思想:如果一个主机要发送消息，那么它先监听信道。</p><ul><li>空闲则直接传输，不必等待。</li><li>忙则等待一个随机的时间之后再进行监听。</li></ul></li><li><p>优点：</p><ul><li>采用随机的重发延迟时间可以减少冲突发生的可能性。</li></ul></li><li><p>缺点：</p><ul><li>可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。</li></ul></li></ul></li><li><p>p-坚持CSMA</p><ul><li><p>p-坚持指的是对于监听信道空闲的处理。</p></li><li><p>p-坚持CSMA思想:如果一个主机要发送消息，那么它先监听信道。</p><ul><li>空闲则以p概率直接传输，不必等待;概率1-p等待到下一个时间槽再传输。</li><li>忙则等待一个随机的时间之后再进行监听。</li></ul></li><li><p>优点：</p><ul><li>既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间的这种方案。</li></ul></li><li><p>缺点：</p><ul><li>发生冲突后还是要坚持把数据帧发送完，造成了浪费。</li></ul></li></ul></li><li><p>三种CSMA对比总结：</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a9ba08ec5577a5a7e2c0a5056a9ca5253fac9e1fbaa33676e3341893b00d0d71.png"></li></ul></li></ul></li></ul></li><li><p>CSMA&#x2F;CD协议</p><ul><li><p>载波监听多点接入&#x2F;碰撞检测CSMA&#x2F;C(carrier sense multiple access with collision detection)</p></li><li><p>CS：</p><ul><li>载波侦听&#x2F;监听，每一个站在发送数据之前以及发送数据时都要检测一下总线上是否有其他计算机在发送数据。</li></ul></li><li><p>MA：</p><ul><li>多点接入，表示许多计算机以多点接入的方式连接在一根总线上。总线型网络</li><li>总线型网络</li></ul></li><li><p>CD：</p><ul><li>碰撞检测（冲突检测），“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。</li><li>半双工网络</li></ul></li><li><p>如何确定碰撞后的重传时机：</p><ul><li><p>截断二进制指数规避算法</p><ul><li>1.确定基本退避（推迟）时间为争用期2t。</li><li>⒉.定义参数k，它等于重传次数，但k不超过10，即k&#x3D;min[重传次数，10]。当重传次数不超过10时，k等于重传次数;当重传次数大于10时，k就不再增大而一直等于10。</li><li>3.从离散的整数集合[0,1，，2的k次方-1]中随机取出一个数r，重传所需要退避的时间就是r倍的基本退避时间，即2r t 。</li><li>当重传达16次仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错。</li></ul></li></ul></li><li><p>最小帧长问题：</p><ul><li>帧的传输时延至少要两倍于信号在总线中的传播时延。</li><li>帧长（bit）&#x2F;    数据传输速率     &gt;&#x3D;  2t</li><li>最小帧长 &#x3D;  总线传播时延  *  数据传输速率  *   2  【2 t   *   数据传输速率 】</li><li>以太网规定最短帧长为64B，凡是长度小于64B的都是由于冲突而异常终止的无效帧。</li></ul></li></ul></li><li><p>CSMA&#x2F;CA协议</p><ul><li><p>载波监听多点接入&#x2F;碰撞避免CSMA&#x2F;CA (carrier sense multiple access with collision avoidance)</p></li><li><p>应用于无线局域网</p><ul><li><p>无法做到360°全面检测碰撞</p></li><li><p>隐蔽站</p><ul><li>当A和C都检测不到信号，认为信道空闲时，同时向终端B发送数据帧，就会导致冲突.</li></ul></li></ul></li><li><p>CSMA&#x2F;CA协议工作原理</p><ul><li><p>发送数据前，先检测信道是否空闲。</p><ul><li>空闲则发出RTS (request to send),RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息;信道忙则等待。</li><li>信道忙则等待。</li></ul></li><li><p>接收端收到RTS后，将响应CTS (clear to send) 。</p></li><li><p>发送端收到CTS后，开始发送数据帧（同时预约信道:发送方告知其他站点自己要传多久数据）。</p></li><li><p>接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应ACK帧。</p></li><li><p>发送方收到ACK就可以进行下一个数据帧的发送，若没有则一直重传至规定重发次数为止(采用二进制指数退避算法来确定随机的推迟时间)。</p></li></ul></li><li><p>实现的三种方法避免碰撞：</p><ul><li>预约信道</li><li>ACK帧</li><li>RTS&#x2F;CTS帧（可选）</li></ul></li></ul></li><li><p>CSMA&#x2F;CD与CSMA&#x2F;CA</p><ul><li><p>相同的：</p><ul><li>CSMA&#x2F;CD与CSMA&#x2F;CA机制都从属于CSMA的思路，其核心是先听再说。换言之，两个在接入信道之前都须要进行监听。当发现信道空闲后，才能进行接入。</li></ul></li><li><p>不同点：</p><ul><li><p>传输介质不同：</p><ul><li>CSMA&#x2F;CD用于总线式以太网【有线】，而CSMA&#x2F;CA用于无线局域网【无线】。</li></ul></li><li><p>载波检测方式不同：</p><ul><li>因传输介质不同，CSMA&#x2F;CD与CSMA&#x2F;CA的检测方式也不同。CSMA&#x2F;CD通过电缆中电压的变化来检测，当数据发生碰撞时，电缆中的电压就会随着发生变化;而CSMA&#x2F;CA采用能量检测(ED)、载波检测(CS）和能量载波混合检测三种检测信道空闲的方式。</li></ul></li><li><p>CSMA&#x2F;CD检测冲突，CSMA&#x2F;CA避免冲突，两者出现冲突后都会进行有上限的重传。</p><ul><li>子主题 1</li></ul></li></ul></li></ul></li></ul><h5 id="多路复用技术："><a href="#多路复用技术：" class="headerlink" title="多路复用技术："></a>多路复用技术：</h5><blockquote><p>把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源,提高信道利用率。</p></blockquote><h3 id="局域网基本概念和体系结构："><a href="#局域网基本概念和体系结构：" class="headerlink" title="局域网基本概念和体系结构："></a>局域网基本概念和体系结构：</h3><blockquote><p>局域网(Local Area Network):简称LAN，是指在某一区域内由多台计算机互联成的计算机组，使用广播信道。</p></blockquote><h4 id="局域网特点："><a href="#局域网特点：" class="headerlink" title="局域网特点："></a>局域网特点：</h4><ul><li>覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内。</li><li>使用专门铺设的传输介质（双绞线、同轴电缆）进行联网，数据传输速率高（10Mb&#x2F;s~10Gb&#x2F;s)。</li><li>通信延迟时间短，误码率低，可靠性较高。</li><li>各站为平等关系，共享传输信道。</li><li>多采用分布式控制和广播式通信，能进行广播和组播。</li></ul><h4 id="决定局域网的主要要素为"><a href="#决定局域网的主要要素为" class="headerlink" title="决定局域网的主要要素为:"></a>决定局域网的主要要素为:</h4><h5 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><h6 id="星型拓扑"><a href="#星型拓扑" class="headerlink" title="星型拓扑"></a>星型拓扑</h6><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6c3606cf8f12b209bd387a75b74b5549e52d753230e391de8b5d8ca71be0e438.png"></li><li>中心节点是控制中心，任意两个节点间的通信最多只需两步，传输速度快,并且网络构形简单、建网容易、便于控制和管理。但这种网络系统，网络可靠性低，网络共享能力差,有单点故障问题。</li></ul><h6 id="总线型拓扑"><a href="#总线型拓扑" class="headerlink" title="总线型拓扑"></a>总线型拓扑</h6><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ea2d914bc821b51fcf30908d70b71287882591e99767e9e516b2aef970af96f5.png"></li><li>网络可靠性高、网络节点间响应速度快、共享资源能力强、设备投入量少、成本低、安装使用方便,当某个工作站节点出现故障时，对整个网络系统影响小。</li></ul><h6 id="环形拓扑"><a href="#环形拓扑" class="headerlink" title="环形拓扑"></a>环形拓扑</h6><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/502049690d4a73b9bc3594560ed51721d466ff2d2eb90757fb436a8c4474cea2.png"></li><li>系统中通信设备和线路比较节省。有单点故障问题;由于环路是封闭的，所以不便于扩充，系统响应延时长，且信息传输效率相对较低。</li></ul><h6 id="树型拓扑"><a href="#树型拓扑" class="headerlink" title="树型拓扑"></a>树型拓扑</h6><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f4af5d38c79b8016b48802570a88515dc53e558beab1e159dc9e9eb9dabdabd5.png"></li><li>易于拓展，易于隔离故障,也容易有单点故障。</li></ul><h5 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h5><h6 id="有线局域网"><a href="#有线局域网" class="headerlink" title="有线局域网"></a>有线局域网</h6><p>常用介质:双绞线、同轴电缆、光纤</p><h6 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h6><p>常用介质:电磁波</p><h5 id="介质访问控制方法"><a href="#介质访问控制方法" class="headerlink" title="介质访问控制方法"></a>介质访问控制方法</h5><h6 id="CSMA-x2F-CD"><a href="#CSMA-x2F-CD" class="headerlink" title="CSMA&#x2F;CD"></a>CSMA&#x2F;CD</h6><ul><li>常用于总线型局域网，也用于树型网络</li></ul><h6 id="令牌总线"><a href="#令牌总线" class="headerlink" title="令牌总线"></a>令牌总线</h6><ul><li><p>常用于总线型局域网，也用于树型网络</p><ul><li>它是把总线型或树型网络中的各个工作站按一定顺序如按接口地址大小排列形成一个逻辑环。只有令牌持有者才能控制总线，才有发送信息的权力。</li></ul></li></ul><h6 id="令牌环"><a href="#令牌环" class="headerlink" title="令牌环"></a>令牌环</h6><ul><li>用于环形局域网，如令牌环网</li></ul><h4 id="局域网的分类："><a href="#局域网的分类：" class="headerlink" title="局域网的分类："></a>局域网的分类：</h4><h5 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h5><blockquote><p>以太网是应用最为广泛的局域网，包括标准以太网（10Mbps)、快速以太网(100Mbps） 、千兆以太网(1000 Mbps）和10G以太网，它们都符合IEEE802.3系列标准规范。逻辑拓扑总线型，物理拓扑是星型或拓展星型。使用CSMA&#x2F;CD.</p></blockquote><h5 id="令牌环网"><a href="#令牌环网" class="headerlink" title="令牌环网"></a>令牌环网</h5><blockquote><p>物理上采用了星形拓扑结构，逻辑上是环形拓扑结构。已是“明日黄花”。</p></blockquote><h5 id="FDDI网-Fiber-Distributed-Data-Interface"><a href="#FDDI网-Fiber-Distributed-Data-Interface" class="headerlink" title="FDDI网(Fiber Distributed Data Interface)"></a>FDDI网(Fiber Distributed Data Interface)</h5><blockquote><p> 物理上采用了双环拓扑结构,逻辑上是环形拓扑结构。</p></blockquote><h5 id="ATM网（Asynchronous-Transfer-Mode"><a href="#ATM网（Asynchronous-Transfer-Mode" class="headerlink" title="ATM网（Asynchronous Transfer Mode)"></a>ATM网（Asynchronous Transfer Mode)</h5><blockquote><p>较新型的单元交换技术,使用53字节固定长度的单元进行交换。</p></blockquote><h5 id="无线局域网-wireless-Local-Area-Network-WLAN）"><a href="#无线局域网-wireless-Local-Area-Network-WLAN）" class="headerlink" title="无线局域网(wireless Local Area Network;WLAN）"></a>无线局域网(wireless Local Area Network;WLAN）</h5><blockquote><p>采用IEEE 802.11标准。</p></blockquote><h4 id="IEEE-802标准"><a href="#IEEE-802标准" class="headerlink" title="IEEE 802标准"></a>IEEE 802标准</h4><blockquote><p>IEEE 802系列标准是IEEE 802 LAN&#x2F;MAN标准委员会制定的局域网、城域网技术标准（1980年2月成立)。其中最广泛使用的有以太网、令牌环、无线局域网等。这一系列标准中的每一个子标准都由委员会中的一个专门工作组负责。</p></blockquote><h5 id="链路层的两个控制子层"><a href="#链路层的两个控制子层" class="headerlink" title="链路层的两个控制子层"></a>链路层的两个控制子层</h5><h6 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h6><blockquote><p>IEEE 802标准所描述的局域网参考模型只对应OSI参考模型的数据链路层与物理层，它将数据链路层划分为逻辑链路层LLC子层和介质访问控制MAC子层。</p></blockquote><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/da6a24d60a64555f677c4eeb732325f20f9ee9f91fbbbfb80cb66f0bd600064f.png"></p><ul><li>LLC负责识别网络层协议，然后对它们进行封装。LLC报头告诉数据链路层一旦帧被接收到时，应当对数据包做何处理。为网络层提供服务:无确认无连接、面向连接、带确认无连接、高速传送。</li><li>MAC子层的主要功能包括数据帧的封装&#x2F;卸装,帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等。MAC子层的存在屏蔽了不同物理链路种类的差异性。</li></ul></li></ul><h3 id="以太网-1"><a href="#以太网-1" class="headerlink" title="以太网"></a>以太网</h3><blockquote><p>以太网(Ethernet)指的是由xerox公司创建并由Xerox、Intel和DEC公司联合开发的基带总线局域网规范，是当今现有局域网采用的最通用的通信协议标准。以太网络使用CSMA&#x2F;CD(载波监听多路访问及冲突检测）技术。</p></blockquote><h4 id="以太网在局域网各种技术中占统治性地位："><a href="#以太网在局域网各种技术中占统治性地位：" class="headerlink" title="以太网在局域网各种技术中占统治性地位："></a>以太网在局域网各种技术中占统治性地位：</h4><ul><li>1.造价低廉（以太网网卡不到100块);</li><li>2.是应用最广泛的局域网技术;</li><li>3.比令牌环网、ATM网便宜，简单;</li><li>4.满足网络速率要求:10Mb&#x2F;s~10Gb&#x2F;s.</li></ul><h4 id="以太网两个标准："><a href="#以太网两个标准：" class="headerlink" title="以太网两个标准："></a>以太网两个标准：</h4><ul><li>DIX Ethernet V2:第一个局域网产品（以太网）规约。</li><li>IEEE 802.3:IEEE 802委员会802.3工作组制定的第一个IEEE的以太网标准。（帧格式有一丢丢改动)</li></ul><h4 id="以太网提供无连接、不可靠的服务"><a href="#以太网提供无连接、不可靠的服务" class="headerlink" title="以太网提供无连接、不可靠的服务"></a>以太网提供无连接、不可靠的服务</h4><ul><li><p>以太网只实现无差错接收，不实现可靠传输。</p></li><li><p>无连接</p><ul><li>发送方和接收方之间无“握手过程”。</li></ul></li><li><p>不可靠</p><ul><li>不对发送方的数据帧编号，接收方不向发送方进行确认，差错帧直接丢弃，差错纠正由高层负责。</li></ul></li></ul><h4 id="1OBASE-T以太网"><a href="#1OBASE-T以太网" class="headerlink" title="1OBASE-T以太网"></a>1OBASE-T以太网</h4><ul><li>10BASE-T是传送基带信号的双绞线以太网，T表示采用双绞线，现10BASE-T采用的是无屏蔽双绞线(UTP），传输速率是10Mb&#x2F;s。</li><li>物理上采用星型拓扑,逻辑上总线型，每段双绞线最长为100m。</li><li>采用曼彻斯特编码。</li><li>采用CSMA&#x2F;CD介质访问控制。</li></ul><h4 id="适配器与MAC地址"><a href="#适配器与MAC地址" class="headerlink" title="适配器与MAC地址"></a>适配器与MAC地址</h4><blockquote><p>计算机与外界有局域网的连接是通过通信适配器的。</p></blockquote><h5 id="在局域网中，硬件地址又称为物理地址，或MAC地址。【实际上是标识符】"><a href="#在局域网中，硬件地址又称为物理地址，或MAC地址。【实际上是标识符】" class="headerlink" title="在局域网中，硬件地址又称为物理地址，或MAC地址。【实际上是标识符】"></a>在局域网中，硬件地址又称为物理地址，或MAC地址。【实际上是标识符】</h5><p>MAC地址:每个适配器有一个全球唯一的48位二进制地址，前24位代表厂家（由IEEE规定)，后24位厂家自己指定。常用6个十六进制数表示，如02-60-8c-e4-b1-21。</p><h4 id="以太网MAC帧"><a href="#以太网MAC帧" class="headerlink" title="以太网MAC帧"></a>以太网MAC帧</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/772ce9687d03dd80af43f06c85a43d00d4204af7f1cb689a91828c3aea003bb1.png"></p><h5 id="与IEEE-802-3的区别"><a href="#与IEEE-802-3的区别" class="headerlink" title="与IEEE 802.3的区别:"></a>与IEEE 802.3的区别:</h5><ul><li>1.第三个字段是长度&#x2F;类型</li><li>2.当长度&#x2F;类型字段值小于Ox0600时，数据字段必须装入LLC子层。</li></ul><h4 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h4><blockquote><p>速率≥100Mb&#x2F;s的以太网称为高速以太网。</p></blockquote><h5 id="100BASE-T以太网"><a href="#100BASE-T以太网" class="headerlink" title="100BASE-T以太网"></a>100BASE-T以太网</h5><ul><li>在双绞线上传送100Mb&#x2F;s基带信号的星型拓扑以太网，仍使用IEEE802.3的CSMA&#x2F;CD协议。</li><li>支持全双工和半双工，可在全双工方式下工作而无冲突。</li></ul><h5 id="吉比特以太网"><a href="#吉比特以太网" class="headerlink" title="吉比特以太网"></a>吉比特以太网</h5><ul><li>在光纤或双绞线上传送1Gb&#x2F;s信号。</li><li>支持全双工和半双工，可在全双工方式下工作而无冲突。</li></ul><h5 id="10吉比特"><a href="#10吉比特" class="headerlink" title="10吉比特"></a>10吉比特</h5><ul><li>10吉比特以太网在光纤上传送10Gb&#x2F;s信号。</li><li>只支持全双工，无争用问题。</li></ul><h3 id="无线局域网-1"><a href="#无线局域网-1" class="headerlink" title="无线局域网"></a>无线局域网</h3><h4 id="有固定基础设施无线局域网"><a href="#有固定基础设施无线局域网" class="headerlink" title="有固定基础设施无线局域网"></a>有固定基础设施无线局域网</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8c740fcb6aba08c975e2ba35f79dd3f3d359ca5ce83264b1ef55fc64def974a1.png"></p><h4 id="无固定基础设施无线局域网的自组织网络"><a href="#无固定基础设施无线局域网的自组织网络" class="headerlink" title="无固定基础设施无线局域网的自组织网络"></a>无固定基础设施无线局域网的自组织网络</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/80e7fa022348fdf0d7b7bc1889ba67332a991e7b7983d6f58932d9c1275a0c32.png"></p><h3 id="PPP协议和HDLC协议"><a href="#PPP协议和HDLC协议" class="headerlink" title="PPP协议和HDLC协议"></a>PPP协议和HDLC协议</h3><h4 id="主要应用于广域网"><a href="#主要应用于广域网" class="headerlink" title="主要应用于广域网"></a>主要应用于广域网</h4><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4849cc26f9d44c521558c67326d8672a4f1db7a6d6a5e82e94b386f230e8fd5a.png"></li><li>广域网（WAN，Wide Area Network)，通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个城市或国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。</li><li>广域网的通信子网主要使用分组交换技术。广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网，它将分布在不同地区的局域网或计算机系统互连起来，达到资源共享的目的。如因特网（Internet)是世界范围内最大的广域网。</li></ul><h4 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h4><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>点对点协议PPP(Point-to-Point Protocol）是目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都使用PPP协议。</li><li>只支持全双工链路</li></ul><h5 id="应满足的要求"><a href="#应满足的要求" class="headerlink" title="应满足的要求"></a>应满足的要求</h5><ul><li><p>简单</p><ul><li>对于链路层的帧,无需纠错,无需序号，无需流量控制。</li></ul></li><li><p>封装成帧</p><ul><li>帧定界符</li></ul></li><li><p>透明传输</p><ul><li>与帧定界符一样比特组合的数据应该如何处理:异步线路用字节填充，同步线路用比特填充。</li></ul></li><li><p>多种网络层协议</p><ul><li>封装的IP数据报可以采用多种协议。</li></ul></li><li><p>多种类型链路</p><ul><li>串行&#x2F;并行，同步&#x2F;异步，电&#x2F;光…</li></ul></li><li><p>错差检测</p><ul><li>错就丢弃</li></ul></li><li><p>检测连接状态</p><ul><li>链路是否正常工作</li></ul></li><li><p>最大传送单元</p><ul><li>数据部分最大长度MTU</li></ul></li><li><p>网络层地址协商</p><ul><li>知道通信双方的网络层地址</li></ul></li><li><p>数据压缩协商</p></li></ul><h5 id="不需要满足的要求"><a href="#不需要满足的要求" class="headerlink" title="不需要满足的要求"></a>不需要满足的要求</h5><ul><li>纠错</li><li>流量控制</li><li>序号</li><li>不支持多点线路</li></ul><h5 id="三个组成部分"><a href="#三个组成部分" class="headerlink" title="三个组成部分"></a>三个组成部分</h5><ul><li>1，一个将IP数据报封装到串行链路（同步串行&#x2F;异步串行）的方法。</li><li>⒉.链路控制协议LCP:建立并维护数据链路连接。【身份验证】</li><li>3.网络控制协议NCP:PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接。</li></ul><h5 id="PPP协议的状态图"><a href="#PPP协议的状态图" class="headerlink" title="PPP协议的状态图"></a>PPP协议的状态图</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/379dbecb5ff3ef10c729167255d8bf8a2b4de24cf3335f469b057f4262b74a4d.png"></li></ul><h5 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cb07348597a8892cbe689791120b6fd660747b8de7cca1a6c2f177727e8678b2.png"></li></ul><h4 id="HDLC协议"><a href="#HDLC协议" class="headerlink" title="HDLC协议"></a>HDLC协议</h4><blockquote><p>高级数据链路控制（High-Level Data Link Control或简称HDLC)，是一个在同步网上传输数据、面向比特的数据链路层协议，它是由国际标准化组织(ISO)根据IBM公司的SDLC(SynchronousData Link Control)协议扩展开发而成的.</p></blockquote><ul><li>数据报文可透明传输，用于实现透明传输的“O比特插入法”易于硬件实现</li><li>采用全双工通信</li><li>所有帧采用CRC检验，对信息帧进行顺序编号，可防止漏收或重份，传输可靠性高。</li></ul><h5 id="HDLC的站"><a href="#HDLC的站" class="headerlink" title="HDLC的站"></a>HDLC的站</h5><ul><li><p>主站</p><ul><li>主站的主要功能是发送命令（包括数据信息）帧、接收响应帧，并负责对整个链路的控制系统的初启、流程的控制、差错检测或恢复等。</li></ul></li><li><p>从站</p><ul><li>从站的主要功能是接收由主站发来的命令帧，向主站发送响应帧，并且配合主站参与差错恢复等链路控制。</li></ul></li><li><p>复合站</p><ul><li>复合站的主要功能是既能发送，又能接收命令帧和响应帧，并且负责整个链路的控制。</li></ul></li><li><p>三种数据操作方式：</p><ul><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ul></li><li><p>HDLC的帧格式</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2d0219712d07919e495cec62626f9b66c41e07ef63b4d276f26ec1ccb2ef4fcc.png"></li><li>1）信息帧(I）第1位为0，用来传输数据信息，或使用捎带技术对数据进行确认;</li><li>2）监督帧(S)10，用于流量控制和差错控制，执行对信息帧的确认、请求重发和请求暂停发送等功能</li><li>3)无编号帧(U) 11，用于提供对链路的建立、拆除等多种控制功能。</li></ul></li></ul><h5 id="PPP协议-amp-HDLC协议"><a href="#PPP协议-amp-HDLC协议" class="headerlink" title="PPP协议&amp;HDLC协议"></a>PPP协议&amp;HDLC协议</h5><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c445c66e37f1ee54f0e79950a2743792a412d7ebf81381e959875c3dbc780ee1.png"></p><ul><li>HDLC、PPP只支持全双工链路。</li><li>都可以实现透明传输。</li><li>都可以实现差错检测，但不纠正差错。</li></ul><h3 id="链路层的设备："><a href="#链路层的设备：" class="headerlink" title="链路层的设备："></a>链路层的设备：</h3><h4 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h4><ul><li>光纤</li><li>主干集线器</li></ul><h4 id="链路层扩展以太网"><a href="#链路层扩展以太网" class="headerlink" title="链路层扩展以太网"></a>链路层扩展以太网</h4><h5 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h5><blockquote><p>网桥根据MAC帧的目的地址对帧进行转发和过滤。当网桥收到一个帧时，并不向所有接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或者是把它丢弃（即过滤）。</p></blockquote><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/203da544921ce179f3c9c74b5795a45c2aead04d9e5f32a0d64c07afc79e3873.png"></p><ul><li>网段:一般指一个计算机网络中使用同一物理层设备(传输介质，中继器，集线器等）能够直接通讯的那一部分。</li></ul></li><li><p>优点：</p><ul><li>1，过滤通信量，增大吞吐量。</li><li>2，扩大了物理范围。</li><li>3，提高了可靠性。</li><li>4.可互连不同物理层、不同MAC子层和不同速率的以太网。</li></ul></li><li><p>分类：</p><ul><li><p>透明网桥：</p><ul><li>“透明”指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备―-自学习。</li></ul></li><li><p>源路由网桥：</p><ul><li><p>在发送帧时，把详细的最佳路由信息（路由最少&#x2F;时间最短）放在帧的首部中。</p></li><li><p>方法：</p><ul><li>源站以广播的方式向欲通信的目的站发送一个发现帧。</li></ul></li></ul></li></ul></li></ul><h5 id="多接口网桥–以太网交换机："><a href="#多接口网桥–以太网交换机：" class="headerlink" title="多接口网桥–以太网交换机："></a>多接口网桥–以太网交换机：</h5><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e30532ab2e4aa2b032fc678fbe0c5a0f53c5ed3ce8f6b5b1e82d2457ff3720c2.png"></p></li><li><p>交换方式</p><ul><li><p>直通式交换机</p><ul><li>查完目的地址（6B）就立刻转发。</li><li>延迟小，可靠性低，无法支持具有不同速率的端口的交换。</li></ul></li><li><p>存储转发式交换机</p><ul><li>将帧放入高速缓存，并检查否正确，正确则转发，错误则丢弃。</li><li>延迟大，可靠性高，可以支持具有不同速率的端口的交换。</li></ul></li></ul></li><li><p>冲突域和广播域</p><ul><li><p>冲突域</p><ul><li>在同一个冲突域中的每一个节点都能收到所有被发送的帧。简单的说就是同一时间内只能有一台设备发送信息的范围。</li></ul></li><li><p>广播域</p><ul><li>网络中能接收任一设备发出的广播帧的所有设备的集合。简单的说如果站点发出一个广播信号，所有能接收收到这个信号的设备范围称为一个广播域。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1c9456685458319668de3b1b106108279a18597823a3f6f79156afbba5c6cfab.png"></p></li></ul></li></ul><h2 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h2><blockquote><p>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。</p><p>网络传输单位是数据报。</p></blockquote><h3 id="功能：-2"><a href="#功能：-2" class="headerlink" title="功能："></a>功能：</h3><ul><li>路由选择与分组转发。【最佳路径】</li><li>异构网络互联。</li><li>拥塞控制。</li></ul><h3 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h3><h4 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h4><h5 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h5><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50283b8945be1ccbb5a450510e9f2151a6e295e2b0f35d3d53000556772a6b50.png"></p></li><li><p>电路交换的阶段：</p><ul><li><p>建立连接（呼叫&#x2F;电路建立）</p></li><li><p>通信</p><ul><li><p>特点：</p><ul><li>独占资源</li></ul></li></ul></li><li><p>释放连接（拆除电路）</p></li></ul></li><li><p>优点：</p><ul><li>通信时延小</li><li>有序传输</li><li>没有冲突</li><li>实时性强</li></ul></li><li><p>缺点：</p><ul><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>无差错控制能力</li></ul></li></ul><h5 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h5><ul><li><p>报文：</p><ul><li>源应用发送的信息整体。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4e5f7191d7ffb9c6b74541e4ab1ee830453642424d47f3b0c7ac2870895c70ea.png"></p></li><li><p>优点：</p><ul><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>多目标服务</li></ul></li><li><p>缺点：</p><ul><li>有存储转发时延</li><li>报文大小不定，需要网络节点有较大的缓存空间</li></ul></li></ul><h5 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h5><ul><li><p>数据报方式</p><ul><li><p>数据报方式为网络层提供无连接服务。</p><ul><li><p>无连接服务：</p><ul><li>不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同。</li></ul></li></ul></li><li><p>每个分组携带源和目的地址</p></li><li><p>路由器根据分组的目的地址转发分组：</p><ul><li>基于路由协议&#x2F;算法构建转发表；检索转发表；每个分组独立选路。</li></ul></li></ul></li><li><p>虚电路方式 </p><ul><li><p>虚电路方式为网络层提供连接服务。</p><ul><li><p>连接服务：</p><ul><li>首先为分组的传输确定传输路径（建立连接），然后沿该路径（连接）传输系列分组，系列分组传输路径相同，传输结束后拆除连接。</li></ul></li></ul></li><li><p>虚电路将数据报方式和电路交换方式结合，以发挥两者的优点。</p></li><li><p>虚电路：</p><ul><li>一条源主机到目的主机类似于电路的路径（逻辑连接），路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表，每一项纪录了一个打开的虚电路的信息。</li></ul></li><li><p>通信过程：</p><ul><li><p>建立连接（虚电路建立）</p><ul><li>每一个分组携带虚电路号，而非目的的地址。<br>源主机发送“呼叫请求”分组并收到“呼叫应答”分组后才算建立连接。</li></ul></li><li><p>数据传输</p><ul><li>全双工通信</li></ul></li><li><p>释放连接（虚电路释放）</p><ul><li>源主机发送“释放请求”分组以拆除虚电路。</li></ul></li></ul></li></ul></li><li><p>数据报&amp;虚电路</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/edcdd49b9bce26abd558365125fe73ed128054358806cad9c6631557c034ba8c.png"></li></ul></li><li><p>分组：</p><ul><li>把大的数据块分割成小的数据块。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3fdbce8b960e84d7aa3319de2181bacd95751e7c6961117f0e45abf1186a599e.png"></p></li><li><p>优点：</p><ul><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>相对于报文交换，存储管理更容易</li></ul></li><li><p>缺点：</p><ul><li>有存储转发时延</li><li>需要传输额外的信息量</li><li>乱序到目的主机时，要对分组排序重组</li></ul></li></ul><h5 id="三种数据交换方式比较："><a href="#三种数据交换方式比较：" class="headerlink" title="三种数据交换方式比较："></a>三种数据交换方式比较：</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/86f8b4ff5c02f37f4ab97682f0bb189c6cd9bc469829bc6a2b809f31cced8618.png"></li><li>报文交换 和分组交换都采用存储转发。</li><li>传送数据量大，且传送时间远大于呼叫时，选择电路交换。电路交换传输时延最小。</li><li>从信道利用率看，报文交换和分组交换优于电路交换，其中分组交换时延更小。</li></ul><h4 id="路由算法与路由协议"><a href="#路由算法与路由协议" class="headerlink" title="路由算法与路由协议"></a>路由算法与路由协议</h4><h5 id="最佳路由："><a href="#最佳路由：" class="headerlink" title="最佳路由："></a>最佳路由：</h5><blockquote><p>“最佳”只能是相对于某一种特定要求下得出的较为合理的选择而已。</p></blockquote><h5 id="路由算法的分类："><a href="#路由算法的分类：" class="headerlink" title="路由算法的分类："></a>路由算法的分类：</h5><ul><li><p>静态路由算法（非自适应路由算法）</p><ul><li><p>管理员手工配置路由信息。</p><ul><li><p>优点：</p><ul><li>简便、可靠，在符合稳定，拓扑变化不大的网络中运行效果很好，广泛用于高度安全性的军事网络和较小的商业网络。</li></ul></li><li><p>缺点：</p><ul><li>路由更新慢，不适用大型网络。</li></ul></li></ul></li></ul></li><li><p>动态路由算法（自适应的路由算法）</p><ul><li><p>路由器间彼此交换信息，按照路由算法优化出路由表项。</p><ul><li><p>优点：</p><ul><li>路由更新快，使用与大型网络，及时响应链路费用或网络拓扑变化。</li></ul></li><li><p>缺点：</p><ul><li>算法复杂，增加网络负担。</li></ul></li></ul></li><li><p>全局性：</p><ul><li>链路状态路由算法 （OSPF）</li><li>所有路由器掌握完整的网络拓扑和链路费用信息。</li></ul></li><li><p>分散性：</p><ul><li>距离向量算法（RIP）</li><li>路由器只掌握物理相连的邻居及链路费用。</li></ul></li></ul></li></ul><h5 id="分层次的路由选择协议："><a href="#分层次的路由选择协议：" class="headerlink" title="分层次的路由选择协议："></a>分层次的路由选择协议：</h5><ul><li><p>因特网规模很大</p></li><li><p>许多单位不想让外界知道自己的路由选择协议，但还想连入因特网</p><ul><li><p>自治系统AS:</p><ul><li>在单一的技术管理下的一组路由器，而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由，同时还使用一种AS之间的路由协议以确定在AS之间的路由。-</li><li>一个AS内的所有网络都属于一个行政单位来管辖，一个自治系统的所有路由器在本自治系统内都必须连通。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6fe022975984763ffe7ee9ba67fe67f8af12245e4d1ae5cb4ebd86d3d78989d5.png"></p></li></ul></li><li><p>路由选择协议：</p><ul><li><p>内部网关协议IGP【一个AS内使用的 】</p><ul><li>RIP</li><li>OSPF</li></ul></li><li><p>外部网关协议EGP【AS之间使用的】</p><ul><li>BGP</li></ul></li></ul></li></ul><h4 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h4><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f53964b85160ed53a469fe176eecb6a76bf7b43c7df9e9b82097efb61399bcce.png"></p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9f8502907b07dbfe6ed3b804cac88bd66f6557fec83346aef530b7c6a420c5f2.png" alt="首部格式："></p><ul><li><p>版本：</p><ul><li>IPv4 &#x2F; IPv6  ?</li></ul></li><li><p>首部长度：</p><ul><li>单位是4B，最小值为5。</li></ul></li><li><p>区分服务：</p><ul><li>指示期望获得哪种类型的服务。</li></ul></li><li><p>总长度：</p><ul><li>首部+数据 ，  单位是1B。</li></ul></li><li><p>生存时间（TTL）：</p><ul><li>IP分组的保质期。经过一个路由-1，变成0则丢弃。</li></ul></li><li><p>协议：</p><ul><li>数据部分的协议。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4e96da5d8bd85a3a3f9245724d8d9fa5237598cac8c5ef6653add72f4035f6d8.png"></li></ul></li><li><p>首部检验和：</p><ul><li>只检验首部。</li></ul></li><li><p>源IP地址和目的IP地址：</p><ul><li>32位。</li></ul></li><li><p>可选字段：</p><ul><li>0~40B，用来支持排错、测量以及安全等措施。</li></ul></li><li><p>填充：</p><ul><li>全0，把首部补成4B的整数倍。</li></ul></li><li><p>标识：</p><ul><li>同一数据报的分片使用同一标识。</li></ul></li><li><p>标志：</p><ul><li><p>只要2位有意义x _ _</p><ul><li><p>中间位DF(Don’t  Fragment):</p><ul><li>DF &#x3D; 1 ,禁止分片</li><li>DF &#x3D; 0 ，允许分片</li></ul></li><li><p>最低位MF(More  Fragment) ：</p><ul><li>MF &#x3D; 1 ,后面“还有分片”</li><li>MF &#x3D; 0， 代表最后一片&#x2F;没分片</li></ul></li></ul></li></ul></li><li><p>片偏移：</p><ul><li>指出较长分组分片后，某片在原分组中的相对位置。以8B为单位。</li><li>除了最后一个分片，每个分片长度一定是8B的整数倍。</li></ul></li></ul></li></ul><h4 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h4><ul><li><p>最大传送单元MTU：</p><ul><li>链路层数据帧可封装数据的上限。</li><li>以太网的MTU是1500字节。</li></ul></li></ul><h4 id="ip地址："><a href="#ip地址：" class="headerlink" title="ip地址："></a>ip地址：</h4><ul><li><p>全世界唯一的32位&#x2F;4字节标识符，标识路由器主机的接口。</p></li><li><p>ip地址::{&lt;网络号&gt;,&lt;主机号&gt;}</p></li><li><p>IP编址的历史阶段：</p><ul><li><p>分类的IP地址</p><ul><li><p>弱点：</p><ul><li>IP地址空间的利用率有时很低。</li><li>两级IP地址不够灵活。</li></ul></li></ul></li><li><p>子网的划分</p></li><li><p>构成超网（无分类编址方法CIDR）</p><ul><li><p>无分类域间路由选择CIDR</p></li><li><p>特点：</p><ul><li><p>消除了传统的A类，B类和C类地址以及划分子网的概念。</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3268457294ae7f4f18789ebd882a87b40f7ddefdb1c153dab1fa2a2adee61039.png"></li><li>CIDR记法：IP地址后加上 “ &#x2F; ”，然后写上网络前缀（可以任意长度）的位数。</li></ul></li><li><p>融合子网地址与子网掩码，方便子网划分。</p><ul><li>CIDR把网络前缀都相同的连续的IP地址组成一个“CIDR地址块”。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/48c3ee8f45ceba5f6ec45f8733bc3bcbdc584ae1a6f282406df258023afb2b4d.png"></li></ul></li></ul></li><li><p>将多个子网聚合成一个较大的子网，叫做构成超网，或路由聚合。</p><ul><li>方法：将网络前缀缩短。</li></ul></li><li><p>使用CIDR时，查找路由表可能得到几个匹配结果，应选择具有最长网络前缀的路由。前缀越长，地址块越小，路由越具体。</p></li></ul></li></ul></li></ul><h3 id="网络地址转换NAT-Network-Address-Translation"><a href="#网络地址转换NAT-Network-Address-Translation" class="headerlink" title="网络地址转换NAT(Network   Address   Translation)"></a>网络地址转换NAT(Network   Address   Translation)</h3><blockquote><p>在专用网连接到因特网的路由器上安装NAT软件,安装NAT软件的路由器叫NAT路由器，它至少有一个有效的外部全球IP地址。</p></blockquote><h4 id="全球IP地址：173-38-1-5"><a href="#全球IP地址：173-38-1-5" class="headerlink" title="全球IP地址：173.38.1.5"></a>全球IP地址：173.38.1.5</h4><h4 id="NAT转换表"><a href="#NAT转换表" class="headerlink" title="NAT转换表"></a>NAT转换表</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04acef36f70ba15d0fe35803638e812f10732e08ebba8ba3896e99e1bd26c996.png"></p><h5 id="路由表中："><a href="#路由表中：" class="headerlink" title="路由表中："></a>路由表中：</h5><ul><li>目的网络地址</li><li>目的网络子网掩码</li><li>下一跳地址</li></ul><h4 id="路由器转发分组的算法："><a href="#路由器转发分组的算法：" class="headerlink" title="路由器转发分组的算法："></a>路由器转发分组的算法：</h4><ul><li>提取目的的IP地址</li><li>是否直接交付</li><li>特定主机路由</li><li>检测路由表中有无路径</li><li>默认路由0.0.0.0</li><li>丢弃，报告转发分组出错</li></ul><h3 id="ARP协议："><a href="#ARP协议：" class="headerlink" title="ARP协议："></a>ARP协议：</h3><p>由于在实际网络的链路上传送数据帧时，最终必须使用MAC地址。</p><h4 id="ARP高速缓存（完成主机或路由器IP地址与MAC地址的映射）"><a href="#ARP高速缓存（完成主机或路由器IP地址与MAC地址的映射）" class="headerlink" title="ARP高速缓存（完成主机或路由器IP地址与MAC地址的映射）"></a>ARP高速缓存（完成主机或路由器IP地址与MAC地址的映射）</h4><ul><li>解决下一跳走哪的问题。</li></ul><h4 id="ARP协议使用过程："><a href="#ARP协议使用过程：" class="headerlink" title="ARP协议使用过程："></a>ARP协议使用过程：</h4><ul><li>检查ARP高速缓存，有对应表项则写入MAC帧，没有则用目的MAC地址为FF-FF-FF-FF-FF-FF-FF的帧封装并广播ARP请求分组，同一局域网中所有主机都能收到该请求，目的主机收到请求后就会向源主机单播一个ARP响应分组，源主机收到后将此映射写入ARP缓存（10 - 20min更新一次。）</li></ul><h4 id="ARP协议4种典型情况："><a href="#ARP协议4种典型情况：" class="headerlink" title="ARP协议4种典型情况："></a>ARP协议4种典型情况：</h4><ul><li>主机A发给本网络上的主机B：用ARP找到主机B的硬件地址。</li><li>主机A发给另一网络上的主机B：用ARP找到本网络上一个路由器（网关）的硬件地址。</li><li>路由器发给本网络的主机A：用ARP找到主机A的硬件地址。</li><li>路由器发给另一个网络的主机B:用ARP找到本网络上的一个路由器的硬件地址。</li></ul><p><strong>ARP协议自动触发。</strong></p><h3 id="DHCP协议："><a href="#DHCP协议：" class="headerlink" title="DHCP协议："></a>DHCP协议：</h3><blockquote><p>动态主机配置协议DHCP是应用层的协议，使用客户&#x2F;服务器方式，客户端和服务端通过广播方式进行交互，基于UDP。</p><p>DHCP提供即插即用联网的机制，主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称与IP地址，允许地址重用，支持移动用户加入网络，支持在用地址续租。</p></blockquote><h4 id="主机如何获得IP地址："><a href="#主机如何获得IP地址：" class="headerlink" title="主机如何获得IP地址："></a>主机如何获得IP地址：</h4><h5 id="静态配置"><a href="#静态配置" class="headerlink" title="静态配置"></a>静态配置</h5><ul><li>IP地址</li><li>子网掩码</li><li>默认网关</li></ul><h5 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a510a025f3a28db09904e464cef1c2bee3d22de3d1381f0d90a7789177857ace.png"></li></ul><h5 id="工作流程："><a href="#工作流程：" class="headerlink" title="工作流程："></a>工作流程：</h5><ul><li><p>主机广播DHCP发现报文</p><ul><li>试图找到网络中的服务器，服务器获得一个IP地址。</li></ul></li><li><p>DHCP服务器广播DHCP提供报文</p><ul><li>服务器拟分配给主机一个IP地址及相关配置，先到先得。</li></ul></li><li><p>主机广播DHCP请求报文</p><ul><li>主机向服务器请求提供IP地址。</li></ul></li><li><p>DHCP服务器广播DHCP确认报文</p><ul><li>正式将IP地址分配给主机。</li></ul></li></ul><h3 id="ICMP协议："><a href="#ICMP协议：" class="headerlink" title="ICMP协议："></a>ICMP协议：</h3><blockquote><p>网际控制报文协议ICMP</p></blockquote><h4 id="ICMP协议支持主机或路由器："><a href="#ICMP协议支持主机或路由器：" class="headerlink" title="ICMP协议支持主机或路由器："></a>ICMP协议支持主机或路由器：</h4><h5 id="差错（或异常）报告"><a href="#差错（或异常）报告" class="headerlink" title="差错（或异常）报告"></a>差错（或异常）报告</h5><p>发送特定ICMP报文</p><h5 id="网络探询"><a href="#网络探询" class="headerlink" title="网络探询"></a>网络探询</h5><h4 id="ICMP差错报文"><a href="#ICMP差错报文" class="headerlink" title="ICMP差错报文"></a>ICMP差错报文</h4><h5 id="五种情况："><a href="#五种情况：" class="headerlink" title="五种情况："></a>五种情况：</h5><ul><li><p>终点不可达：</p><ul><li>当路由器或主机不能交付数据报时就向源点发送终点不可达报文。【无法交付】</li></ul></li><li><p>源点抑制：</p><ul><li>当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送数据速率放慢。【拥塞丢数据】</li></ul></li><li><p>时间超过：</p><ul><li>当路由器收到生存时间TTL &#x3D; 0的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。</li><li>当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文。</li></ul></li><li><p>参数问题：</p><ul><li>当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。</li></ul></li><li><p>改变路由（重定向）：</p><ul><li>路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）。</li></ul></li></ul><h5 id="ICMP差错报告报文数据字段："><a href="#ICMP差错报告报文数据字段：" class="headerlink" title="ICMP差错报告报文数据字段："></a>ICMP差错报告报文数据字段：</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e9e4bcd725b0aba69e8868e513a20932556e08f553e40cd2c0ea77d00ab58aa0.png"></li></ul><h5 id="不应发送ICMP差错报文的情况："><a href="#不应发送ICMP差错报文的情况：" class="headerlink" title="不应发送ICMP差错报文的情况："></a>不应发送ICMP差错报文的情况：</h5><ul><li>对ICMP差错报告报文不再发送ICMP差错报告报文。</li><li>对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文。</li><li>对具有组播地址的数据报都不发送ICMP差错报告报文。</li><li>对具有特殊地址(如127.0.0.0或0.0.0.0 )的数据报不发送ICMP差错报告报文。</li></ul><h4 id="ICMP询问报文"><a href="#ICMP询问报文" class="headerlink" title="ICMP询问报文"></a>ICMP询问报文</h4><h5 id="回送请求和回答报文"><a href="#回送请求和回答报文" class="headerlink" title="回送请求和回答报文"></a>回送请求和回答报文</h5><p>主机或路由器向特定目的主机发出的询问，收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。测试目的站是否可达以及了解其相关状态。</p><h5 id="时间戳请求和回答报文"><a href="#时间戳请求和回答报文" class="headerlink" title="时间戳请求和回答报文"></a>时间戳请求和回答报文</h5><p>请某个主机或路由器回答当前的日期和时间。用来进行时钟同步和测量时间。</p><h5 id="掩码地址请求和回答报文"><a href="#掩码地址请求和回答报文" class="headerlink" title="掩码地址请求和回答报文"></a>掩码地址请求和回答报文</h5><h5 id="路由器询问和通告报文"><a href="#路由器询问和通告报文" class="headerlink" title="路由器询问和通告报文"></a>路由器询问和通告报文</h5><h4 id="ICMP的应用"><a href="#ICMP的应用" class="headerlink" title="ICMP的应用"></a>ICMP的应用</h4><h5 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h5><ul><li>测试两个主机之间的连通性，使用了ICMP回送请求和回答报文。</li></ul><h5 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h5><ul><li>跟踪一个分组从源点到终点的路径，使用了ICMP时间超过差错报告报文。</li></ul><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6:"></a>IPv6:</h3><h4 id="IPv6数据报格式："><a href="#IPv6数据报格式：" class="headerlink" title="IPv6数据报格式："></a>IPv6数据报格式：</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ce027d72e7ed7c7a2d26226964f1ab1c89e19eb93f2da94a9819d225e2b080b1.png"></p><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1ad0582d8115a37693052d4a823cd4f8887859469e09d00455c66137593ceb78.png"></p><ul><li><p>版本：</p><ul><li>指明协议版本，总是6</li></ul></li><li><p>优先级：</p><ul><li>区分数据报的类别和优先级</li></ul></li><li><p>流标签：</p><ul><li>“流”是互联网络上从特定源点到特定终点的一系列数据报。所有属于同一个流的数据报都具有同样的流标签。</li></ul></li><li><p>下一个首部：</p><ul><li>标识下一个扩展首部或上层协议首部。</li></ul></li><li><p>跳数限制：</p><ul><li>相当于IPv4的TTL。</li></ul></li></ul><h4 id="IPv6和IPv4的不同："><a href="#IPv6和IPv4的不同：" class="headerlink" title="IPv6和IPv4的不同："></a>IPv6和IPv4的不同：</h4><ul><li>IPv6将地址从32位（4B）扩大到128位（16B），更大的地址空间。</li><li>IPv6将IPv4的校验和字段彻底移除，以减少每跳的处理时间。</li><li>IPv6将IPv4的可选字段移出首部，变成了扩展首部，称为灵活的首部格式，路由器通常不对扩展首部进行检查，大大提高了路由器的处理效率。</li><li>IPv6支持即插即用（即自动配置），不需要DHCP协议。</li><li>IPv6首部长度必须是8B的整数倍，IPv4首部是4B的整数倍。</li><li>IPv6只能在主机处分片，IPv4可以在路由器和主机处分片。</li><li>ICMPv6：附加报文类型“分组过大”。</li><li>IPv6支持资源的预分配，支持实时视像等要求，保证一定的带宽和时延的应用。</li><li>IPv6取消了协议字段，改成下一个首部字段。</li><li>IPv6取消了总长度字段，改用有效载荷长度字段。</li><li>IPv6取消了服务类型字段。</li></ul><h4 id="IP地址表示形式："><a href="#IP地址表示形式：" class="headerlink" title="IP地址表示形式："></a>IP地址表示形式：</h4><ul><li><p>一般形式【冒号十六进制记法】：</p><ul><li>4BF5:AA12:0216:FEBC:BA5F:039A:BE9A:2170</li></ul></li><li><p>压缩形式：</p><ul><li><p>4BF5:0000:0000:0000:BA5F:039A:000A:2176</p><ul><li>4BF5:0;0:0:BA5F:39A:A:2176</li></ul></li><li><p>零压缩：一连串连续的0可以被一对冒号取代。</p><ul><li><p>FF05:0:0:0:0:0:0:B3</p><ul><li>FF05::B3</li></ul></li><li><p>双冒号表示法在一个地址中仅可出现一次。</p></li></ul></li></ul></li></ul><h4 id="IPv6基本地址类型："><a href="#IPv6基本地址类型：" class="headerlink" title="IPv6基本地址类型："></a>IPv6基本地址类型：</h4><ul><li><p>单播：</p><ul><li>一对一通信</li><li>可做源地址+目的地址</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2480e1d09c126df3f0c0ce61aa60bbb4768f81057f3ff70ee2c7546c08b94dbd.png"></li></ul></li><li><p>多播：</p><ul><li>一对多通信</li><li>可做目的地址</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/767587daa0ea933dc6b70abbf145aa199355561c5a191d153836ec59a3b9348f.png"></li></ul></li><li><p>任播：</p><ul><li>一对多中的一个通信</li><li>可做目的地址</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/962c5e4e9458112acd6d998e6bff8d5943cb374086bf3301666b0d07230dc8da.png"></li></ul></li></ul><h4 id="IPv6向IPv4过渡的策略："><a href="#IPv6向IPv4过渡的策略：" class="headerlink" title="IPv6向IPv4过渡的策略："></a>IPv6向IPv4过渡的策略：</h4><h5 id="双栈协议："><a href="#双栈协议：" class="headerlink" title="双栈协议："></a>双栈协议：</h5><ul><li>双栈协议技术就是指在一台设备上同时启用了IPv4协议栈和IPv6协议栈。这样的话，这台设备既能和IPv4网络通信，又能和IPv6网络通信。</li><li>如果这台设备是一个路由器，那么这台路由器的不同接口上，分别配置了IPv4地址和IPv6地址，并很可能分别连接了IPv4网络和IPv6网络。</li><li>如果这台设备是一个计算机，那么它将同时拥有IPv4地址和IPv6地址，并具备同时处理这两个协议地址的功能。</li></ul><h5 id="隧道技术："><a href="#隧道技术：" class="headerlink" title="隧道技术："></a>隧道技术：</h5><ul><li>通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据（或负载）可以是不同协议的数据帧或包。隧道协议将其他协议的数据帧或包重新封装然后通过隧道发送。</li></ul><h3 id="RIP协议及距离向量算法："><a href="#RIP协议及距离向量算法：" class="headerlink" title="RIP协议及距离向量算法："></a>RIP协议及距离向量算法：</h3><h4 id="RIP协议："><a href="#RIP协议：" class="headerlink" title="RIP协议："></a>RIP协议：</h4><blockquote><ul><li>RIP是一种分布式的基于距离向量的路由选择协议，是因特网的协议标准，最大的优点是简单。</li><li>RIP协议要求网络中的每一个路由器都维护从它自己到其他每一个目的网络的唯一最佳距离记录。（即一组距离）</li><li>RIP协议只适用于小互联网。</li></ul></blockquote><h5 id="RIP协议和谁交换？多久交换一次？交换什么？"><a href="#RIP协议和谁交换？多久交换一次？交换什么？" class="headerlink" title="RIP协议和谁交换？多久交换一次？交换什么？"></a>RIP协议和谁交换？多久交换一次？交换什么？</h5><ul><li>仅和相邻路由器交换信息。</li><li>路由器交换的信息是自己的路由表。</li><li>每30秒交换一次路由信息，然后路由器根据新信息更新路由表。若超过180s没收到邻居路由器的通告，则判定邻居没了，并更新自己路由表。</li><li>路由器刚开始工作时，只知道直连连接的网络的距离（距离为1），接着每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。</li><li>经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即‘收敛“。</li></ul><h5 id="RIP协议的报文格式："><a href="#RIP协议的报文格式：" class="headerlink" title="RIP协议的报文格式："></a>RIP协议的报文格式：</h5><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/474e3cc2c84fb36a1402cc0857f898b01427f5a5add651d8f96e95f8d5da5268.png"></p><ul><li>RIP是应用层协议，使用UDP传送数据。</li><li>一个RIP报文最多可包括25个路由，如超过，必须再用一个RIP报文传送。</li></ul></li></ul><h5 id="RIP的特点："><a href="#RIP的特点：" class="headerlink" title="RIP的特点："></a>RIP的特点：</h5><blockquote><p>当网络出现故障时，要经过比较长的时间（例如数分钟）才能将此信息传送到所有的路由器，“慢收敛”。【好消息传的快，坏消息传的慢】</p></blockquote><h4 id="距离："><a href="#距离：" class="headerlink" title="距离："></a>距离：</h4><blockquote><p>通常为“跳数”，即从源端口到目的端口所经过的路由器个数，经过一个路由器跳数+1。特别的，从一路由器到直接连接的网络距离为1.RIP允许一条路由最多只能包含15个路由器，因此距离为16表示网络不可达。</p></blockquote><h4 id="距离向量算法："><a href="#距离向量算法：" class="headerlink" title="距离向量算法："></a>距离向量算法：</h4><h5 id="修改相邻路由器发来的RIP报文中的所有表项。"><a href="#修改相邻路由器发来的RIP报文中的所有表项。" class="headerlink" title="修改相邻路由器发来的RIP报文中的所有表项。"></a>修改相邻路由器发来的RIP报文中的所有表项。</h5><ul><li>对地址为x的相邻路由器发来的RIP报文，修改此报文中的所有项目：把“下一跳”字段中的地址改为X，并把所有的“距离”字段+1。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9ac20df53fc1583fc3c6505bf4c123a59430aa9808e1475551e148a6c7e7773f.png"></li></ul><h5 id="对修改后的RIP报文中的每一个项目，进行以下步骤："><a href="#对修改后的RIP报文中的每一个项目，进行以下步骤：" class="headerlink" title="对修改后的RIP报文中的每一个项目，进行以下步骤："></a>对修改后的RIP报文中的每一个项目，进行以下步骤：</h5><ul><li><p>R1路由表中若没有Net3，则把该项目填入R1路由表</p></li><li><p>R1路由表中若有Net3，则查看下一跳路由器地址：</p><ul><li>若下一跳是X，则用收到的项目替换源路由表中的项目；</li><li>若下一跳不是X，原来距离比从X走的距离远则更新，否则不作处理。</li></ul></li></ul><h5 id="若180s还没收到相邻路由器X的更新路由表，则把X记为不可达的路由器，即把距离设置为16"><a href="#若180s还没收到相邻路由器X的更新路由表，则把X记为不可达的路由器，即把距离设置为16" class="headerlink" title="若180s还没收到相邻路由器X的更新路由表，则把X记为不可达的路由器，即把距离设置为16."></a>若180s还没收到相邻路由器X的更新路由表，则把X记为不可达的路由器，即把距离设置为16.</h5><h5 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h5><h3 id="OSPF协议及链路状态算法："><a href="#OSPF协议及链路状态算法：" class="headerlink" title="OSPF协议及链路状态算法："></a>OSPF协议及链路状态算法：</h3><blockquote><ul><li>开放最短路径优先OSPF协议：“开放”标明OSPF不是受某一家厂商控制，而是公开发表的；“最短路径优先”是因为使用了Dijkstra提出的最短路径算法SPF。</li><li>OSPF最主要的特征就是使用分布式的链路状态协议。</li></ul></blockquote><h4 id="OSPF的特点："><a href="#OSPF的特点：" class="headerlink" title="OSPF的特点："></a>OSPF的特点：</h4><ul><li><p>使用洪泛法向自治系统内所有路由器发送信息，即路由器通过输出端口向所有相邻的路由器发送信息，而每一个相邻路由器又再次将此信息发往其所有的相邻路由器。【广播】</p><ul><li>最终整个区域内所有的路由器都得到了这个信息的一个副本。</li></ul></li><li><p>发送的信息就是与本路由器相邻的所有路由器的链路状态（本路由器和哪些路由器相邻，以及该链路的度量&#x2F;代价 –费用、距离、时延、带宽等）。</p></li><li><p>只有当链路状态发生变化时，路由器才向所有路由器洪泛发送此信息。</p></li><li><p>最后，所有路由器都能建立一个链路状态数据库，即全网拓扑图。</p></li></ul><h4 id="OSPR的区域："><a href="#OSPR的区域：" class="headerlink" title="OSPR的区域："></a>OSPR的区域：</h4><ul><li>为了使OSPF能够用于规模很大的网络，OSPF将一个自治系统再划分为若干个更小的范围，叫做区域。</li><li>每一个区域都有一个32位的区域标识符（用点分十进制表示）。</li><li>区域也不能太大，在一个区域内的路由器最好不超过200个。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/b40a833c2800a51027519519865f987d800b2b58cd724e5d2415003352a24417.png"></li></ul><h4 id="OSPF分组："><a href="#OSPF分组：" class="headerlink" title="OSPF分组："></a>OSPF分组：</h4><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6ba4d05e477d88b4e883f6de911cef72848c6d3ccdd854393069a4604d9e0b1a.png"></p><ul><li>OSPF直接用IP数据报传送。</li><li>网络层协议。</li></ul></li></ul><h4 id="OSPF的其他特点："><a href="#OSPF的其他特点：" class="headerlink" title="OSPF的其他特点："></a>OSPF的其他特点：</h4><ul><li>每隔30min，要刷新一次数据库中的链路状态。</li><li>由于一个路由器的链路状态只涉及到与相邻路由器的联通状态，因而与整个互联网的规模并无直接关系。因此当互联网规模很大时，OSPF协议要比距离向量协议RIP好得多。</li><li>OSPF不存在坏消息传的慢的问题，它的收敛速度很快。</li></ul><h4 id="链路状态路由算法："><a href="#链路状态路由算法：" class="headerlink" title="链路状态路由算法："></a>链路状态路由算法：</h4><ul><li><p>每个路由器发现它的邻居结点【HELLO问候分组】，并了解邻居节点的网络地址。</p></li><li><p>设置到它的每个邻居的成本度量metric。</p></li><li><p>构造【DD数据库描述分组】，向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息。</p></li><li><p>如果DD分组中的摘要自己都有，则邻站不做处理；如果有没有的或者是更新的，则发送【LSR链路状态请求分组】请求自己没有的和比自己更新的信息。</p></li><li><p>收到邻站的LSR分组后，发送【LSU链路状态更新分组】进行更新。</p></li><li><p>更新完毕后，邻站返回一个【LSAck链路状态确认分组】进行确认。</p></li><li><p>只要一个路由器的链路状态发生变化：</p><ul><li>泛洪发送【LSU链路状态更新分组】进行更新。</li><li>更新完毕后，其他站返回一个【LSAck链路状态确认分组】进行确认。</li><li>使用Dijkstra根据自己的链路状态数据库构造到其他节点间的最短路径。</li></ul></li></ul><h3 id="BGP协议："><a href="#BGP协议：" class="headerlink" title="BGP协议："></a>BGP协议：</h3><blockquote><ul><li>与其他AS的邻站BGP发言人交换信息。</li><li>交换的网络可达性的信息，即要到达某个网络所要经过的一系列的AS。</li><li>发生变化时更新有变化的部分。</li></ul></blockquote><h4 id="BGP协议交换信息的过程："><a href="#BGP协议交换信息的过程：" class="headerlink" title="BGP协议交换信息的过程："></a>BGP协议交换信息的过程：</h4><ul><li>BGP所交换的网络可达性的信息就是要到达某个网络所要经过的一系列AS。当BGP发言人互相交换了网络可达性的信息后，各BGP发言人就根据所采用的的策略从收到的路由信息中找出到达各AS的较好路由。</li><li>一个BGP发言人与其他自治系统中的BGP发言人要交换路由信息，就要先建立TCP连接，即通过TCP传送，然后在此连接上交换BGP报文以建立BGP会话（session），利用BGP会话交换路由信息。</li></ul><h4 id="BGP协议报文格式："><a href="#BGP协议报文格式：" class="headerlink" title="BGP协议报文格式："></a>BGP协议报文格式：</h4><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/60b6639d4e631285c1aabf1111b2d8a51a974d7aa34ac7d1c8d124a20b72e522.png"></p><ul><li>BGP是应用层协议，借助TCP传送。</li></ul></li></ul><h4 id="BGP协议特点："><a href="#BGP协议特点：" class="headerlink" title="BGP协议特点："></a>BGP协议特点：</h4><ul><li>BGP支持CIDR，因此BGP的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</li><li>在BGP刚刚运行时，BGP的邻站是交换整个的BGP路由表。但以后只需要在发生变化时更新有变化的部分。这样做对节省网络带宽和减少路由器的处理开销都有好处。</li></ul><h4 id="BGP-4的四种报文："><a href="#BGP-4的四种报文：" class="headerlink" title="BGP-4的四种报文："></a>BGP-4的四种报文：</h4><h5 id="OPEN-打开-报文："><a href="#OPEN-打开-报文：" class="headerlink" title="OPEN(打开)报文："></a>OPEN(打开)报文：</h5><ul><li>用来与相邻的另一个BGP发言人建立关系，并认证发送方。</li></ul><h5 id="UPDATE-更新-报文；"><a href="#UPDATE-更新-报文；" class="headerlink" title="UPDATE(更新)报文；"></a>UPDATE(更新)报文；</h5><ul><li>通告新路径或撤销原路径。</li></ul><h5 id="KEEPALIVE-保活-报文："><a href="#KEEPALIVE-保活-报文：" class="headerlink" title="KEEPALIVE(保活)报文："></a>KEEPALIVE(保活)报文：</h5><ul><li>在无UPDATE时，周期性证实邻站的连通性；也作为OPEN的确认。</li></ul><h5 id="NOTIFICATION-通知-报文："><a href="#NOTIFICATION-通知-报文：" class="headerlink" title="NOTIFICATION(通知)报文："></a>NOTIFICATION(通知)报文：</h5><ul><li>报告先前报文的差错；也被用于关闭连接。</li></ul><h3 id="三种路由协议比较："><a href="#三种路由协议比较：" class="headerlink" title="三种路由协议比较："></a>三种路由协议比较：</h3><ul><li><p>RIP是一种分布式的基于距离向量的内部网关路由选择协议，通过广播UDP报文来交换路由信息。</p><ul><li>RU</li></ul></li><li><p>OSPF是一个内部网关协议，要交换的信息量较大，应使报文的长度尽量短，所以不使用传输层协议（如UDP或TCP），而是直接采用IP。</p><ul><li>OI</li></ul></li><li><p>BGP是一个外部网关协议，在不同的自治系统之间交换路由信息，由于网络环境复杂，需要保证可靠传输，所以采用TCP。</p><ul><li>BT</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3cf377cfceb906244b7cd18ebf9506676d38635ac21fc36fec15e744101a2861.png"></p></li></ul><h3 id="IP组播："><a href="#IP组播：" class="headerlink" title="IP组播："></a>IP组播：</h3><h4 id="IP数据报的三种传输方式："><a href="#IP数据报的三种传输方式：" class="headerlink" title="IP数据报的三种传输方式："></a>IP数据报的三种传输方式：</h4><h5 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h5><ul><li>单播用于发送数据包到单个目的地，且每发送一份单播报文都使用一个单播IP地址作为目的地址。是一种点对点传输方式。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bf24e28c2be4447323fbf5bd5c4ba176e8992c74249078f4677a08b80847783a.png"></li></ul><h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><ul><li>广播式指发送数据包到同一广播域或子网内的所有设备的一种数据传输方式，是一种点对多点传输方式。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bad1e3862fed7920499bef9f4f1161c63c64f4a2466ed50f625da0a1b5e1c67b.png"></li></ul><h5 id="组播（多播）"><a href="#组播（多播）" class="headerlink" title="组播（多播）"></a>组播（多播）</h5><ul><li><p>当网络中的某些用户需要特定数据时，组播数据发送者仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点才开始复制和分发，是一种点对多点传输方式。</p></li><li><p>组播提高了数据传输效率，减少了主干网出现拥塞的可能性。组播组中的主机可以是在同一个物理网络，也可以来自不同的物理网络（如果有组播路由器的支持。）</p><ul><li>运行组播协议的路由器。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/812895c2ad0e0c082af55fb4d84808d34e3d2b0261f6a92cfd7a3d8b72177e57.png"></p></li></ul><h4 id="IP组播地址："><a href="#IP组播地址：" class="headerlink" title="IP组播地址："></a>IP组播地址：</h4><ul><li><p>IP组播地址让源设备能够将分组发送给一组设备。属于多播组的设备将被分配一个组播组IP地址（一群共同需求主机的相同标识）。</p></li><li><p>组播地址范围为224.0.0.0 ~239.255.255.255（D类地址），一个D类地址表示一个组播组。只能用作分组的目标地址。源地址总是为单播地址。</p></li><li><p>特点：</p><ul><li>组播数据报也是“尽最大努力交付”，不提供可靠交付，应用于UDP。</li><li>对组播数据报不产生ICMP差错报文。</li><li>并非所有D类地址都可以作为组播地址。</li></ul></li></ul><h4 id="硬件组播："><a href="#硬件组播：" class="headerlink" title="硬件组播："></a>硬件组播：</h4><ul><li><p>同单播地址一样，组播IP地址也需要相应的组播MAC地址在本地网络中实际传送帧。组播MAC地址以十六进制值01-00-5E打头，余下的6个十六进制位是根据IP组播组地址的最后23位转换得到的。</p></li><li><p>TCP&#x2F;IP协议使用的以太网多播地址的范围是：</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ee988f1929c5133b0fe4207d4c6c4205e9cf383ff05989d35bf6fee0c85a0a48.png"></li><li>收到多播数据报的主机，还要在IP层利用软件进行过滤，把不是本主机要接收的数据报丢弃。</li></ul></li></ul><h4 id="网际组管理IGMP协议："><a href="#网际组管理IGMP协议：" class="headerlink" title="网际组管理IGMP协议："></a>网际组管理IGMP协议：</h4><ul><li><p>IGMP协议让路由器知道本局域网上是否有主机(的进程)参加或退出了某个组播组。</p></li><li><p>ICMP和IGMP都使用IP数据报传递报文。</p></li><li><p>IGMP工作的两个阶段：</p><ul><li><p>ROUND  1:</p><ul><li>某主机要加入组播组时，该主机向组播组的组播地址发送一个lGMP报文，声明自己要称为该组的成员。</li><li>本地组播路由器收到IGMP报文后，要利用组播路由选择协议把这组成员关系发给因特网上的其他组播路由器。</li></ul></li><li><p>ROUND  2:</p><ul><li>本地组播路由器周期性探询本地局域网上的主机，以便知道这些主机是否还是组播组的成员。</li><li>只要有一个主机对某个组响应，那么组播路由器就认为这个组是活跃的;如果经过几次探询后没有一个主机响应，组播路由器就认为本网络上的没有此组播组的主机，因此就不再把这组的成员关系发给其他的组播路由器。</li></ul></li></ul></li></ul><h4 id="组播路由选择协议："><a href="#组播路由选择协议：" class="headerlink" title="组播路由选择协议："></a>组播路由选择协议：</h4><ul><li><p>组播路由协议目的是找出以源主机为根节点的组播转发树。</p></li><li><p>构造树可以避免在路由器之间兜圈子。</p></li><li><p>对不同的多播组对应于不同的多播转发树;同一个多播组，对不同的源点也会有不同的多播转发树。</p></li><li><p>组播路由选择协议常使用的三种算法:</p><ul><li>基于链路状态的路由选绎</li><li>基于距离-向量的路由选择</li><li>协议无关的组播(稀疏&#x2F;密集)</li></ul></li></ul><h3 id="移动IP："><a href="#移动IP：" class="headerlink" title="移动IP："></a>移动IP：</h3><blockquote><p>移动Ip技术是移动结点(计算机&#x2F;服务器等)以固定的网络IP地址，实现跨越不同网段的漫游功能，并保证了基于网络IP的网络权限在漫游过程中不发生任何改变。</p></blockquote><h4 id="移动IP相关术语："><a href="#移动IP相关术语：" class="headerlink" title="移动IP相关术语："></a>移动IP相关术语：</h4><h5 id="移动结点："><a href="#移动结点：" class="headerlink" title="移动结点："></a>移动结点：</h5><ul><li>具有永久IP地址的移动设备。</li></ul><h5 id="归属代理（本地代理）"><a href="#归属代理（本地代理）" class="headerlink" title="归属代理（本地代理）"></a>归属代理（本地代理）</h5><ul><li>一个移动结点拥有的就“居所”称为归属网络，在归属网络中代表移动节点执行移动管理功能的实体叫做归属代理。</li></ul><h5 id="外部代理（外地代理）"><a href="#外部代理（外地代理）" class="headerlink" title="外部代理（外地代理）"></a>外部代理（外地代理）</h5><ul><li>在外部网络中帮助移动节点完成移动管理功能的实体称为外部代理。</li></ul><h5 id="永久地址（归属地址-x2F-主地址）"><a href="#永久地址（归属地址-x2F-主地址）" class="headerlink" title="永久地址（归属地址&#x2F;主地址）"></a>永久地址（归属地址&#x2F;主地址）</h5><ul><li>移动站点在归属网络中的原始地址。</li></ul><h5 id="转交地址（辅地址）"><a href="#转交地址（辅地址）" class="headerlink" title="转交地址（辅地址）"></a>转交地址（辅地址）</h5><ul><li>移动站点在外部网络中使用的临时地址。</li></ul><h4 id="移动IP通信过程："><a href="#移动IP通信过程：" class="headerlink" title="移动IP通信过程："></a>移动IP通信过程：</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3e5c3288329c0527b0caa59d4165c7c2a9b192c40b0dc49de729d236b839142d.png"></p><h5 id="A刚进入外部网络："><a href="#A刚进入外部网络：" class="headerlink" title="A刚进入外部网络："></a>A刚进入外部网络：</h5><ul><li>1.在外部代理登记获得一个转交地址，离开时注销。</li><li>⒉.外地代理向本地代理登记转交地址。</li></ul><h5 id="B给A发送数据报："><a href="#B给A发送数据报：" class="headerlink" title="B给A发送数据报："></a>B给A发送数据报：</h5><ul><li>1.本地代理截获数据报。</li><li>2.本地代理再封装数据报，新的数据报目的地址是转交地址，发给外部代理（隧道)。</li><li>3.外部代理拆封数据报并发给A。</li></ul><h5 id="A给B发送数据报："><a href="#A给B发送数据报：" class="headerlink" title="A给B发送数据报："></a>A给B发送数据报：</h5><ul><li>A用自己的主地址作为数据报源地址，用B的IP地址作为数据报的目的地址。</li></ul><h5 id="A移动到了下一个网络："><a href="#A移动到了下一个网络：" class="headerlink" title="A移动到了下一个网络："></a>A移动到了下一个网络：</h5><ul><li>1.在新外部代理登记注册一个转交地址。</li><li>⒉新外部代理给本地代理发送新的转交地址（覆盖旧的)。</li><li>3.通信。</li></ul><h5 id="A回到了归属网络："><a href="#A回到了归属网络：" class="headerlink" title="A回到了归属网络："></a>A回到了归属网络：</h5><ul><li>1.A向本地代理注销转交地址。</li><li>⒉按原始方式通信。</li></ul><h3 id="网络层设备："><a href="#网络层设备：" class="headerlink" title="网络层设备："></a>网络层设备：</h3><h4 id="路由器："><a href="#路由器：" class="headerlink" title="路由器："></a>路由器：</h4><blockquote><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。</p></blockquote><h5 id="路由选择与分组转发"><a href="#路由选择与分组转发" class="headerlink" title="路由选择与分组转发"></a>路由选择与分组转发</h5><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6c09b6ca3f04a6bed654d6d321a375cc25170ec2a3356a8bf4c6cb5dad74caad.png"></p><ul><li><p>路由选择：</p><ul><li>根据所选定的路由选择协议构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表。</li></ul></li><li><p>分组转发：</p><ul><li>交换结构:根据转发表（路由表得来）对分组进行转发。</li><li>若收到RIP&#x2F;OSPF分组等，则把分组送往路由选择处理机;<br>若收到数据分组，则查找转发表并输出。</li></ul></li></ul><h5 id="输入端对线路上收到的分组的处理："><a href="#输入端对线路上收到的分组的处理：" class="headerlink" title="输入端对线路上收到的分组的处理："></a>输入端对线路上收到的分组的处理：</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5562d1ee4138e238d9adf1e21c9a3ba9637a12bf70160a632a5dbc7143ed2f00.png"></li><li>输入端口中的查找和转发功能在路由器的交换功能中是最重要的。</li></ul><h5 id="输出端口的处理："><a href="#输出端口的处理：" class="headerlink" title="输出端口的处理："></a>输出端口的处理：</h5><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/55db317f461548e953dcc6b32f9d5158102fe686e420b4a655be9e55d69b093d.png"></li><li>若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃。</li><li>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因。</li></ul><h4 id="三层设备的区别："><a href="#三层设备的区别：" class="headerlink" title="三层设备的区别："></a>三层设备的区别：</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/607eeb566f0acf254b5a1f90fb42260308a62102eb637fa8ec9415052400a8e3.png"></p><ul><li><p>路由器：</p><ul><li>可以互联两个不同网络层协议的网段。</li></ul></li><li><p>网桥：</p><ul><li>可以互联两个物理层和链路层不同的网段。</li></ul></li><li><p>集线器:</p><ul><li>不能互联两个物理层不同的网段。</li></ul></li></ul><h4 id="路由表与路由转发："><a href="#路由表与路由转发：" class="headerlink" title="路由表与路由转发："></a>路由表与路由转发：</h4><blockquote><p>路由表根据路由选择算法得出的，主要用途是路由选择，总用软件来实现。</p></blockquote><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07b5597a0cd4b8eb25873cd899c952e7861fb8da45f4944c89fb559f6224d8bf.png"></p><h5 id="转发表："><a href="#转发表：" class="headerlink" title="转发表："></a>转发表：</h5><ul><li>转发表由路由表得来，可以用软件实现，也可以用特殊的硬件来实现。转发表必须包含完成转发功能所必需的信息，在转发表的每一行必须包含从要到达的目的网络到输出端口和某些MAC地址信息的映射。</li></ul><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><blockquote><p>只有主机才有的层次【为应用层提供通信服务，使用网络层的服务】</p></blockquote><h3 id="功能：-3"><a href="#功能：-3" class="headerlink" title="功能："></a>功能：</h3><ul><li>传输层提供进程和进程之间的逻辑通信。</li><li>复用和分用</li><li>传输层对收到的报文进行差错检测。</li></ul><h3 id="传输层的两种协议："><a href="#传输层的两种协议：" class="headerlink" title="传输层的两种协议："></a>传输层的两种协议：</h3><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><ul><li><p>面向连接的传输控制协议TCP</p></li><li><p>传送数据之前必须建立连接，数据传送结束后要释放连接。不提供广播或多播服务。由于TCP要提供可靠的面向连接的传输服务，因此不可避免增加了许多开销：确认、流量控制、计时器及连接管理等。</p></li><li><p>特点：</p><ul><li>可靠，面向连接，时延大，适用于大文件。</li></ul></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li><p>无连接的用户数据报协议UDP</p></li><li><p>传送数据之前不需要建立连接，收到UDP报文后也不需要给出任何确认。</p></li><li><p>特点：</p><ul><li>不可靠，无连接，时延下，适用于小文件。</li></ul></li></ul><h3 id="传输层的寻址与端口"><a href="#传输层的寻址与端口" class="headerlink" title="传输层的寻址与端口"></a>传输层的寻址与端口</h3><h4 id="分用和复用："><a href="#分用和复用：" class="headerlink" title="分用和复用："></a>分用和复用：</h4><ul><li><p>复用：</p><ul><li>应用层所有的应用进程都可以通过传输层再传输到网络层。</li></ul></li><li><p>分用：</p><ul><li>传输层从网络层收到数据后交付指明的应用进程。</li></ul></li></ul><h4 id="端口【逻辑端口-x2F-软件端口】"><a href="#端口【逻辑端口-x2F-软件端口】" class="headerlink" title="端口【逻辑端口&#x2F;软件端口】"></a>端口【逻辑端口&#x2F;软件端口】</h4><blockquote><p>是传输层的SAP（服务访问点），标识主机中的应用进程。</p></blockquote><p>端口号</p><ul><li><p>端口号只有本地意义，在因特网中不同计算机的相同端口号是没有联系的。</p></li><li><p>端口号长度为16bit，能标识65536个不同的端口号。</p></li><li><p>按范围分：</p><ul><li><p>服务端使用的端口号</p><ul><li><p>熟知端口号（0~1023）：</p><ul><li>给TCP&#x2F;IP最重要的一些应用程序，让所有用户都知道。</li></ul></li><li><p>登记端口号（1024~49151）：</p><ul><li>为没有熟知端口号的应用程序使用的。</li></ul></li></ul></li><li><p>客户端使用的端口号（49152~65535）</p><ul><li>仅在客户进程运行时才动态选择。</li></ul></li></ul></li></ul><h4 id="套接字："><a href="#套接字：" class="headerlink" title="套接字："></a>套接字：</h4><ul><li>套接字Socket &#x3D; (主机IP地址，端口号）</li><li>在网络中采用发送方和接收方的套接字组合来识别端点，套接字唯一标识了网络中的一个主机和它上面的一个进程。</li></ul><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><blockquote><p>UDP只在IP数据报服务之上增加了很少功能，即复用分用和差错检测功能。</p></blockquote><h5 id="主要特点："><a href="#主要特点：" class="headerlink" title="主要特点："></a>主要特点：</h5><ul><li><p>UDP是无连接的，减少开销和发送数据之前的时延。</p></li><li><p>UDP使用最大努力交付，即不保证可靠交付。</p></li><li><p>UDP是面向报文的，适合一次性传输少量数据的网络应用。</p><ul><li>应用层给UDP多长的报文，UDP就照样发送，即一次发送一个完整报文。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7eccb9c41a5ecb5ceb61326fcfd6eef0f943713a5dc98cb626c7d4805f943eb5.png"></li></ul></li><li><p>UDP无拥塞控制，适合很多实时应用。</p></li><li><p>UDP首部开销小，8B，TCP20B。</p></li></ul><h5 id="UDP首部格式-："><a href="#UDP首部格式-：" class="headerlink" title="UDP首部格式 ："></a>UDP首部格式 ：</h5><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e95cd6163c8cc292e944f9a0c8f565f244be021d8c53eea1f4f67e4f99ecda36.png"></p><ul><li><p>源端口：</p><ul><li>源端口号。在需要对方回信时选用。不需要时可用全0。</li></ul></li><li><p>目的端口：</p><ul><li>目的端口号。这在终点交付报文时必须使用。</li></ul></li><li><p>长度：</p><ul><li>UDP用户数据报的长度，其最小值是8（仅有首部）</li></ul></li><li><p>检验和：</p><ul><li><p>检测UDP用户数据报在传输中是否用错。有错就丢弃。</p><ul><li>eg:分用时，找不到对应的目的端口号，就丢弃报文，并发给发送方ICMP“端口不可达”差错报告报文。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/baca014019200e6b65370aa8ccd447729442f26bd5033c01493ad2d76fad8536.png" alt="UDP校验过程"></p><ul><li><p>伪首部：</p><ul><li><p>只有在计算检验和时才出现，不向下传送也不向上递交。</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7f58aa632247441cfbce038264b139c902144b98c6d12ebfd916e5f67d0575b0.png" alt="伪首部校验"></p><ul><li><p>在发送端：</p><ul><li>填上伪首部</li><li>全0填充检验和字段</li><li>全0填充数据部分（UDP数据报要看成许多4B的字串接起来）</li><li>伪首部+首部+数据部分采用二进制反码求和</li><li>把和求反码填入检验和字段</li><li>去掉伪首部，发送</li></ul></li><li><p>在接收端：</p><ul><li>填上伪首部</li><li>伪首部+首部+数据部分采用二进制反码求和</li><li>结果全为1则无差错，否则丢弃数据报&#x2F;交给应用层附上出差错的警告。</li></ul></li></ul></li></ul></li><li><p>17：</p><ul><li>封装UDP报文的IP数据报首部协议字段是17。</li></ul></li><li><p>UDP长度：</p><ul><li>UDP首部8B+数据部分长度（不包括伪首部）。</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li><p>TCP是面向连接（虚连接）的传输协议。eg：打电话</p></li><li><p>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的。</p></li><li><p>TCP提供可靠交付的服务，无差错、不丢失、不重复、按序到达。可靠有序，不丢不重。</p></li><li><p>TCP提供全双工通信。</p><ul><li><p>发送缓存：</p><ul><li>准备发送的数据&amp;已发送但尚未收到确认的数据</li></ul></li><li><p>接收缓存：</p><ul><li>按序到达但尚未被接受应用程序读取的数据&amp;不按序到达的数据</li></ul></li></ul></li><li><p>TCP面向字节流</p><ul><li><p>流：</p><ul><li>流入到进程或从进程流出的字节序列。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/900eae63b8e7a7fdef8bf681c06ab324332249d91b6e3520f4a4629f50130311.png" alt="TCP把应用程序交下来的数据看成仅仅是一连串的无结构的字节流。"></p></li></ul></li></ul><h4 id="TCP报文段首部格式"><a href="#TCP报文段首部格式" class="headerlink" title="TCP报文段首部格式"></a>TCP报文段首部格式</h4><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0d1839d706090cdb524c12dce9d178fe5fbe258f716efb0500c7ddfec1c1661e.png"></p><ul><li><p>序号（seq）：</p><ul><li>在一个TCP连接中传送的字节流中的每一个字节都按顺序编号，本字段表示本报文段所发送数据的第一个字节的序号。</li></ul></li><li><p>确认号：</p><ul><li>期望收到对方下一个报文段的第一个数据字节的序号。若确认号为N，则证明到序号N~1为止的所有数据都已正确收到。</li></ul></li><li><p>数据偏移（首部长度）：</p><ul><li>TCP报文段的数据起始处距离TCP报文段的起始处有多远，以4B位单位，即一个数值是4B。</li></ul></li><li><p>6个控制位：</p><ul><li><p>紧急位URG：</p><ul><li>URG &#x3D; 1时，标明此报文段中有紧急数据，是高优先级的数据，应尽快传送，不用在缓存里排队，配合紧急指针字段使用。</li></ul></li><li><p>确认位ACK:</p><ul><li>ACK &#x3D; 1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1。</li></ul></li><li><p>推送位PSH：</p><ul><li>PSH &#x3D; 1时，接收方尽快交付接收应用进程，不再等到缓存填满再向上交付。</li></ul></li><li><p>复位RST：</p><ul><li>RST &#x3D; 1时，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立传输链接。</li></ul></li><li><p>同步位SYN：</p><ul><li>SYN &#x3D; 1时，表明是一个连接请求&#x2F;连接请求接受报文。</li></ul></li><li><p>终止位FIN：</p><ul><li>FIN &#x3D; 1时，表明此报文段发送方数据已发完，要求释放连接。</li></ul></li></ul></li><li><p>窗口：</p><ul><li>指的是发送本报文段的一方的接受窗口，即现在允许对方发送的数据量。</li></ul></li><li><p>校验和：</p><ul><li>检查首部+数据，检验时要加上12B伪首部，第四个字段为6。</li></ul></li><li><p>紧急指针；</p><ul><li>URG &#x3D; 1时才有意义，指出本报文段中紧急数据的字节数。</li></ul></li><li><p>选项：</p><ul><li>最大报文段长度MSS、窗口扩大、时间戳、选择确认……</li></ul></li></ul></li></ul><h4 id="TCP连接管理："><a href="#TCP连接管理：" class="headerlink" title="TCP连接管理："></a>TCP连接管理：</h4><ul><li><p>TCP连接传输的三个阶段：</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2963f2e5c1dbb7336115a643858e9b0b5ff98166143cec5514a09aed7189a6eb.png"></p></li><li><p>连接建立</p><ul><li><p>TCP连接的建立采用客户服务器方式。</p><ul><li>主动发起连接建立的应用进程叫做客户。</li><li>而被动等待连接建立的应用进程叫服务器。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f4984a3221686ea42f3424a5ea14996c5412bcbe0269c1a126a3301a2cc2c01a.png" alt="假设运行在一台主机（客户）上的一个进程想与另一台主机（服务器）上的一个进程建立一条连接，客户应用进程首先通知客户TCP，它想建立一个与服务器上某个进程之间的连接，客户中的TCP会用以下的步骤与服务器中的TCP建立一条TCP连接："></p><ul><li><p>ROUND1:</p><ul><li><p>客户端发送连接请求报文段，无应用层数据。</p></li><li><p>SYN &#x3D; 1</p><ul><li>同步位为1，表示请求建立连接。</li></ul></li><li><p>seq &#x3D; x（随机）</p><ul><li>发送的随机产生的报文段的随机的一个序号为x的。</li></ul></li></ul></li><li><p>ROUND2:</p><ul><li><p>服务器端为该TCP连接分配缓存和变量，并向客户端返回确认报文段，允许连接，无应用层数据。</p></li><li><p>SYN &#x3D; 1</p><ul><li>同步位为1，表示同意请求建立连接。</li></ul></li><li><p>ACK &#x3D; 1</p><ul><li>确认位为1，在连接建立后将其为1。</li></ul></li><li><p>seq &#x3D; y（随机）</p><ul><li>确认字节，主机随机分配的。</li></ul></li><li><p>ack&#x3D; x + 1</p><ul><li>表示x即x之前的报文段已收到，想要接受x+1之后的报文。</li></ul></li></ul></li><li><p>ROUND 3:</p><ul><li><p>客户端为该TCP连接分配缓存和变量，并向服务器端返回确认的确认，可以携带数据。</p></li><li><p>SYN &#x3D; 0</p><ul><li>同步位为0，表示连接建立。</li></ul></li><li><p>ACK &#x3D; 1</p><ul><li>确认位为1，在连接建立后将其为1。</li></ul></li><li><p>seq &#x3D; x + 1</p><ul><li>所发送报文段的第一个字节为x+1</li></ul></li><li><p>ack &#x3D; y + 1</p><ul><li>期望收到的下一个序号就是y+1</li></ul></li></ul></li></ul></li><li><p>SYN洪泛攻击</p><ul><li><p>SYN洪泛攻击发生在OSI第四层，这种方式利用TCP协议的特性，就是三次握手。攻击者发送TCP SYN，SYN是TCP三次握手中的第一个收据包，而当服务器返回ACK后，该攻击者就不对其进行再确认，那这个TCP链接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者。这样更加会浪费服务器的资源。攻击者就对服务器发送非常大量的这种TCP连接，由于每一个都没法完成三次握手，所以在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机，就无法为正常用户提供服务了。</p></li><li><p>解决方法：</p><ul><li>SYN  cookie</li></ul></li></ul></li></ul></li><li><p>数据传送</p></li><li><p>连接释放</p><ul><li><p>参与一条TCP连接的两个进程中的任何一个都能终止该连接，连接结束后，主机中的“资源”（缓存和变量）将被释放。</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7ea16c480b7a63e4cd33affe43876b91a1411846b865701c0e789770bc90d2fb.png"></p><ul><li><p>ROUND 1:</p><ul><li><p>客户端发送连接释放报文段，停止发送数据，主动关闭TCP连接。</p></li><li><p>FIN &#x3D; 1</p><ul><li>FIN &#x3D; 1时，表明此报文段发送方数据已发完，要求释放连接。</li></ul></li><li><p>seq &#x3D; u</p><ul><li>报文段（通常没有数据）一个序号，标识此报文段。等于之前发送的数据的最后一个字节的序号+1。</li></ul></li></ul></li><li><p>ROUND 2:</p><ul><li><p>服务器端回送一个确认报文段，客户到服务器这个方向的连接就释放了—半关闭状态。</p></li><li><p>ACK &#x3D; 1</p><ul><li>ACK &#x3D; 1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1。</li></ul></li><li><p>seq &#x3D; v</p><ul><li>上一个发送的报文段的最后一个字节的序号+1。</li></ul></li><li><p>ack&#x3D; u + 1</p><ul><li>期待客户端发送序列号为u+1的报文段。</li></ul></li></ul></li><li><p>ROUND 3:</p><ul><li><p>服务器端发完数据，就发出连接释放报文段，主动关闭TCP连接。</p></li><li><p>FIN &#x3D; 1</p><ul><li>FIN &#x3D; 1时，表明此报文段发送方数据已发完，要求释放连接。</li></ul></li><li><p>ACK &#x3D; 1</p><ul><li>ACK &#x3D; 1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1。</li></ul></li><li><p>seq &#x3D; w</p><ul><li>取决于上一步，服务器端发送数据量的多少。</li></ul></li><li><p>ack &#x3D; u + 1</p><ul><li>因为还是服务器端发送的，客户端没有发送数据，所以确认号还是u+1，期待客户端发送序列号为u+1 的报文段。</li></ul></li></ul></li><li><p>ROUND 4:</p><ul><li><p>客户端回送一个确认报文段，再等到时间等待计时器设置的2MSL（最长报文段寿命）后，连接彻底关闭。</p></li><li><p>ACK &#x3D; 1</p><ul><li>ACK &#x3D; 1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1。</li></ul></li><li><p>seq&#x3D; u + 1</p><ul><li>取决于上一步，服务器端发送数据量的多少。</li></ul></li><li><p>ack &#x3D; w + 1</p><ul><li>发送序列号第一个序号为w+1的报文段。</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="TCP可靠传输："><a href="#TCP可靠传输：" class="headerlink" title="TCP可靠传输："></a>TCP可靠传输：</h4><ul><li><p>可靠：</p><ul><li>保证接收方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的。</li></ul></li><li><p>TCP实现可靠传输的机制：</p><ul><li><p>校验：</p><ul><li>与UDP校验一样，增加伪首部。</li></ul></li><li><p>序号：</p><ul><li>一个字节占一个序号。【序号字段指的是一个报文段第一个字节的序号。】</li></ul></li><li><p>确认：</p><ul><li>接收方发送给发送方的一个确认信息，指明要接收接下来的报文段。</li></ul></li><li><p>重传：</p><ul><li><p>确认重传不分家，TCP的发送方在规定的时间内（重传时间）没有收到确认就要重传已发送的报文段。超时重传。</p></li><li><p>TCP采用自适应算法，动态改变重传时间的RTTs（加权平均往返时间）</p><ul><li>这两个时间之差就是报文段的往返时间RTT。</li><li>TCP保留了RTT的一个加权平均往返时间RTTs(又称平滑的往返时间）</li></ul></li><li><p>冗余ACK（冗余确认）</p><ul><li>每当比期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号。</li><li>发送方收到3个对于报文段1的冗余ACK——&gt;认为2号报文段丢失，重传2号报文段。   快速重传。</li></ul></li></ul></li></ul></li></ul><h4 id="TCP流量控制："><a href="#TCP流量控制：" class="headerlink" title="TCP流量控制："></a>TCP流量控制：</h4><ul><li><p>让发送方慢点，要让接收方来得及接收。</p></li><li><p>TCP利用滑动窗口机制实现流量控制。</p><ul><li><p>在通信过程中，接收方根据自己接收缓存的大小，动态的调整发送方的发送窗口的大小，即接收窗口rwnd（接收方设置确认报文段的窗口字段来将rwnd通知给发送方），发送方的发送窗口取接收窗口rwnd和拥塞窗口cwnd的最小值。</p></li><li><p>TCP为每一个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。</p><ul><li>若持续计时器设置的时间到期，就发送一个零窗口探测报文段。接收方收到探测报文段时给出现在的窗口值。</li><li>若窗口仍然为0，那么发送方就重新设置持续计时器。</li></ul></li></ul></li></ul><h4 id="TCP拥塞控制："><a href="#TCP拥塞控制：" class="headerlink" title="TCP拥塞控制："></a>TCP拥塞控制：</h4><h5 id="出现拥塞的条件："><a href="#出现拥塞的条件：" class="headerlink" title="出现拥塞的条件："></a>出现拥塞的条件：</h5><ul><li>对资源需求的总和 &gt; 可用资源</li><li>网络中有许多资源同时呈现供应不足 ——&gt;网络性能变坏——&gt;网络吞吐量将随输入负荷增大而下降</li></ul><h5 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h5><ul><li><p>防止过多的数据注入到网络中。【全局性】</p></li><li><p>拥塞控制四种算法【<br>慢开始<br>拥塞避免<br>快重传<br>快恢复】：</p><ul><li><p>假定：</p><ul><li><p>数据单方向传送，而另一个方向只传送确认</p></li><li><p>接收方总是有足够大的缓存空间，因而发送窗口大小取决于拥塞程度。</p></li><li><p>发送窗口 &#x3D; Min{接收窗口rwnd ，拥塞窗口cwnd}</p><ul><li><p>接收窗口：</p><ul><li>接收方根据接收缓存设置的值，并告知给发送方，反映接收方容量。</li></ul></li><li><p>拥塞窗口：</p><ul><li>发送方根据自己估算的网络拥塞程度而设置的窗口值，反映网络当前容量。</li></ul></li></ul></li></ul></li><li><p>慢开始和拥塞避免</p><ul><li><p>一个最大报文段长度MSS</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5d2b7358e1e69d90e919cf80faed1fed125fbf55b8433b7c3d2a640c8d521aee.png"></p><ul><li><p>一个传输轮次：</p><ul><li>发送了一批报文段并收到它们的确认的时间。</li><li>一个往返时间RTT。</li><li>开始发送一批拥塞窗口内的报文段到开始发送下一批拥塞窗口内的报文段的时间。</li></ul></li><li><p>慢开始：</p><ul><li><p>当主机开始发送数据时，由于并不清楚网络的负荷情况，所以如果立即把大量数据字节注入到网络，那么久有可能引起网络发生拥塞。经验证表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口的数值。</p></li><li><p>为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限 ssthresh 状态变量。当出现拥塞控制，发送方判断为网络拥塞。于是调整门限值ssthresh &#x3D; cwnd&#x2F;2。同时设置拥塞窗口cwnd&#x3D; 1，进入慢开始阶段。</p><ul><li><p>当cwnd &lt; ssthresh时</p><ul><li>继续使用慢开始算法</li></ul></li><li><p>当cwnd &gt; ssthreah时</p><ul><li>停止使用慢开始算法而改变拥塞避免算法</li></ul></li><li><p>当cwnd &#x3D; ssthreah时</p><ul><li>既可使用慢开始算法，也可使用拥塞避免算法</li></ul></li></ul></li></ul></li><li><p>拥塞控制：</p><ul><li>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd+1，而不是像慢开始阶段那样加倍增长。因此在拥塞避免阶段就有“加法增大”AI(Additive Increase）的特点。</li></ul></li></ul></li></ul></li><li><p>快重传和快恢复</p><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/81c267fa2a6afedd1e49613e9990a496e38836b6992b75ccf34ac5e8532ed4e9.png"></p></li><li><p>快重传：</p><ul><li>收到3个重复的确认，执行快重传算法。</li><li>采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。</li><li>快重传算法首先是要求接收方不要等待自己发送数据时才进行少带确认，而是要立即发送确认，即收到了失序的报文段也要立即发出对已收到报文段的重复确认。</li></ul></li><li><p>快恢复：</p><ul><li>发送方知道现在丢失了个别的报文段，于是不启动慢开始，而是执行快恢复算法。这样，发送方调整门限值ssthresh &#x3D; cwnd &#x2F; 2，同时设置拥塞窗口 cwnd &#x3D; ssthresh，并开始执行拥塞避免算法。</li></ul></li></ul></li></ul></li></ul><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><blockquote><p>应用层对应用程序的通信提供服务。</p></blockquote><h3 id="应用层协议定义："><a href="#应用层协议定义：" class="headerlink" title="应用层协议定义："></a>应用层协议定义：</h3><ul><li>应用程序交换的报文类型，请求还是响应？</li><li>各种报文类型的语法，如报文中的各个字段及其详细描述。</li><li>字段的语义，即包含在字段中的信息的含义。</li><li>进程何时、如何发送报文，以及对报文进行响应的规则。</li></ul><h3 id="应用层的功能："><a href="#应用层的功能：" class="headerlink" title="应用层的功能："></a>应用层的功能：</h3><ul><li>文件传输、访问和管理</li><li>电子邮件</li><li>虚拟终端</li><li>查询服务和远程作业登录</li></ul><h3 id="应用层的重要协议："><a href="#应用层的重要协议：" class="headerlink" title="应用层的重要协议："></a>应用层的重要协议：</h3><ul><li>FTP</li><li>SMTP、POP3</li><li>HTTP</li><li>DNS</li></ul><h3 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h3><h4 id="客户-x2F-服务器模型（Client-x2F-Server）"><a href="#客户-x2F-服务器模型（Client-x2F-Server）" class="headerlink" title="客户&#x2F;服务器模型（Client&#x2F;Server）"></a>客户&#x2F;服务器模型（Client&#x2F;Server）</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e6788f45b29f38efdf550166077c0a4fbef50b9741955128f15bbaaff9a34891.png"></p><h5 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h5><ul><li><p>提供计算服务的设备。</p></li><li><p>特点：</p><ul><li>永久提供服务</li><li>永久性访问地址&#x2F;域名</li></ul></li></ul><h5 id="客户机："><a href="#客户机：" class="headerlink" title="客户机："></a>客户机：</h5><ul><li><p>请求计算服务的主机。</p></li><li><p>特点：</p><ul><li>使用服务器提供的服务。</li><li>间歇性接入网络。</li><li>可能使用动态IP地址。</li><li>不与其他客户机直接通信。</li></ul></li></ul><h5 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h5><ul><li>web</li><li>文件传输FTP</li><li>远程登录</li><li>电子邮件</li></ul><h4 id="P2P模型（Peer-to-peer）"><a href="#P2P模型（Peer-to-peer）" class="headerlink" title="P2P模型（Peer-to-peer）"></a>P2P模型（Peer-to-peer）</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/110fde7aa4546e5934d4eed51d3bc52b412c422aaf14f73533298679ffb3e97d.png"></p><h5 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h5><ul><li>不存在永远在线的服务器</li><li>每个主机既可以提供服务，也可以请求服务</li><li>任意端系统&#x2F;节点之间可以直接通讯</li><li>节点间歇性接入网络</li><li>节点可能改变IP地址</li><li>可拓展性好</li><li>网络健壮性强</li></ul><h3 id="域名解析系统DNS"><a href="#域名解析系统DNS" class="headerlink" title="域名解析系统DNS"></a>域名解析系统DNS</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ed37aeebbb8a175ada451a70ec6309644aec311ea13c9485d0aed2a35a98ae50.png"></p></li><li><p>根：</p><ul><li>.</li></ul></li><li><p>顶级域名：</p><ul><li><p>国家顶级域名</p><ul><li>cn：中国</li><li>us：美国</li><li>uk：英国</li><li>…….</li></ul></li><li><p>通用顶级域名</p><ul><li>com：公司企业</li><li>net：网络服务机构</li><li>org：非盈利性组织</li><li>int：国际组织</li><li>edu：美国专用的教育机构</li><li>gov：美国的政府部门</li><li>mil：美国军事部门</li><li>……</li></ul></li><li><p>基础结构域名&#x2F;反向域名</p><ul><li>arpa</li></ul></li></ul></li><li><p>二级域名：</p><ul><li><p>类别域名</p><ul><li>ac：科研机构</li><li>com：工、商、金融等企业</li><li>edu：中国的教育机构</li><li>gov：中国的政府机构</li><li>mil：中国的国防机构</li><li>net：提供互联网服务的机构</li><li>org：非盈利性的组织</li></ul></li><li><p>行政域名 </p><ul><li>用于我国各省、自治区、直辖市 （共34个）   bj（北京），js（江苏省）</li></ul></li></ul></li><li><p>三级域名：</p><ul><li>在某个二级域名下注册的单位就可以获得一个三级域名：比如在edu下的三级域名有：Tsinghua（清华大学）和pku（北京大学）</li></ul></li><li><p>四级域名：</p><ul><li>一旦某个单位拥有了一个域名，它就可以自己决定是否要进一步划分其下属的子域，并且不必由上级机构批准。</li></ul></li></ul><h4 id="域名服务器："><a href="#域名服务器：" class="headerlink" title="域名服务器："></a>域名服务器：</h4><ul><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5a3533667e95ca686f0e9e0c8c2b14dad0eb576bbd6b519850826cecc4241e0b.png"></p></li><li><p>根域名服务器</p><ul><li>根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和IP地址。</li><li>由于根域名服务器采用了任播技术，因此当DNS客户向某个根域名服务器的IP地址发出查询报文时，互联网上的路由器就能找到离这个DNS客户最近的一个根域名服务器。</li></ul></li><li><p>顶级域名服务器</p><ul><li>这些域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到DNS查询请求时，就会给出相应的回答（可能是最后的结果，也可能是下一步应当找的域名服务器的IP地址）</li></ul></li><li><p>权限域名服务器</p><ul><li>一个服务器所负责管辖的（或有权限的）范围叫做区，每一个区设置相应的权限域名服务器，用来保存该区中所有主机的域名到IP地址的映射。</li><li>负责一个区的域名服务器。当一个权限域名服务器还不能给出最后的查询回答时，就会告诉发出查询请求的DNS客户，下一步应当找哪一个权限域名服务器。</li></ul></li><li><p>本地域名服务器</p><ul><li>不属于域名服务器层次结构划分。</li><li>当一个主机发出DNS查询请求时，这个查询请求报文就发给本地域名服务器。</li></ul></li></ul><h4 id="域名解析过程；"><a href="#域名解析过程；" class="headerlink" title="域名解析过程；"></a>域名解析过程；</h4><h5 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h5><ul><li>主机向本地域名服务器的查询一般都是递归查询。</li><li>如果主机所询问的本地域名服务器不知道被查询域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其他根域名服务器继续发出查询请求报文（即替该主机继续查询），而不是让该主机自己进行下一步的查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c2ba9f9360bfa46fb1cda64afae470bddc5e10388556acab6f8362eafbacf9a6.png"></li></ul><h5 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h5><ul><li><p>本地域名服务器向根域名服务器的查询通常是采用迭代查询。</p></li><li><p>迭代查询的特点：</p><ul><li>当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询（而不是替本地域名服务器进行后续的查询）根域名服务器通常是把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的请求后，要么给出所要查询的IP地址，要么告诉本地域名服务器下一步应当向哪一个权限域名服务器进行查询，本地域名服务器就这样进行迭代查询。最后，知道了所要解析的域名的IP地址，然后把这个结果返回给发起查询的主机。</li><li>本地域名服务器也可以采用递归查询，这取决于最初的查询请求报文的设置是要求使用哪一种查询方式。</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9e20b04bc88a06d701017fc767ac738b8fc03a55b35220fc1633967aa72a4279.png"></p></li></ul><h5 id="高速缓存（有时也称为高速缓存域名服务器）"><a href="#高速缓存（有时也称为高速缓存域名服务器）" class="headerlink" title="高速缓存（有时也称为高速缓存域名服务器）"></a>高速缓存（有时也称为高速缓存域名服务器）</h5><ul><li>为了提高DNS查询效率，并减轻根域名服务器的负荷和减少互联网上DNS查询报文数量。</li><li>高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。</li><li>由于名字到地址的绑定并不经常改变，为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器并处理超过合理时间的项（例如：每个项目只存放两天）</li></ul><h3 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h3><h4 id="文件传送协议FTP-File-Transfer-Protocol）"><a href="#文件传送协议FTP-File-Transfer-Protocol）" class="headerlink" title="文件传送协议FTP(File Transfer Protocol）"></a>文件传送协议FTP(File Transfer Protocol）</h4><blockquote><p>提供不同种类主机系统（硬、软件体系等都可以不同）之间的文件传输能力。</p></blockquote><h5 id="FTP服务器和用户端"><a href="#FTP服务器和用户端" class="headerlink" title="FTP服务器和用户端"></a>FTP服务器和用户端</h5><ul><li>FTP是基于客户&#x2F;服务器（C&#x2F;S )的协议。</li><li>用户通过一个客户机程序连接至在远程计算机上运行的服务器程序。</li><li>依照FTP协议提供服务，进行文件传送的计算机就是FTP服务器。</li><li>连接FTP服务器，遵循FTP协议与服务器传送文件的电脑就是FTP客户端。</li></ul><h5 id="FTP工作原理："><a href="#FTP工作原理：" class="headerlink" title="FTP工作原理："></a>FTP工作原理：</h5><ul><li><p>登陆：</p><ul><li><p>ftp地址</p><ul><li><p>用户名&amp;密码</p></li><li><p>匿名登陆：</p><ul><li>互联网中有很大一部分FTP服务器被称为“匿名”（Anonymous）FTP服务器。这类服务器的目的是向公众提供文件拷贝服务，不要求用户事先在该服务器进行登记注册，也不用取得FTP服务器的授权。<br>Anonymous（匿名文件传输）能够使用户与远程主机建立连接并以匿名身份从远程主机上拷贝文件，而不必是该远程主机的注册用户，用户使用特殊的用户名“anonymous”登陆FTP服务，就可访问远程主机上公开的文件。</li></ul></li></ul></li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c47b9ff92d21d409642f20a3cee6d5805aa0be23e8a267dc6e4acb7816c1510b.png"></p><ul><li><p>控制连接始终保持</p></li><li><p>数据连接保持一会</p></li><li><p>是否使用TCP  20端口建立数据连接与传输模式有关</p><ul><li>主动方式使用 TCP 20端口</li><li>被动方式由服务器和客户端自行协商决定（端口 &gt; 1024）</li></ul></li></ul></li></ul><h5 id="FTP传输模式："><a href="#FTP传输模式：" class="headerlink" title="FTP传输模式："></a>FTP传输模式：</h5><ul><li><p>文本模式：</p><ul><li>ASCII模式，以文本序列传输数据。</li></ul></li><li><p>二进制模式：</p><ul><li>Binary模式，以二进制序列传输数据。</li></ul></li></ul><blockquote><p>FTP使用TCP实现可靠传输。</p></blockquote><h4 id="简单文件传送协议TFTP-Trivial-File-Transfer-Protocol）"><a href="#简单文件传送协议TFTP-Trivial-File-Transfer-Protocol）" class="headerlink" title="简单文件传送协议TFTP(Trivial File Transfer Protocol）"></a>简单文件传送协议TFTP(Trivial File Transfer Protocol）</h4><blockquote><p>很小且易于实现的文件传送协议。</p><p>TFTP基于UDP协议传输。</p></blockquote><p>特点：</p><ul><li>每次传送的数据报文中有512字节的数据，但最后一次可不足512字节。</li><li>数据报文段按序编号，从1开始。</li><li>支持ASCII码或二进制传送。</li><li>可对文件进行读和写。</li><li>使用很简单的首部。</li></ul><blockquote><p>它们都是文件共享协议中的一大类，即复制整个文件，其特点是:若要存取一个文件，就必须先获得一个本地的文件副本。如果要修改文件，只能对文件的副本进行修改，然后再将修改后的文件副本传回原节点。</p></blockquote><h3 id="电子邮件："><a href="#电子邮件：" class="headerlink" title="电子邮件："></a>电子邮件：</h3><h4 id="电子邮件的信息格式："><a href="#电子邮件的信息格式：" class="headerlink" title="电子邮件的信息格式："></a>电子邮件的信息格式：</h4><h5 id="信封："><a href="#信封：" class="headerlink" title="信封："></a>信封：</h5><ul><li><a href="mailto:&#97;&#x62;&#x63;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#111;&#109;">&#97;&#x62;&#x63;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#111;&#109;</a></li></ul><h5 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h5><ul><li><p>首部：</p><ul><li>TO:<a href="mailto:&#x61;&#98;&#x63;&#x40;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;">&#x61;&#98;&#x63;&#x40;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;</a><br>Subject:Hello!(主题)<ul><li>From：<a href="mailto:&#49;&#x31;&#x31;&#x40;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#49;&#x31;&#x31;&#x40;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a><br>To：<a href="mailto:&#x61;&#x62;&#x63;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#x6f;&#x6d;">&#x61;&#x62;&#x63;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#x6f;&#x6d;</a><br>Subject: Hello!<br>Date: 2020-11-19<br>…….<br>【这些都是邮件系统自动添加的。】</li></ul></li></ul></li><li><p>主体：</p><ul><li>就是你想写的东西。</li></ul></li></ul><h4 id="组成部分："><a href="#组成部分：" class="headerlink" title="组成部分："></a>组成部分：</h4><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/29bbcef5b6b51ebf18d50406f422cb98818b6799930aafd5d71ed474d6b9ec18.png"></p><ul><li><p>用户代理：</p><ul><li><p>UA(User Agetn)就是用户与电子邮件系统的接口，在大多数情况下它就是运行在电脑中的一个程序。因此用户dialing又称为电子邮件客户端软件。用户代理给用户提供一个很友好的接口（目前主要是窗口界面）来发送和接收邮件。</p></li><li><p>常见的用户代理：</p><ul><li>微软公司的Outlook  Express</li><li>张小龙的Foxmail</li></ul></li><li><p>具有的功能；</p><ul><li><p>撰写：</p><ul><li>给用户提供编辑信件的环境。</li></ul></li><li><p>显示：</p><ul><li>能方便地在计算机屏幕上显示出来信（包括来信附上的声音和图像）</li></ul></li><li><p>处理：</p><ul><li>处理包括发送和接收邮件。</li></ul></li><li><p>通信：</p><ul><li>发信人在撰写完邮件后，要利用邮件发送协议发送到用户所使用的邮件服务器。收件人在接收邮件时，要使用邮件读取协议从本地邮件服务器接收邮件。</li></ul></li></ul></li></ul></li><li><p>邮件服务器：</p><ul><li><p>使用客户&#x2F;服务器模型（Client&#x2F;Server）。</p></li><li><p>功能：</p><ul><li>发送&amp;接收邮件</li><li>向发件人报告邮件传送结果</li></ul></li></ul></li><li><p>协议：</p><ul><li>SMTP(发）</li><li>POP3、IMAP（收）</li></ul></li></ul><h5 id="组成结构："><a href="#组成结构：" class="headerlink" title="组成结构："></a>组成结构：</h5><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a41f225ecf58b1d023bd9b1104770161a66f700274002063deebc87f6743c899.png"></p><h4 id="简单邮件传送协议SMTP"><a href="#简单邮件传送协议SMTP" class="headerlink" title="简单邮件传送协议SMTP:"></a>简单邮件传送协议SMTP:</h4><h5 id="SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。"><a href="#SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。" class="headerlink" title="SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。"></a>SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。</h5><ul><li>负责发送邮件的SMTP进程就是SMTP客户</li><li>负责接收邮件的进程就是SMTP服务器</li><li>SMTP规定了14条命令（几个字母）和21种应答信息（三位数字代码+简单文字说明）</li></ul><h5 id="SMTP通信三个阶段："><a href="#SMTP通信三个阶段：" class="headerlink" title="SMTP通信三个阶段："></a>SMTP通信三个阶段：</h5><ul><li><p>连接建立：</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c33e050369d2fba62f176f7178c5623f428e37d545ec827bfc3fd60401d0edef.png"></li></ul></li><li><p>邮件传送：</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/86f0a3a7dc8583551afbbf133f4e16c480b1fe58763b0931f35c5efe83f90084.png"></li></ul></li><li><p>连接释放：</p><ul><li>邮件发完，SMTP客户发送QUIT命令，SMTP服务器返回“221”，表示同意释放TCP连接。</li></ul></li></ul><h5 id="SMTP的缺点："><a href="#SMTP的缺点：" class="headerlink" title="SMTP的缺点："></a>SMTP的缺点：</h5><ul><li><p>SMTP不能传送可执行文件或者其他二进制对象。</p></li><li><p>SMTP仅限于传送7位ASCII码，不能传送其他非英语国家的文字。</p></li><li><p>SMTP服务器会拒绝超过一定长度的邮件。</p></li><li><p>解决：</p><ul><li><p>通用因特网邮件扩充MIME</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/153ba82e9cb5161a906026b1a53da0c0422ab0916d380e9484cac22e056976b2.png"></li><li>使电子邮件系统可以支持声音、图像、视频、多种国家语言等等。</li><li>使得传输内容丰富多彩。</li></ul></li></ul></li></ul><blockquote><p> 使用TCP连接   端口号25     建立在客户&#x2F;服务器模型（Client&#x2F;Server）</p></blockquote><h4 id="邮局协议POP3"><a href="#邮局协议POP3" class="headerlink" title="邮局协议POP3:"></a>邮局协议POP3:</h4><ul><li><p>使用TCP连接   端口号110     建立在客户&#x2F;服务器模型（Client&#x2F;Server）</p></li><li><p>POP3是一个非常简单、但功能有限的邮件读取协议。</p></li><li><p>POP3工作方式：</p><ul><li>下载并保留（在服务器）</li><li>下载并删除</li></ul></li></ul><h4 id="网际报文存取协议IMAP"><a href="#网际报文存取协议IMAP" class="headerlink" title="网际报文存取协议IMAP:"></a>网际报文存取协议IMAP:</h4><ul><li>IMAP协议比POP协议复杂。当用户PC上的IMAP客户程序打开IMAP服务器的邮箱时，用户可以看到邮箱的首部，若用户需要打开某个邮件，该邮件才能上传到用户的计算机上。</li><li>IMAP可以让用户在不同的地方使用不同的计算机随时上网阅读处理邮件，还允许只读取邮件中的某一个部分（先看正文，有WIFI的时候再下载附件）。</li></ul><h4 id="基于万维网的电子邮件："><a href="#基于万维网的电子邮件：" class="headerlink" title="基于万维网的电子邮件："></a>基于万维网的电子邮件：</h4><ul><li>不管在什么地方（在任何一个国家的网吧、宾馆或朋友家中），只要能找到上网的计算机，在打开任何一种浏览器后，就可以非常方便地收发电子邮件。</li><li>在浏览器和互联网上的邮件服务器直接传送邮件时，使用HTTP协议。但是在各邮件服务器之间传送邮件时，仍然使用SMTP协议。</li></ul><h3 id="万维网："><a href="#万维网：" class="headerlink" title="万维网："></a>万维网：</h3><h4 id="万维网概述："><a href="#万维网概述：" class="headerlink" title="万维网概述："></a>万维网概述：</h4><ul><li>万维网WWW（World  Wide  Web）是一个大规模的、联机式的信息储藏所&#x2F;资料空间【资源（文字、视频、音频….)】，是无数个网络站点和网页的集合。</li><li>用户通过点击超链接（<a href="http://www.baidu.com)获取资源,这些资源通过超文本传输协议(http)传送给使用者./">http://www.baidu.com)获取资源，这些资源通过超文本传输协议（HTTP)传送给使用者。</a></li><li>万维网以客户&#x2F;服务器方式工作，用户使用的浏览器就是万维网客户程序，万维网文档所驻留的主机运行服务器程序。</li><li>万维网使用超文本标记语言HTML，使得万维网页面设计者可以很方便从一个界面的链接转到另一个界面，并能够在自己的屏幕上显示出来。</li></ul><h4 id="统一资源定位符URL"><a href="#统一资源定位符URL" class="headerlink" title="统一资源定位符URL:"></a>统一资源定位符URL:</h4><ul><li><p>统一资源定位符URL____唯一标识_____&gt;资源（文字、视频、音频….)</p></li><li><p>URL一般形式：</p><ul><li>&lt;协议&gt;:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt;     htttp:&#x2F;&#x2F;<a href="http://www.pku.edu.cn/">www.pku.edu.cn</a><br>http        域名<br>ftp           ip地址</li><li>URL不区分大小写。</li></ul></li></ul><h4 id="超文本传输协议HTTP："><a href="#超文本传输协议HTTP：" class="headerlink" title="超文本传输协议HTTP："></a>超文本传输协议HTTP：</h4><blockquote><p>HTTP协议定义了浏览器（万维网客户进程）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给服务器</p></blockquote><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8de4d825a65676c787fe041b2f7bf51251d6eb8b3bd412823859b2a756ce6190.png"></p><h5 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h5><ul><li><p>HTTP协议是无状态的。</p><ul><li><p>同一个客户第二次访问同一个服务器上的页面时，服务器的响应与第一次被访问时的相同（ 假设现在服务器还没有把该页面更新。）</p></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bf630b800e3141d06063532a5acd179895ac74cbd70baa120b0e43d3646996f3.png" alt="但是在实际工作中，一些万维网站点常常希望能够识别用户。"></p><ul><li>Cookie是存储在用户主机中的文本文件，记录一段时间内某用户（使用识别码识别，如“123456”）的访问记录。</li></ul></li></ul></li><li><p>提供个性化服务：</p><ul><li>HTTP采用TCP作为运输层协议，但HTTP协议本身是无连接的（通信双方在交换HTTP报文之前不需要先建立HTTP连接）。</li></ul></li></ul><h5 id="HTTP的连接方式："><a href="#HTTP的连接方式：" class="headerlink" title="HTTP的连接方式："></a>HTTP的连接方式：</h5><ul><li><p>持久连接（Keep-alive）：</p><ul><li>非流水线</li><li>流水线</li><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/330e4acbe7a23d694f969cbf41d0c942694b6a6cbd341b40ac8d36e285cce3cf.png"></li></ul></li><li><p>非持久连接（Close）</p><ul><li><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/61ef0c785e1015e6f47e7675f03c10c9c9148e7dc53360a5f656d6ebed4222ea.png"></li></ul></li></ul><h5 id="报文结构："><a href="#报文结构：" class="headerlink" title="报文结构："></a>报文结构：</h5><ul><li><p>HTTP报文：</p><ul><li>请求报文</li><li>响应报文</li></ul></li><li><p><img src="/2022/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8b44d4fc8e04b16af3f9447328172e93ac4fe6d49beb18c579e8b770873c6eaf.png"></p><ul><li><p>状态码：</p><ul><li>1xx表示通知信息的，如请求收到了或正在处理。</li><li>2xx表示成功，如接受或知道了。</li><li>3xx表示重定向，如要完成请求还必须采取进一步的行动。</li><li>4xx表示客户的差错，如请求中有错误的语法或不能完成。</li><li>5xx表示服务器的差错，如服务器失效无法完成请求。</li></ul></li></ul></li></ul><h2 id="几种传输单元名词辨析："><a href="#几种传输单元名词辨析：" class="headerlink" title="几种传输单元名词辨析："></a>几种传输单元名词辨析：</h2><h3 id="应用层-2"><a href="#应用层-2" class="headerlink" title="应用层"></a>应用层</h3><ul><li>报文</li></ul><h3 id="传输层-2"><a href="#传输层-2" class="headerlink" title="传输层"></a>传输层</h3><ul><li>报文段</li></ul><h3 id="网络层-2"><a href="#网络层-2" class="headerlink" title="网络层"></a>网络层</h3><ul><li>IP数据报、分组</li></ul><h3 id="数据链路层-2"><a href="#数据链路层-2" class="headerlink" title="数据链路层"></a>数据链路层</h3><ul><li>帧</li></ul><h3 id="物理层-2"><a href="#物理层-2" class="headerlink" title="物理层"></a>物理层</h3><ul><li>比特流</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数仓</title>
      <link href="/2022/06/18/%E6%95%B0%E4%BB%93/"/>
      <url>/2022/06/18/%E6%95%B0%E4%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-用户行为数据采集；"><a href="#1-用户行为数据采集；" class="headerlink" title="1.用户行为数据采集；"></a>1.用户行为数据采集；</h2><h3 id="1-大数据集群的搭建：hadoop、zookeeper、kafka、hbase；"><a href="#1-大数据集群的搭建：hadoop、zookeeper、kafka、hbase；" class="headerlink" title="(1).大数据集群的搭建：hadoop、zookeeper、kafka、hbase；"></a>(1).大数据集群的搭建：hadoop、zookeeper、kafka、hbase；</h3><h3 id="2-模拟数据上传；"><a href="#2-模拟数据上传；" class="headerlink" title="(2).模拟数据上传；"></a>(2).模拟数据上传；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE05.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE06.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE07.tmp.jpg" alt="img"> </p><h3 id="3-修改配置文件application-properties、logback-xml；"><a href="#3-修改配置文件application-properties、logback-xml；" class="headerlink" title="(3).修改配置文件application.properties、logback.xml；"></a>(3).修改配置文件application.properties、logback.xml；</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># （数仓4.0为yml文件）</span><span class="token function">vim</span> application.properties</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE08.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> logback.xml</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE09.tmp.jpg" alt="img"> </p><h3 id="4-生成日志并查看日志；"><a href="#4-生成日志并查看日志；" class="headerlink" title="(4).生成日志并查看日志；"></a>(4).生成日志并查看日志；</h3><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar gmall2020-mock-log-2020-05-10.jar</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE0A.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入log文件夹</span><span class="token builtin class-name">cd</span> log<span class="token comment"># 查看</span>ll</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE0B.tmp.jpg" alt="img"> </p><h3 id="4-分发applog；"><a href="#4-分发applog；" class="headerlink" title="(4).分发applog；"></a>(4).分发applog；</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入applog所在目录</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment"># 分发</span>xsync applog</code></pre><h3 id="5-编写集群日志生成脚本；"><a href="#5-编写集群日志生成脚本；" class="headerlink" title="(5).编写集群日志生成脚本；"></a>(5).编写集群日志生成脚本；</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token function">vim</span> lg.sh</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE0C.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2<span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"========== <span class="token variable">$i</span> =========="</span>  <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"cd /root/soft/applog; java -jar gmall2020-mock-log-2020-05-10.jar >/dev/null 2>&amp;1 &amp;"</span><span class="token keyword">done</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE0D.tmp.jpg" alt="img"> </p><p>为脚本赋执行权限并启动脚本：chmod u+x lg.sh</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE0E.tmp.jpg" alt="img"> </p><p>查看hadoop2的log文件是否生成日志：cd &#x2F;root&#x2F;soft&#x2F;applog&#x2F;log</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE1E.tmp.jpg" alt="img"> </p><h3 id="6-数据采集模块；"><a href="#6-数据采集模块；" class="headerlink" title="(6).数据采集模块；"></a>(6).数据采集模块；</h3><p>编写集群所有进程查看脚本并赋权限：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/bin<span class="token function">vim</span> xcall.sh<span class="token function">chmod</span> <span class="token number">777</span> xcall.sh</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE1F.tmp.jpg" alt="img"> </p><p>脚本内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3<span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> --------- <span class="token variable">$i</span> ----------  <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">done</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE20.tmp.jpg" alt="img"> </p><p>启动脚本：xcall.sh jps</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE21.tmp.jpg" alt="img"> </p><h3 id="7-LZO压缩配置；"><a href="#7-LZO压缩配置；" class="headerlink" title="(7).LZO压缩配置；"></a>(7).LZO压缩配置；</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载wget：</span>yum -y <span class="token function">install</span> <span class="token function">wget</span><span class="token comment">#下载gcc-c++、zlib-devel、autoconf、automake、libtool：</span>yum -y <span class="token function">install</span> gcc-c++ lzo-devel zlib-devel autoconf automake libtool<span class="token comment">#下载、安装并编译LZO：</span><span class="token function">wget</span> http://www.oberhumer.com/opensource/lzo/download/lzo-2.10.tar.gz<span class="token comment">#解压：</span><span class="token function">tar</span> -zxvf lzo-2.10.tar.gz -C /root/soft</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE22.tmp.jpg" alt="img"> </p><p>切换lzo目录并运行以下命令： cd &#x2F;root&#x2F;soft&#x2F;lzo-2.10&#x2F;</p><pre class="language-bash" data-language="bash"><code class="language-bash">./configure -prefix<span class="token operator">=</span>/root/soft/hadoop/lzo/<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span></code></pre><p>声明两个临时变量并使环境变量生效：vim ~&#x2F;.bashrc  source ~&#x2F;.bashrc</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">C_INCLUDE_PATH</span><span class="token operator">=</span>/usr/local/hadoop/lzo/include<span class="token builtin class-name">export</span> <span class="token assign-left variable">LIBRARY_PATH</span><span class="token operator">=</span>/usr/local/hadoop/lzo/lib </code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE23.tmp.jpg" alt="img"> </p><p>上传hadoop-lzo-0.4.20.jar并放入hadoop下的common：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> hadoop-lzo-0.4.20.jar /root/soft/hadoop/share/hadoop/common</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE24.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到common目录：</span><span class="token builtin class-name">cd</span>  /root/soft/hadoop/share/hadoop/common<span class="token comment">#分发hadoop-lzo-0.4.20.jar：</span>xsync hadoop-lzo-0.4.20.jar<span class="token comment">#切换到core-site.xml增加支持LZO配置：</span><span class="token builtin class-name">cd</span> /root/soft/hadoop/etc/hadoop/</code></pre><p>编辑core-site.xml：vim core-site.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.compression.codecs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>      org.apache.hadoop.io.compress.GzipCodec,      org.apache.hadoop.io.compress.DefaultCodec,      org.apache.hadoop.io.compress.BZip2Codec,      org.apache.hadoop.io.compress.SnappyCodec,      com.hadoop.compression.lzo.LzoCodec,      com.hadoop.compression.lzo.LzopCodec    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.compression.codec.lzo.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.hadoop.compression.lzo.LzoCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE25.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE26.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#分发core-site.xml：</span>xsync core-site.xml<span class="token comment">#编写hadoop群起脚本：</span><span class="token builtin class-name">cd</span> /root/bin</code></pre><p>vim hdp.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"No Args Input..."</span>    <span class="token builtin class-name">exit</span> <span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">" =================== 启动 hadoop集群 ==================="</span>        <span class="token builtin class-name">echo</span> <span class="token string">" --------------- 启动 hdfs ---------------"</span>        <span class="token function">ssh</span> hadoop1 <span class="token string">"/root/soft/hadoop/sbin/start-dfs.sh"</span>        <span class="token builtin class-name">echo</span> <span class="token string">" --------------- 启动 yarn ---------------"</span>        <span class="token function">ssh</span> hadoop2 <span class="token string">"/root/soft/hadoop/sbin/start-yarn.sh"</span>        <span class="token builtin class-name">echo</span> <span class="token string">" --------------- 启动 historyserver ---------------"</span>        <span class="token function">ssh</span> hadoop1 <span class="token string">"/root/soft/hadoop/bin/mapred --daemon start historyserver"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">" =================== 关闭 hadoop集群 ==================="</span>        <span class="token builtin class-name">echo</span> <span class="token string">" --------------- 关闭 historyserver ---------------"</span>        <span class="token function">ssh</span> hadoop1 <span class="token string">"/root/soft/hadoop/bin/mapred --daemon stop historyserver"</span>        <span class="token builtin class-name">echo</span> <span class="token string">" --------------- 关闭 yarn ---------------"</span>        <span class="token function">ssh</span> hadoop2 <span class="token string">"/root/soft/hadoop/sbin/stop-yarn.sh"</span>        <span class="token builtin class-name">echo</span> <span class="token string">" --------------- 关闭 hdfs ---------------"</span>        <span class="token function">ssh</span> hadoop1 <span class="token string">"/root/soft/hadoop/sbin/stop-dfs.sh"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"Input Args Error..."</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE27.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> hdp.sh<span class="token comment">#启动集群：</span>hdp.sh start<span class="token comment">#查看进程是否缺少：</span>xcall.sh jps</code></pre><h3 id="8-LZO创建索引；"><a href="#8-LZO创建索引；" class="headerlink" title="(8).LZO创建索引；"></a>(8).LZO创建索引；</h3><p>上传bigtable.lzo到hdfs：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdfs dfs -put bigtable.lzo /input</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE28.tmp.jpg" alt="img"> </p><p>执行wordcount程序(如果执行不成功，hadoop配置就有问题，请重新配置)：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hadoop jar /root/soft/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount -Dmapreduce.job.inputformat.class<span class="token operator">=</span>com.hadoop.mapreduce.LzoTextInputFormat /input /output1</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE29.tmp.jpg" alt="img"> </p><p>执行成功后查看output1中是否有文件(没有文件就是执行失败)：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdfs dfs -ls /output1</code></pre><p>对bigtable.lzo文件索引：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hadoop jar /root/soft/hadoop/share/hadoop/common/hadoop-lzo-0.4.20.jar com.hadoop.compression.lzo.DistributedLzoIndexer /input/bigtable.lzo</code></pre><p>再次执行wordcount：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hadoop jar /root/soft/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount -Dmapreduce.job.inputformat.class<span class="token operator">=</span>com.hadoop.mapreduce.LzoTextInputFormat /input /output2</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE2A.tmp.jpg" alt="img"></p><h3 id="9-日志采集Flume安装配置；"><a href="#9-日志采集Flume安装配置；" class="headerlink" title="(9).日志采集Flume安装配置；"></a>(9).日志采集Flume安装配置；</h3><p>上传flume安装包并解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-flume-1.9.0-bin.tar.gz -C /root/soft</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE3B.tmp.jpg" alt="img"> </p><p>切换到soft目录并重命名flume：cd &#x2F;root&#x2F;soft</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> apache-flume-1.9.0-bin flume</code></pre><p><strong>最好不要使用软连接，后面使用flume可能会报如下图错误：</strong></p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE3C.tmp.jpg" alt="img"> </p><p>删除flume的lib下的guava-11.0.2.jar：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> flume/lib<span class="token function">rm</span> guava-11.0.2.jar</code></pre><p>切换到conf目录：cd ..</p><p>修改flume-env.sh.template名为flume-env.sh并配置:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> flume-env.sh.template flume-env.sh<span class="token function">vim</span> flume-env.sh<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/root/soft/jdk</code></pre><h3 id="10-配置采集日志的conf文件；"><a href="#10-配置采集日志的conf文件；" class="headerlink" title="(10).配置采集日志的conf文件；"></a>(10).配置采集日志的conf文件；</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到flume下的conf：</span><span class="token builtin class-name">cd</span> /root/soft/flume/conf<span class="token comment">#创建file-flume-kafka.conf：</span><span class="token function">vim</span> file-flume-kafka.conf</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE3D.tmp.jpg" alt="img"> </p><p>编写flume拦截器（展示部分代码）：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE3E.tmp.jpg" alt="img"> </p><p>打jar包：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE3F.tmp.jpg" alt="img"> </p><p>上传至flume的lib目录：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE40.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#分发flume：</span>xsync flume<span class="token comment">#启动zookeeper和kafka：</span>zk.sh kf.sh<span class="token comment">#在hadoop1和hadoop2上启动flume：</span><span class="token comment">#切换到flume目录：</span><span class="token builtin class-name">cd</span> /root/soft/flume<span class="token comment"># 启动</span>bin/flume-ng agent --name a1 --conf-file conf/file-flume-kafka.conf <span class="token operator">&amp;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE41.tmp.jpg" alt="img"> </p><p>在hadoop3上的kafka中查看是否有数据存在，切换到kafka目录下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-console-consumer.sh --bootstrap-server hadoop1:9092 --topic topic_log</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE42.tmp.jpg" alt="img"> </p><p>编写日志采集flume启停脚本：cd &#x2F;root&#x2F;bin</p><p>vim f1.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> 采集flume-------"</span>                <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"nohup /root/soft/flume/bin/flume-ng agent --conf-file /root/soft/flume/conf/file-flume-kafka.conf --name a1 -Dflume.root.logger=INFO,LOGFILE >/root/soft/flume/log1.txt 2>&amp;1  &amp;"</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> 采集flume-------"</span>                <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"ps -ef | grep file-flume-kafka | grep -v grep |awk  '&#123;print \<span class="token variable">$2</span>&#125;' | xargs -n1 kill -9 "</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE43.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> f1.sh<span class="token comment">#在hadoop3上flume的conf目录创建</span><span class="token function">vim</span> kafka-flume-hdfs.conf<span class="token comment"># 进入conf文件夹</span><span class="token builtin class-name">cd</span> /root/soft/flume/conf<span class="token comment">#创建kafka-flume-hdfs.conf</span><span class="token function">vim</span> kafka-flume-hdfs.conf</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE44.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE45.tmp.jpg" alt="img"> </p><p>编写日志消费flume启停脚本：vim f2.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop3        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> 消费flume-------"</span>                <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"nohup /root/soft/flume/bin/flume-ng agent --conf-file /root/soft/flume/conf/kafka-flume-hdfs.conf --name a1 -Dflume.root.logger=INFO,LOGFILE >/root/soft/flume/log2.txt   2>&amp;1 &amp;"</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop3        <span class="token keyword">do</span>                <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> 消费flume-------"</span>                <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"ps -ef | grep kafka-flume-hdfs | grep -v grep |awk '&#123;print \<span class="token variable">$2</span>&#125;' | xargs -n1 kill"</span>        <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE46.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> f2.sh</code></pre><p>编写通道启脚本：</p><p>vim cluster.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 启动 集群 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>        <span class="token comment">#启动 Zookeeper集群</span>        zk.sh start        <span class="token comment">#启动 Hadoop集群</span>        hdp.sh start        <span class="token comment">#启动 Kafka采集集群</span>        kf.sh start        <span class="token comment">#启动 Flume采集集群</span>        f1.sh start        <span class="token comment">#启动 Flume消费集群</span>        f2.sh start        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 停止 集群 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>        <span class="token comment">#停止 Flume消费集群</span>        f2.sh stop        <span class="token comment">#停止 Flume采集集群</span>        f1.sh stop        <span class="token comment">#停止 Kafka采集集群</span>        kf.sh stop        <span class="token comment">#停止 Hadoop集群</span>        hdp.sh stop        <span class="token comment">#停止 Zookeeper集群</span>        zk.sh stop<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE56.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE57.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> cluster.sh<span class="token comment">#启动日志采集通道：</span>cluster.sh start<span class="token comment">#执行lg.sh：</span>lg.sh</code></pre><p>查看网页端是否有数据存在：hadoop1:9870</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE58.tmp.jpg" alt="img"> </p><p>切换到applog修改application.properties中的业务日期为15：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/soft/applog/<span class="token function">vim</span> application.properties</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE59.tmp.jpg" alt="img"> </p><p>执行lg.sh：lg.sh</p><p>观察网页端是否有数据存在：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE5A.tmp.jpg" alt="img"> </p><h2 id="2-业务数据采集平台；"><a href="#2-业务数据采集平台；" class="headerlink" title="2.业务数据采集平台；"></a>2.业务数据采集平台；</h2><h3 id="1-安装mysql（参考如下网址）；"><a href="#1-安装mysql（参考如下网址）；" class="headerlink" title="(1).安装mysql（参考如下网址）；"></a>(1).安装mysql（参考如下网址）；</h3><p><a href="https://blog.chengdashi.cn/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/">docker 安装mysql</a></p><h3 id="2-连接navicat并创建gmall数据库："><a href="#2-连接navicat并创建gmall数据库：" class="headerlink" title="(2).连接navicat并创建gmall数据库："></a>(2).连接navicat并创建gmall数据库：</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE5B.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE5C.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE5D.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE5E.tmp.jpg" alt="img"> </p><p>生成业务数据，在soft目录下创建db_log目录；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/soft/db_log</code></pre><p>上传gmall2020-mock-db-2020-05-18.jar、application.properties到db_log；</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE5F.tmp.jpg" alt="img"> </p><p>修改application.properties配置：vim application.properties</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE70.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash">mock.date<span class="token operator">=</span><span class="token number">2020</span>-06-14mock.clear<span class="token operator">=</span><span class="token number">1</span></code></pre><p>执行命令生成2020-06-14日期数据:</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar gmall2020-mock-db-2020-05-18.jar </code></pre><p>修改application.properties配置文件，重新执行命令生成2020-06-15日期数据：</p><pre class="language-bash" data-language="bash"><code class="language-bash">mock.date<span class="token operator">=</span><span class="token number">2020</span>-06-15mock.clear<span class="token operator">=</span><span class="token number">0</span>java -jar gmall2020-mock-db-2020-05-18.jar </code></pre><h3 id="3-sqoop安装；"><a href="#3-sqoop安装；" class="headerlink" title="(3).sqoop安装；"></a>(3).sqoop安装；</h3><p>上传sqoop安装包并解压：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE71.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz -C /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s sqoop-1.4.7.bin__hadoop-2.6.0 sqoop</code></pre><p>进入sqoop&#x2F;conf目录，重命名sqoop-env-template.sh为sqoop-env.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> sqoop-env-template.sh sqoop-env.sh</code></pre><p>并修改配置文件:cd &#x2F;root&#x2F;soft&#x2F;sqoop&#x2F;conf</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> sqoop-env.sh</code></pre><p>修改：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_COMMON_HOME</span><span class="token operator">=</span>/root/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_MAPRED_HOME</span><span class="token operator">=</span>/root/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=</span>/root/soft/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/root/soft/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOCFGDIR</span><span class="token operator">=</span>/root/soft/zookeeper/conf</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE72.tmp.jpg" alt="img"> </p><p>拷贝JDBC驱动，上传驱动并拷贝到sqoop的lib下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql-connector-java-5.1.46.jar /root/soft/sqoop/lib</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE73.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#验证sqoop，进入到sqoop目录：</span><span class="token builtin class-name">cd</span> /root/soft/sqoop<span class="token comment">#执行sqoop命令：</span>bin/sqoop <span class="token builtin class-name">help</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE74.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#测试sqoop是否能够成功连接数据库：</span>bin/sqoop list-databases --connect jdbc:mysql://hadoop1:3306/ --username root --password <span class="token number">123456</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE75.tmp.jpg" alt="img"> </p><h3 id="4-业务数据导入HDFS；"><a href="#4-业务数据导入HDFS；" class="headerlink" title="(4).业务数据导入HDFS；"></a>(4).业务数据导入HDFS；</h3><p>在root&#x2F;bin下编写mysql_to_hdfs.sh脚本（展示部分需要修改的代码）：vim mysql_to_hdfs.sh</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE76.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> mysql_to_hdfs.sh<span class="token comment">#初次导入：</span>mysql_to_hdfs.sh first <span class="token number">2020</span>-06-14<span class="token comment">#每日导入：</span>mysql_to_hdfs.sh all <span class="token number">2020</span>-06-15</code></pre><h3 id="5-安装hive（只能安装尚硅谷提供的hive-3-1-2）；"><a href="#5-安装hive（只能安装尚硅谷提供的hive-3-1-2）；" class="headerlink" title="(5).安装hive（只能安装尚硅谷提供的hive-3.1.2）；"></a>(5).安装hive（只能安装尚硅谷提供的hive-3.1.2）；</h3><p>上传jar包，并解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-hive-3.1.2-bin.tar.gz -C /root/soft<span class="token comment"># 进入soft目录</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s apache-hive-3.1.2-bin hive</code></pre><p>添加环境变量hive、spark：vim ~&#x2F;.bashrc</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=~</span>/soft/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HIVE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_HOME</span><span class="token operator">=</span>/root/soft/spark<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$SPARK_HOME</span>/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$SPARK_HOME</span>/sbin</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE77.tmp.jpg" alt="img"> </p><p>使环境变量生效：source ~&#x2F;.bashrc</p><p>解决&#x2F;root&#x2F;soft&#x2F;hive&#x2F;lib下的日志jar包冲突：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> log4j-slf4j-impl-2.10.0.jar log4j-slf4j-impl-2.10.0.jar.bak</code></pre><p>拷贝mysql驱动到&#x2F;root&#x2F;soft&#x2F;hive&#x2F;lib目录下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql-connector-java-5.1.46.jar /root/soft/hive/lib</code></pre><p>配置Metastore到mysql，在&#x2F;root&#x2F;soft&#x2F;hive&#x2F;conf目录下创建hive-site.xml，添加如下内容（截取部分代码）：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://hadoop1:3306/metastore?useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/hive/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.schema.verification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.thrift.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.thrift.bind.host<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.event.db.notification.api.auth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.cli.print.header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.cli.print.current.db<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Spark依赖位置（注意：端口号8020必须和namenode的端口号一致）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spark.yarn.jars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020/spark-jars/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Hive执行引擎--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.execution.engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Hive和Spark连接超时时间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.spark.client.connect.timeout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10000ms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE78.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE79.tmp.jpg" alt="img"> </p><p>初始化元数据库，创建mysql数据库metastore：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE7A.tmp.jpg" alt="img"> </p><p>初始化命令： schematool -initSchema -dbType mysql -verbose</p><p>启动hive客户端：hive</p><p>查看数据库：show databases；</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE7B.tmp.jpg" alt="img"> </p><h3 id="6-配置Yarn容量调度器多队列"><a href="#6-配置Yarn容量调度器多队列" class="headerlink" title="(6)配置Yarn容量调度器多队列"></a>(6)配置Yarn容量调度器多队列</h3><h4 id="1-修改容量调度器配置文件"><a href="#1-修改容量调度器配置文件" class="headerlink" title="1,修改容量调度器配置文件"></a>1,修改容量调度器配置文件</h4><blockquote><p>默认Yarn的配置下，容量调度器只有一条default队列。在capacity-scheduler.xml中可以配置多条队列，****修改****以下属性，增加hive队列。</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.queues<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>default,hive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>     再增加一个hive队列    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.default.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      default队列的容量为50%    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>同时为新加队列****添加****必要属性：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列的容量为50%    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.user-limit-factor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      一个用户最多能够获取该队列资源容量的比例，取值0-1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.maximum-capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列的最大容量（自己队列资源不够，可以使用其他队列资源上限）    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.state<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>RUNNING<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      开启hive队列运行，不设置队列不能使用    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.acl_submit_applications<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      访问控制，控制谁可以将任务提交到该队列,*表示任何人    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.acl_administer_queue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      访问控制，控制谁可以管理(包括提交和取消)该队列的任务，*表示任何人    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.acl_application_max_priority<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      指定哪个用户可以提交配置任务优先级    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.maximum-application-lifetime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列中任务的最大生命时长，以秒为单位。任何小于或等于零的值将被视为禁用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.default-application-lifetime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列中任务的默认生命时长，以秒为单位。任何小于或等于零的值将被视为禁用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h4 id="2、分发配置文件"><a href="#2、分发配置文件" class="headerlink" title="2、分发配置文件"></a>2、分发配置文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash">xsync /root/soft/hadoop-3.1./etc/hadoop/capacity-scheduler.xml</code></pre><h2 id="3-数据仓库系统；"><a href="#3-数据仓库系统；" class="headerlink" title="3.数据仓库系统；"></a>3.数据仓库系统；</h2><h3 id="1-部署hive-on-spark；"><a href="#1-部署hive-on-spark；" class="headerlink" title="(1).部署hive on spark；"></a>(1).部署hive on spark；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE7C.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE8D.tmp.jpg" alt="img"> </p><p>上传spark安装包（必须使用尚硅谷提供的安装包一个包为纯净版）并解压：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE8E.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf spark-3.0.0-bin-hadoop3.2.tgz -C /root/soft<span class="token function">tar</span> -zxvf spark-3.0.0-bin-without-hadoop.tgz -C /root/soft<span class="token comment"># 进入soft目录</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s spark-3.0.0-bin-hadoop3.2 spark</code></pre><p>在hive中创建spark配置文件：</p><p>vim &#x2F;root&#x2F;soft&#x2F;hive&#x2F;conf&#x2F;spark-defaults.conf</p><pre class="language-bash" data-language="bash"><code class="language-bash">spark.master                    <span class="token function">yarn</span>spark.eventLog.enabled          <span class="token boolean">true</span>spark.eventLog.dir              hdfs://hadoop1:8020/spark-historyspark.executor.memory           1gspark.driver.memory             1g</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE8F.tmp.jpg" alt="img"> </p><p>在HDFS创建如下路径：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdfs dfs -mkdir /spark-historyhdfs dfs -mkdir /spark-jars</code></pre><p>上传spark纯净版jar包到hdfs</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdfs dfs -put /root/soft/spark-3.0.0-bin-without-hadoop/jars/*  /spark-jars</code></pre><p>运行hive on spark之前需要更改，否则会报以下错误：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE90.tmp.jpg" alt="img"> </p><p>在&#x2F;root&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml中配置：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.pmem-check-enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.vmem-check-enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE91.tmp.jpg" alt="img"> </p><p>同步到hadoop2、hadoop3：</p><pre class="language-bash" data-language="bash"><code class="language-bash">xsync yarn-site.xml</code></pre><p>进入&#x2F;root&#x2F;soft&#x2F;spark&#x2F;conf</p><p>将spark-env.sh.template 复制一份：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> spark-env.sh.template spark-env.sh</code></pre><p>然后在spark-env.sh中配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_DIST_CLASSPATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>hadoop classpath<span class="token variable">)</span></span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE92.tmp.jpg" alt="img"> </p><p>启动hive客户端，并进行hive on spark测试；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hive客户端命令：</span>hive<span class="token comment">#创建表：</span>create table student<span class="token punctuation">(</span>id int, name string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入数据： </span>insert into table student values<span class="token punctuation">(</span><span class="token number">1</span>,<span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE93.tmp.jpg" alt="img"> </p><p>上图表示spark测试成功；</p><p>创建gmall数据库：create database gmall;</p><h3 id="2-启动hiveserver2，连接idea，"><a href="#2-启动hiveserver2，连接idea，" class="headerlink" title="(2).启动hiveserver2，连接idea，"></a>(2).启动hiveserver2，连接idea，</h3><p>启动命令：hiveserver2</p><p>等待跑出4个session，连接idea：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE95.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE94.tmp.jpg" alt="img"> </p><p>测试连接：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE96.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEE97.tmp.jpg" alt="img"> </p><p>连接成功就可以使用了。</p><p>如果出现：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/image-20220618150714310.png" alt="image-20220618150714310"></p><p>则需要：</p><p>修改 $HADOOP_HOME&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml 配置文件，添加如下配置：</p><pre class="language-markup" data-language="markup"><code class="language-markup"> <span class="token comment">&lt;!--远程登录 hive --></span>  <span class="token comment">&lt;!--下面的 hadoop 是用户名和用户组，用自己的就可以--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.root.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.root.groups<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>分发core-site.xml</p><pre class="language-bash" data-language="bash"><code class="language-bash">xsync /root/soft/hadoop/etc/hadoop/core-site.xml</code></pre><p>重启hadoop集群：hdp.sh stop</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdp.sh start</code></pre><p>重新测试连接</p><h3 id="3-创建UDTF函数；"><a href="#3-创建UDTF函数；" class="headerlink" title="(3).创建UDTF函数；"></a>(3).创建UDTF函数；</h3><p>创建一个maven工程：hivefunction</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/image-20220618172825987.png" alt="image-20220618172825987"></p><p>在pom.xml 添加hive依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--添加hive依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hive-exec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>创建ExplodeJSONArray类：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/image-20220618174653107.png" alt="image-20220618174653107"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>udtf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span></span><span class="token class-name">UDFArgumentException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">HiveException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>generic<span class="token punctuation">.</span></span><span class="token class-name">GenericUDTF</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>serde2<span class="token punctuation">.</span>objectinspector<span class="token punctuation">.</span></span><span class="token class-name">ObjectInspector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>serde2<span class="token punctuation">.</span>objectinspector<span class="token punctuation">.</span></span><span class="token class-name">ObjectInspectorFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>serde2<span class="token punctuation">.</span>objectinspector<span class="token punctuation">.</span></span><span class="token class-name">StructObjectInspector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>serde2<span class="token punctuation">.</span>objectinspector<span class="token punctuation">.</span>primitive<span class="token punctuation">.</span></span><span class="token class-name">PrimitiveObjectInspectorFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONArray</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/6/18 17:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExplodeJSONArray</span> <span class="token keyword">extends</span> <span class="token class-name">GenericUDTF</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">StructObjectInspector</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">StructObjectInspector</span> argOIs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UDFArgumentException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 参数合法性检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>argOIs<span class="token punctuation">.</span><span class="token function">getAllStructFieldRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UDFArgumentException</span><span class="token punctuation">(</span><span class="token string">"ExplodeJSONArray 只需要一个参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2 第一个参数必须为string</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"string"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>argOIs<span class="token punctuation">.</span><span class="token function">getAllStructFieldRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldObjectInspector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UDFArgumentException</span><span class="token punctuation">(</span><span class="token string">"json_array_to_struct_array的第1个参数应为string类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3 定义返回值名称和类型</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fieldNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectInspector</span><span class="token punctuation">></span></span> fieldOIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectInspector</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fieldNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fieldOIs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">PrimitiveObjectInspectorFactory</span><span class="token punctuation">.</span>javaStringObjectInspector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ObjectInspectorFactory</span><span class="token punctuation">.</span><span class="token function">getStandardStructObjectInspector</span><span class="token punctuation">(</span>fieldNames<span class="token punctuation">,</span> fieldOIs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HiveException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 获取传入的数据</span>        <span class="token class-name">String</span> jsonArray <span class="token operator">=</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2 将string转换为json数组</span>        <span class="token class-name">JSONArray</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3 循环一次，取出数组中的一个json，并写出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> actions<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">forward</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HiveException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在HDFS 创建&#x2F;user&#x2F;hive&#x2F;jars 文件夹</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdfs dfs -mkdir -p /user/hive/jars</code></pre><p>打包上传到HDFS的&#x2F;user&#x2F;hive&#x2F;jars路径下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hdfs dfs -put hivefunction-1.0-SNAPSHOT.jar /user/hive/jars</code></pre><p>刚才idea已经连接了hive：</p><p>先使用use gmall ：</p><p>然后在hive里面创建永久函数：</p><pre class="language-bash" data-language="bash"><code class="language-bash">create <span class="token keyword">function</span> explode_json_array as <span class="token string">'com.example.hive.udtf.ExplodeJSONArray'</span> using jar <span class="token string">'hdfs://hadoop1:8020/user/hive/jars/hivefunction-1.0-SNAPSHOT.jar'</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/image-20220618180614182.png" alt="image-20220618180614182"></p><h3 id="4-建ODS层-用户行为数据-表；"><a href="#4-建ODS层-用户行为数据-表；" class="headerlink" title="(4).建ODS层(用户行为数据)表；"></a>(4).建ODS层(用户行为数据)表；</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> ods_log<span class="token punctuation">;</span><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> ods_log <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>line<span class="token punctuation">`</span></span> string<span class="token punctuation">)</span>    PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>dt<span class="token punctuation">`</span></span> string<span class="token punctuation">)</span> <span class="token comment">-- 按照时间创建分区</span>    STORED <span class="token keyword">AS</span> <span class="token comment">-- 指定存储方式，读数据采用LzoTextInputFormat；</span>        INPUTFORMAT <span class="token string">'com.hadoop.mapred.DeprecatedLzoTextInputFormat'</span>        OUTPUTFORMAT <span class="token string">'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'</span>    LOCATION <span class="token string">'/warehouse/gmall/ods/ods_log'</span>  <span class="token comment">-- 指定数据在hdfs上的存储位置</span><span class="token punctuation">;</span><span class="token comment">-- 加载数据</span><span class="token keyword">load</span> <span class="token keyword">data</span> inpath <span class="token string">'/origin_data/gmall/log/topic_log/2020-06-14'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> ods_log <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2020-06-14'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看是否加载成功</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ods_log <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>在&#x2F;root&#x2F;bin下创建脚本：vim hdfs_to_ods_log.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 定义变量方便修改</span><span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token assign-left variable">hadoop</span><span class="token operator">=</span>/root/soft/hadoop/bin/hadoop<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>   <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">else</span>   <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 日志日期为 <span class="token variable">$do_date</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token assign-left variable">sql</span><span class="token operator">=</span><span class="token string">"load data inpath '/origin_data/<span class="token variable">$APP</span>/log/topic_log/<span class="token variable">$do_date</span>' into table <span class="token variable">$&#123;APP&#125;</span>.ods_log partition(dt='<span class="token variable">$do_date</span>');"</span><span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql</span>"</span><span class="token variable">$hadoop</span> jar /root/soft/hadoop/share/hadoop/common/hadoop-lzo-0.4.20.jar com.hadoop.compression.lzo.DistributedLzoIndexer -Dmapreduce.job.queuename<span class="token operator">=</span>hive /warehouse/<span class="token variable">$APP</span>/ods/ods_log/dt<span class="token operator">=</span><span class="token variable">$do_date</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEAB.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> hdfs_to_ods_log.sh<span class="token comment">#使用脚本：</span>hdfs_to_ods_log.sh <span class="token number">2020</span>-06-15</code></pre><p>查看数据：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ods_log <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'2020-06-15'</span> <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>创建ODS层业务数据表，仅展示部分sql代码;</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEAC.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEAD.tmp.jpg" alt="img"> </p><p>创建ODS数据加载脚本：vim hdfs_to_ods_db.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token keyword">else</span>     <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token assign-left variable">sql1</span><span class="token operator">=</span><span class="token string">" load data inpath '/origin_data/<span class="token variable">$APP</span>/db/order_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_order_info partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/order_detail/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_order_detail partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/sku_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_sku_info partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/user_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_user_info partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/payment_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_payment_info partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_category1/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_category1 partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_category2/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_category2 partition(dt='<span class="token variable">$do_date</span>');load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_category3/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_category3 partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_trademark/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_trademark partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/activity_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_activity_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/activity_order/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_activity_order partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/cart_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_cart_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/comment_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_comment_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/coupon_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_coupon_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/coupon_use/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_coupon_use partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/favor_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_favor_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/order_refund_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_order_refund_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/order_status_log/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_order_status_log partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/spu_info/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_spu_info partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/activity_rule/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_activity_rule partition(dt='<span class="token variable">$do_date</span>'); load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_dic/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_dic partition(dt='<span class="token variable">$do_date</span>'); "</span><span class="token assign-left variable">sql2</span><span class="token operator">=</span><span class="token string">" load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_province/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_province;load data inpath '/origin_data/<span class="token variable">$APP</span>/db/base_region/<span class="token variable">$do_date</span>' OVERWRITE into table <span class="token variable">$&#123;APP&#125;</span>.ods_base_region;"</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql1</span><span class="token variable">$sql2</span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql1</span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEAE.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> hdfs_to_ods_db.sh<span class="token comment">#运行脚本加载数据初次导入：</span>hdfs_to_ods_db.sh first <span class="token number">2020</span>-06-14<span class="token comment">#运行脚本加载数据每日导入：</span>hdfs_to_ods_db.sh all <span class="token number">2020</span>-06-15</code></pre><p>测试是否成功导入数据： </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ods_order_detail <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'2020-06-15'</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEAF.tmp.jpg" alt="img"> </p><h3 id="5-建DWD层-用户行为日志解析-表；"><a href="#5-建DWD层-用户行为日志解析-表；" class="headerlink" title="(5).建DWD层(用户行为日志解析)表；"></a>(5).建DWD层(用户行为日志解析)表；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEB0.tmp.jpg" alt="img"> </p><p>仅展示部分sql代码，创建加载数据脚本：vim ods_to_dwd_log.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">else</span>     <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token assign-left variable">sql</span><span class="token operator">=</span><span class="token string">"SET mapreduce.job.queuename=hive;SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_start_log partition(dt='<span class="token variable">$do_date</span>')select     get_json_object(line,'$.common.ar'),    get_json_object(line,'$.common.ba'),    get_json_object(line,'$.common.ch'),    get_json_object(line,'$.common.md'),    get_json_object(line,'$.common.mid'),    get_json_object(line,'$.common.os'),    get_json_object(line,'$.common.uid'),    get_json_object(line,'$.common.vc'),    get_json_object(line,'$.start.entry'),    get_json_object(line,'$.start.loading_time'),    get_json_object(line,'$.start.open_ad_id'),    get_json_object(line,'$.start.open_ad_ms'),    get_json_object(line,'$.start.open_ad_skip_ms'),    get_json_object(line,'$.ts')from <span class="token variable">$&#123;APP&#125;</span>.ods_logwhere dt='<span class="token variable">$do_date</span>'and get_json_object(line,'$.start') is not null;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_action_log partition(dt='<span class="token variable">$do_date</span>')select    get_json_object(line,'$.common.ar'),    get_json_object(line,'$.common.ba'),    get_json_object(line,'$.common.ch'),    get_json_object(line,'$.common.md'),    get_json_object(line,'$.common.mid'),    get_json_object(line,'$.common.os'),    get_json_object(line,'$.common.uid'),    get_json_object(line,'$.common.vc'),    get_json_object(line,'$.page.during_time'),    get_json_object(line,'$.page.item'),    get_json_object(line,'$.page.item_type'),    get_json_object(line,'$.page.last_page_id'),    get_json_object(line,'$.page.page_id'),    get_json_object(line,'$.page.sourceType'),    get_json_object(action,'$.action_id'),    get_json_object(action,'$.item'),    get_json_object(action,'$.item_type'),    get_json_object(action,'$.ts')from <span class="token variable">$&#123;APP&#125;</span>.ods_log lateral view <span class="token variable">$&#123;APP&#125;</span>.explode_json_array(get_json_object(line,'$.actions')) tmp as actionwhere dt='<span class="token variable">$do_date</span>'and get_json_object(line,'$.actions') is not null;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_display_log partition(dt='<span class="token variable">$do_date</span>')select    get_json_object(line,'$.common.ar'),    get_json_object(line,'$.common.ba'),    get_json_object(line,'$.common.ch'),    get_json_object(line,'$.common.md'),    get_json_object(line,'$.common.mid'),    get_json_object(line,'$.common.os'),    get_json_object(line,'$.common.uid'),    get_json_object(line,'$.common.vc'),    get_json_object(line,'$.page.during_time'),    get_json_object(line,'$.page.item'),    get_json_object(line,'$.page.item_type'),    get_json_object(line,'$.page.last_page_id'),    get_json_object(line,'$.page.page_id'),    get_json_object(line,'$.page.sourceType'),    get_json_object(line,'$.ts'),    get_json_object(display,'$.displayType'),    get_json_object(display,'$.item'),    get_json_object(display,'$.item_type'),    get_json_object(display,'$.order')from <span class="token variable">$&#123;APP&#125;</span>.ods_log lateral view <span class="token variable">$&#123;APP&#125;</span>.explode_json_array(get_json_object(line,'$.displays')) tmp as displaywhere dt='<span class="token variable">$do_date</span>'and get_json_object(line,'$.displays') is not null;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_page_log partition(dt='<span class="token variable">$do_date</span>')select    get_json_object(line,'$.common.ar'),    get_json_object(line,'$.common.ba'),    get_json_object(line,'$.common.ch'),    get_json_object(line,'$.common.md'),    get_json_object(line,'$.common.mid'),    get_json_object(line,'$.common.os'),    get_json_object(line,'$.common.uid'),    get_json_object(line,'$.common.vc'),    get_json_object(line,'$.page.during_time'),    get_json_object(line,'$.page.item'),    get_json_object(line,'$.page.item_type'),    get_json_object(line,'$.page.last_page_id'),    get_json_object(line,'$.page.page_id'),    get_json_object(line,'$.page.sourceType'),    get_json_object(line,'$.ts')from <span class="token variable">$&#123;APP&#125;</span>.ods_logwhere dt='<span class="token variable">$do_date</span>'and get_json_object(line,'$.page') is not null;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_error_log partition(dt='<span class="token variable">$do_date</span>')select    get_json_object(line,'$.common.ar'),    get_json_object(line,'$.common.ba'),    get_json_object(line,'$.common.ch'),    get_json_object(line,'$.common.md'),    get_json_object(line,'$.common.mid'),    get_json_object(line,'$.common.os'),    get_json_object(line,'$.common.uid'),    get_json_object(line,'$.common.vc'),    get_json_object(line,'$.page.item'),    get_json_object(line,'$.page.item_type'),    get_json_object(line,'$.page.last_page_id'),    get_json_object(line,'$.page.page_id'),    get_json_object(line,'$.page.sourceType'),    get_json_object(line,'$.start.entry'),    get_json_object(line,'$.start.loading_time'),    get_json_object(line,'$.start.open_ad_id'),    get_json_object(line,'$.start.open_ad_ms'),    get_json_object(line,'$.start.open_ad_skip_ms'),    get_json_object(line,'$.actions'),    get_json_object(line,'$.displays'),    get_json_object(line,'$.ts'),    get_json_object(line,'$.err.error_code'),    get_json_object(line,'$.err.msg')from <span class="token variable">$&#123;APP&#125;</span>.ods_log where dt='<span class="token variable">$do_date</span>'and get_json_object(line,'$.err') is not null;"</span><span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql</span>"</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEB1.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> ods_to_dwd_log.sh<span class="token comment">#执行脚本加载数据：</span>ods_to_dwd_log.sh <span class="token number">2020</span>-06-15</code></pre><p>查询导入结果：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dwd_start_log <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'2020-06-15'</span> <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>DWD层业务数据表，仅展示部分sql代码;</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEB2.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEB3.tmp.jpg" alt="img"> </p><p>创建DWD数据加载脚本：vim ods_to_dwd_db.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token keyword">else</span>     <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token assign-left variable">sql1</span><span class="token operator">=</span><span class="token string">"set mapreduce.job.queuename=hive;set hive.exec.dynamic.partition.mode=nonstrict;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_sku_info partition(dt='<span class="token variable">$do_date</span>')select      sku.id,    sku.spu_id,    sku.price,    sku.sku_name,    sku.sku_desc,    sku.weight,    sku.tm_id,    ob.tm_name,    sku.category3_id,    c2.id category2_id,    c1.id category1_id,    c3.name category3_name,    c2.name category2_name,    c1.name category1_name,    spu.spu_name,    sku.create_timefrom(    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_sku_info where dt='<span class="token variable">$do_date</span>')skujoin(    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_base_trademark where dt='<span class="token variable">$do_date</span>')ob on sku.tm_id=ob.tm_idjoin(    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_spu_info where dt='<span class="token variable">$do_date</span>')spu on spu.id = sku.spu_idjoin (    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_base_category3 where dt='<span class="token variable">$do_date</span>')c3 on sku.category3_id=c3.idjoin (    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_base_category2 where dt='<span class="token variable">$do_date</span>')c2 on c3.category2_id=c2.id join (    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_base_category1 where dt='<span class="token variable">$do_date</span>')c1 on c2.category1_id=c1.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_coupon_info partition(dt='<span class="token variable">$do_date</span>')select    id,    coupon_name,    coupon_type,    condition_amount,    condition_num,    activity_id,    benefit_amount,    benefit_discount,    create_time,    range_type,    spu_id,    tm_id,    category3_id,    limit_num,    operate_time,    expire_timefrom <span class="token variable">$&#123;APP&#125;</span>.ods_coupon_infowhere dt='<span class="token variable">$do_date</span>';insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_activity_info partition(dt='<span class="token variable">$do_date</span>')select    id,    activity_name,    activity_type,    start_time,    end_time,    create_timefrom <span class="token variable">$&#123;APP&#125;</span>.ods_activity_info where dt='<span class="token variable">$do_date</span>';insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_order_detail partition(dt='<span class="token variable">$do_date</span>')select    id,    order_id,    user_id,    sku_id,    sku_num,    order_price,    sku_num,    create_time,    province_id,    source_type,    source_id,    original_amount_d,    if(rn=1,final_total_amount-(sum_div_final_amount-final_amount_d),final_amount_d),    if(rn=1,feight_fee-(sum_div_feight_fee-feight_fee_d),feight_fee_d),    if(rn=1,benefit_reduce_amount-(sum_div_benefit_reduce_amount-benefit_reduce_amount_d),benefit_reduce_amount_d)from(    select        od.id,        od.order_id,        od.user_id,        od.sku_id,        od.sku_name,        od.order_price,        od.sku_num,        od.create_time,        oi.province_id,        od.source_type,        od.source_id,        round(od.order_price*od.sku_num,2) original_amount_d,        round(od.order_price*od.sku_num/oi.original_total_amount*oi.final_total_amount,2) final_amount_d,        round(od.order_price*od.sku_num/oi.original_total_amount*oi.feight_fee,2) feight_fee_d,        round(od.order_price*od.sku_num/oi.original_total_amount*oi.benefit_reduce_amount,2) benefit_reduce_amount_d,        row_number() over(partition by od.order_id order by od.id desc) rn,        oi.final_total_amount,        oi.feight_fee,        oi.benefit_reduce_amount,        sum(round(od.order_price*od.sku_num/oi.original_total_amount*oi.final_total_amount,2)) over(partition by od.order_id) sum_div_final_amount,        sum(round(od.order_price*od.sku_num/oi.original_total_amount*oi.feight_fee,2)) over(partition by od.order_id) sum_div_feight_fee,        sum(round(od.order_price*od.sku_num/oi.original_total_amount*oi.benefit_reduce_amount,2)) over(partition by od.order_id) sum_div_benefit_reduce_amount    from     (        select * from <span class="token variable">$&#123;APP&#125;</span>.ods_order_detail where dt='<span class="token variable">$do_date</span>'    ) od    join     (        select * from <span class="token variable">$&#123;APP&#125;</span>.ods_order_info where dt='<span class="token variable">$do_date</span>'    ) oi    on od.order_id=oi.id)t1;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_payment_info partition(dt='<span class="token variable">$do_date</span>')select    pi.id,    pi.out_trade_no,    pi.order_id,    pi.user_id,    pi.alipay_trade_no,    pi.total_amount,    pi.subject,    pi.payment_type,    pi.payment_time,              oi.province_idfrom(    select * from <span class="token variable">$&#123;APP&#125;</span>.ods_payment_info where dt='<span class="token variable">$do_date</span>')pijoin(    select id, province_id from <span class="token variable">$&#123;APP&#125;</span>.ods_order_info where dt='<span class="token variable">$do_date</span>')oion pi.order_id = oi.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_order_refund_info partition(dt='<span class="token variable">$do_date</span>')select    id,    user_id,    order_id,    sku_id,    refund_type,    refund_num,    refund_amount,    refund_reason_type,    create_timefrom <span class="token variable">$&#123;APP&#125;</span>.ods_order_refund_infowhere dt='<span class="token variable">$do_date</span>';insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_comment_info partition(dt='<span class="token variable">$do_date</span>')select    id,    user_id,    sku_id,    spu_id,    order_id,    appraise,    create_timefrom <span class="token variable">$&#123;APP&#125;</span>.ods_comment_infowhere dt='<span class="token variable">$do_date</span>';insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_cart_info partition(dt='<span class="token variable">$do_date</span>')select    id,    user_id,    sku_id,    cart_price,    sku_num,    sku_name,    create_time,    operate_time,    is_ordered,    order_time,    source_type,    source_idfrom <span class="token variable">$&#123;APP&#125;</span>.ods_cart_infowhere dt='<span class="token variable">$do_date</span>';insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_favor_info partition(dt='<span class="token variable">$do_date</span>')select    id,    user_id,    sku_id,    spu_id,    is_cancel,    create_time,    cancel_timefrom <span class="token variable">$&#123;APP&#125;</span>.ods_favor_infowhere dt='<span class="token variable">$do_date</span>';insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_coupon_use partition(dt)select    if(new.id is null,old.id,new.id),    if(new.coupon_id is null,old.coupon_id,new.coupon_id),    if(new.user_id is null,old.user_id,new.user_id),    if(new.order_id is null,old.order_id,new.order_id),    if(new.coupon_status is null,old.coupon_status,new.coupon_status),    if(new.get_time is null,old.get_time,new.get_time),    if(new.using_time is null,old.using_time,new.using_time),    if(new.used_time is null,old.used_time,new.used_time),    date_format(if(new.get_time is null,old.get_time,new.get_time),'yyyy-MM-dd')from(    select        id,        coupon_id,        user_id,        order_id,        coupon_status,        get_time,        using_time,        used_time    from <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_coupon_use    where dt in    (        select            date_format(get_time,'yyyy-MM-dd')        from <span class="token variable">$&#123;APP&#125;</span>.ods_coupon_use        where dt='<span class="token variable">$do_date</span>'    ))oldfull outer join(    select        id,        coupon_id,        user_id,        order_id,        coupon_status,        get_time,        using_time,        used_time    from <span class="token variable">$&#123;APP&#125;</span>.ods_coupon_use    where dt='<span class="token variable">$do_date</span>')newon old.id=new.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_order_info partition(dt)select    if(new.id is null,old.id,new.id),    if(new.order_status is null,old.order_status,new.order_status),    if(new.user_id is null,old.user_id,new.user_id),    if(new.out_trade_no is null,old.out_trade_no,new.out_trade_no),    if(new.tms['1001'] is null,old.create_time,new.tms['1001']),--1001对应未支付状态    if(new.tms['1002'] is null,old.payment_time,new.tms['1002']),    if(new.tms['1003'] is null,old.cancel_time,new.tms['1003']),    if(new.tms['1004'] is null,old.finish_time,new.tms['1004']),    if(new.tms['1005'] is null,old.refund_time,new.tms['1005']),    if(new.tms['1006'] is null,old.refund_finish_time,new.tms['1006']),    if(new.province_id is null,old.province_id,new.province_id),    if(new.activity_id is null,old.activity_id,new.activity_id),    if(new.original_total_amount is null,old.original_total_amount,new.original_total_amount),    if(new.benefit_reduce_amount is null,old.benefit_reduce_amount,new.benefit_reduce_amount),    if(new.feight_fee is null,old.feight_fee,new.feight_fee),    if(new.final_total_amount is null,old.final_total_amount,new.final_total_amount),    date_format(if(new.tms['1001'] is null,old.create_time,new.tms['1001']),'yyyy-MM-dd')from(    select        id,        order_status,        user_id,        out_trade_no,        create_time,        payment_time,        cancel_time,        finish_time,        refund_time,        refund_finish_time,        province_id,        activity_id,        original_total_amount,        benefit_reduce_amount,        feight_fee,        final_total_amount    from <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_order_info    where dt    in    (        select          date_format(create_time,'yyyy-MM-dd')        from <span class="token variable">$&#123;APP&#125;</span>.ods_order_info        where dt='<span class="token variable">$do_date</span>'    ))oldfull outer join(    select        info.id,        info.order_status,        info.user_id,        info.out_trade_no,        info.province_id,        act.activity_id,        log.tms,        info.original_total_amount,        info.benefit_reduce_amount,        info.feight_fee,        info.final_total_amount    from    (        select            order_id,            str_to_map(concat_ws(',',collect_set(concat(order_status,'=',operate_time))),',','=') tms        from <span class="token variable">$&#123;APP&#125;</span>.ods_order_status_log        where dt='<span class="token variable">$do_date</span>'        group by order_id    )log    join    (        select * from <span class="token variable">$&#123;APP&#125;</span>.ods_order_info where dt='<span class="token variable">$do_date</span>'    )info    on log.order_id=info.id    left join    (        select * from <span class="token variable">$&#123;APP&#125;</span>.ods_activity_order where dt='<span class="token variable">$do_date</span>'    )act    on log.order_id=act.order_id)newon old.id=new.id;"</span><span class="token assign-left variable">sql2</span><span class="token operator">=</span><span class="token string">"insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_base_provinceselect     bp.id,    bp.name,    bp.area_code,    bp.iso_code,    bp.region_id,    br.region_namefrom <span class="token variable">$&#123;APP&#125;</span>.ods_base_province bpjoin <span class="token variable">$&#123;APP&#125;</span>.ods_base_region bron bp.region_id=br.id;"</span><span class="token assign-left variable">sql3</span><span class="token operator">=</span><span class="token string">"insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_user_info_his_tmpselect * from (    select         id,        name,        birthday,        gender,        email,        user_level,        create_time,        operate_time,        '<span class="token variable">$do_date</span>' start_date,        '9999-99-99' end_date    from <span class="token variable">$&#123;APP&#125;</span>.ods_user_info where dt='<span class="token variable">$do_date</span>'    union all     select         uh.id,        uh.name,        uh.birthday,        uh.gender,        uh.email,        uh.user_level,        uh.create_time,        uh.operate_time,        uh.start_date,        if(ui.id is not null  and uh.end_date='9999-99-99', date_add(ui.dt,-1), uh.end_date) end_date    from <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_user_info_his uh left join     (        select            *        from <span class="token variable">$&#123;APP&#125;</span>.ods_user_info        where dt='<span class="token variable">$do_date</span>'    ) ui on uh.id=ui.id)his order by his.id, start_date;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_user_info_his select * from <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_user_info_his_tmp;"</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql1</span><span class="token variable">$sql2</span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql1</span><span class="token variable">$sql3</span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEC4.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> ods_to_dwd_db.sh<span class="token comment">#运行脚本加载数据初次导入：</span>ods_to_dwd_db.sh first <span class="token number">2020</span>-06-14<span class="token comment">#运行脚本加载数据每日导入：</span>ods_to_dwd_db.sh all <span class="token number">2020</span>-06-15</code></pre><p>查看数据是否导入：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> start_date<span class="token punctuation">,</span> end_date <span class="token keyword">from</span> dwd_dim_user_info_his <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEC5.tmp.jpg" alt="img"> </p><h3 id="6-建DWS层所有主题对象当天的汇总行为表；"><a href="#6-建DWS层所有主题对象当天的汇总行为表；" class="headerlink" title="(6).建DWS层所有主题对象当天的汇总行为表；"></a>(6).建DWS层所有主题对象当天的汇总行为表；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEC6.tmp.jpg" alt="img"> </p><p>仅展示部分sql代码，创建DWS加载数据脚本：vim dwd_to_dws.sh </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">else</span>     <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token assign-left variable">sql</span><span class="token operator">=</span><span class="token string">"set mapreduce.job.queuename=hive;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topicselect    nvl(new.mid_id,old.mid_id),    nvl(new.model,old.model),    nvl(new.brand,old.brand),    if(old.mid_id is null,'<span class="token variable">$do_date</span>',old.login_date_first),    if(new.mid_id is not null,'<span class="token variable">$do_date</span>',old.login_date_last),    if(new.mid_id is not null, new.login_count,0),    nvl(old.login_count,0)+if(new.login_count>0,1,0)from(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic)oldfull outer join(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount    where dt='<span class="token variable">$do_date</span>')newon old.mid_id=new.mid_id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_user_topicselect    nvl(new.user_id,old.user_id),    if(old.login_date_first is null and new.login_count>0,'<span class="token variable">$do_date</span>',old.login_date_first),    if(new.login_count>0,'<span class="token variable">$do_date</span>',old.login_date_last),    nvl(old.login_count,0)+if(new.login_count>0,1,0),    nvl(new.login_last_30d_count,0),    if(old.order_date_first is null and new.order_count>0,'<span class="token variable">$do_date</span>',old.order_date_first),    if(new.order_count>0,'<span class="token variable">$do_date</span>',old.order_date_last),    nvl(old.order_count,0)+nvl(new.order_count,0),    nvl(old.order_amount,0)+nvl(new.order_amount,0),    nvl(new.order_last_30d_count,0),    nvl(new.order_last_30d_amount,0),    if(old.payment_date_first is null and new.payment_count>0,'<span class="token variable">$do_date</span>',old.payment_date_first),    if(new.payment_count>0,'<span class="token variable">$do_date</span>',old.payment_date_last),    nvl(old.payment_count,0)+nvl(new.payment_count,0),    nvl(old.payment_amount,0)+nvl(new.payment_amount,0),    nvl(new.payment_last_30d_count,0),    nvl(new.payment_last_30d_amount,0)from<span class="token variable">$&#123;APP&#125;</span>.dwt_user_topic oldfull outer join(    select        user_id,        sum(if(dt='<span class="token variable">$do_date</span>',login_count,0)) login_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_count,0)) order_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_amount,0)) order_amount,        sum(if(dt='<span class="token variable">$do_date</span>',payment_count,0)) payment_count,        sum(if(dt='<span class="token variable">$do_date</span>',payment_amount,0)) payment_amount,        sum(if(login_count>0,1,0)) login_last_30d_count,        sum(order_count) order_last_30d_count,        sum(order_amount) order_last_30d_amount,        sum(payment_count) payment_last_30d_count,        sum(payment_amount) payment_last_30d_amount    from <span class="token variable">$&#123;APP&#125;</span>.dws_user_action_daycount    where dt>=date_add( '<span class="token variable">$do_date</span>',-30)    group by user_id)newon old.user_id=new.user_id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topicselect     nvl(new.sku_id,old.sku_id),    sku_info.spu_id,    nvl(new.order_count30,0),    nvl(new.order_num30,0),    nvl(new.order_amount30,0),    nvl(old.order_count,0) + nvl(new.order_count,0),    nvl(old.order_num,0) + nvl(new.order_num,0),    nvl(old.order_amount,0) + nvl(new.order_amount,0),    nvl(new.payment_count30,0),    nvl(new.payment_num30,0),    nvl(new.payment_amount30,0),    nvl(old.payment_count,0) + nvl(new.payment_count,0),    nvl(old.payment_num,0) + nvl(new.payment_num,0),    nvl(old.payment_amount,0) + nvl(new.payment_amount,0),    nvl(new.refund_count30,0),    nvl(new.refund_num30,0),    nvl(new.refund_amount30,0),    nvl(old.refund_count,0) + nvl(new.refund_count,0),    nvl(old.refund_num,0) + nvl(new.refund_num,0),    nvl(old.refund_amount,0) + nvl(new.refund_amount,0),    nvl(new.cart_count30,0),    nvl(old.cart_count,0) + nvl(new.cart_count,0),    nvl(new.favor_count30,0),    nvl(old.favor_count,0) + nvl(new.favor_count,0),    nvl(new.appraise_good_count30,0),    nvl(new.appraise_mid_count30,0),    nvl(new.appraise_bad_count30,0),    nvl(new.appraise_default_count30,0)  ,    nvl(old.appraise_good_count,0) + nvl(new.appraise_good_count,0),    nvl(old.appraise_mid_count,0) + nvl(new.appraise_mid_count,0),    nvl(old.appraise_bad_count,0) + nvl(new.appraise_bad_count,0),    nvl(old.appraise_default_count,0) + nvl(new.appraise_default_count,0) from (    select        sku_id,        spu_id,        order_last_30d_count,        order_last_30d_num,        order_last_30d_amount,        order_count,        order_num,        order_amount  ,        payment_last_30d_count,        payment_last_30d_num,        payment_last_30d_amount,        payment_count,        payment_num,        payment_amount,        refund_last_30d_count,        refund_last_30d_num,        refund_last_30d_amount,        refund_count,        refund_num,        refund_amount,        cart_last_30d_count,        cart_count,        favor_last_30d_count,        favor_count,        appraise_last_30d_good_count,        appraise_last_30d_mid_count,        appraise_last_30d_bad_count,        appraise_last_30d_default_count,        appraise_good_count,        appraise_mid_count,        appraise_bad_count,        appraise_default_count     from <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topic)oldfull outer join (    select         sku_id,        sum(if(dt='<span class="token variable">$do_date</span>', order_count,0 )) order_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_num ,0 ))  order_num,         sum(if(dt='<span class="token variable">$do_date</span>',order_amount,0 )) order_amount ,        sum(if(dt='<span class="token variable">$do_date</span>',payment_count,0 )) payment_count,        sum(if(dt='<span class="token variable">$do_date</span>',payment_num,0 )) payment_num,        sum(if(dt='<span class="token variable">$do_date</span>',payment_amount,0 )) payment_amount,        sum(if(dt='<span class="token variable">$do_date</span>',refund_count,0 )) refund_count,        sum(if(dt='<span class="token variable">$do_date</span>',refund_num,0 )) refund_num,        sum(if(dt='<span class="token variable">$do_date</span>',refund_amount,0 )) refund_amount,          sum(if(dt='<span class="token variable">$do_date</span>',cart_count,0 )) cart_count,        sum(if(dt='<span class="token variable">$do_date</span>',favor_count,0 )) favor_count,        sum(if(dt='<span class="token variable">$do_date</span>',appraise_good_count,0 )) appraise_good_count,          sum(if(dt='<span class="token variable">$do_date</span>',appraise_mid_count,0 ) ) appraise_mid_count ,        sum(if(dt='<span class="token variable">$do_date</span>',appraise_bad_count,0 )) appraise_bad_count,          sum(if(dt='<span class="token variable">$do_date</span>',appraise_default_count,0 )) appraise_default_count,        sum(order_count) order_count30 ,        sum(order_num) order_num30,        sum(order_amount) order_amount30,        sum(payment_count) payment_count30,        sum(payment_num) payment_num30,        sum(payment_amount) payment_amount30,        sum(refund_count) refund_count30,        sum(refund_num) refund_num30,        sum(refund_amount) refund_amount30,        sum(cart_count) cart_count30,        sum(favor_count) favor_count30,        sum(appraise_good_count) appraise_good_count30,        sum(appraise_mid_count) appraise_mid_count30,        sum(appraise_bad_count) appraise_bad_count30,        sum(appraise_default_count) appraise_default_count30     from <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycount    where dt >= date_add ('<span class="token variable">$do_date</span>', -30)    group by sku_id    )new on new.sku_id = old.sku_idleft join (select * from <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_sku_info where dt='<span class="token variable">$do_date</span>') sku_infoon nvl(new.sku_id,old.sku_id)= sku_info.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_activity_topicselect    nvl(new.id,old.id),    nvl(new.activity_name,old.activity_name),    nvl(new.activity_type,old.activity_type),    nvl(new.start_time,old.start_time),    nvl(new.end_time,old.end_time),    nvl(new.create_time,old.create_time),    nvl(new.display_count,0),    nvl(new.order_count,0),    nvl(new.order_amount,0.0),    nvl(new.payment_count,0),    nvl(new.payment_amount,0.0),    nvl(new.display_count,0)+nvl(old.display_count,0),    nvl(new.order_count,0)+nvl(old.order_count,0),    nvl(new.order_amount,0.0)+nvl(old.order_amount,0.0),    nvl(new.payment_count,0)+nvl(old.payment_count,0),    nvl(new.payment_amount,0.0)+nvl(old.payment_amount,0.0)from(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dwt_activity_topic)oldfull outer join(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dws_activity_info_daycount    where dt='<span class="token variable">$do_date</span>')newon old.id=new.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_area_topicselect    nvl(old.id,new.id),    nvl(old.province_name,new.province_name),    nvl(old.area_code,new.area_code),    nvl(old.iso_code,new.iso_code),    nvl(old.region_id,new.region_id),    nvl(old.region_name,new.region_name),    nvl(new.login_day_count,0),    nvl(new.login_last_30d_count,0),    nvl(new.order_day_count,0),    nvl(new.order_day_amount,0.0),    nvl(new.order_last_30d_count,0),    nvl(new.order_last_30d_amount,0.0),    nvl(new.payment_day_count,0),    nvl(new.payment_day_amount,0.0),    nvl(new.payment_last_30d_count,0),    nvl(new.payment_last_30d_amount,0.0)from (    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dwt_area_topic)oldfull outer join(    select        id,        province_name,        area_code,        iso_code,        region_id,        region_name,        sum(if(dt='<span class="token variable">$do_date</span>',login_count,0)) login_day_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_count,0)) order_day_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_amount,0.0)) order_day_amount,        sum(if(dt='<span class="token variable">$do_date</span>',payment_count,0)) payment_day_count,        sum(if(dt='<span class="token variable">$do_date</span>',payment_amount,0.0)) payment_day_amount,        sum(login_count) login_last_30d_count,        sum(order_count) order_last_30d_count,        sum(order_amount) order_last_30d_amount,        sum(payment_count) payment_last_30d_count,        sum(payment_amount) payment_last_30d_amount    from <span class="token variable">$&#123;APP&#125;</span>.dws_area_stats_daycount    where dt>=date_add('<span class="token variable">$do_date</span>',-30)    group by id,province_name,area_code,iso_code,region_id,region_name)newon old.id=new.id;"</span><span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql</span>"</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEC7.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> dwd_to_dws.sh<span class="token comment">#运行脚本加载数据： </span>dwd_to_dws.sh <span class="token number">2020</span>-06-15</code></pre><p>查看导入数据：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dws_area_stats_daycount <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'2020-06-15'</span> <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wpsEEC8.tmp.jpg" alt="img"> </p><h3 id="7-建DWT层所有主题对象的累积行为表；"><a href="#7-建DWT层所有主题对象的累积行为表；" class="headerlink" title="(7).建DWT层所有主题对象的累积行为表；"></a>(7).建DWT层所有主题对象的累积行为表；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8920.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8921.tmp.jpg" alt="img"> </p><p>仅展示部分sql代码，创建DWT数据加载脚本：vim dws_to_dwt.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">else</span>     <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token assign-left variable">sql</span><span class="token operator">=</span><span class="token string">"set mapreduce.job.queuename=hive;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topicselect    nvl(new.mid_id,old.mid_id),    nvl(new.model,old.model),    nvl(new.brand,old.brand),    if(old.mid_id is null,'<span class="token variable">$do_date</span>',old.login_date_first),    if(new.mid_id is not null,'<span class="token variable">$do_date</span>',old.login_date_last),    if(new.mid_id is not null, new.login_count,0),    nvl(old.login_count,0)+if(new.login_count>0,1,0)from(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic)oldfull outer join(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount    where dt='<span class="token variable">$do_date</span>')newon old.mid_id=new.mid_id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_user_topicselect    nvl(new.user_id,old.user_id),    if(old.login_date_first is null and new.login_count>0,'<span class="token variable">$do_date</span>',old.login_date_first),    if(new.login_count>0,'<span class="token variable">$do_date</span>',old.login_date_last),    nvl(old.login_count,0)+if(new.login_count>0,1,0),    nvl(new.login_last_30d_count,0),    if(old.order_date_first is null and new.order_count>0,'<span class="token variable">$do_date</span>',old.order_date_first),    if(new.order_count>0,'<span class="token variable">$do_date</span>',old.order_date_last),    nvl(old.order_count,0)+nvl(new.order_count,0),    nvl(old.order_amount,0)+nvl(new.order_amount,0),    nvl(new.order_last_30d_count,0),    nvl(new.order_last_30d_amount,0),    if(old.payment_date_first is null and new.payment_count>0,'<span class="token variable">$do_date</span>',old.payment_date_first),    if(new.payment_count>0,'<span class="token variable">$do_date</span>',old.payment_date_last),    nvl(old.payment_count,0)+nvl(new.payment_count,0),    nvl(old.payment_amount,0)+nvl(new.payment_amount,0),    nvl(new.payment_last_30d_count,0),    nvl(new.payment_last_30d_amount,0)from<span class="token variable">$&#123;APP&#125;</span>.dwt_user_topic oldfull outer join(    select        user_id,        sum(if(dt='<span class="token variable">$do_date</span>',login_count,0)) login_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_count,0)) order_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_amount,0)) order_amount,        sum(if(dt='<span class="token variable">$do_date</span>',payment_count,0)) payment_count,        sum(if(dt='<span class="token variable">$do_date</span>',payment_amount,0)) payment_amount,        sum(if(login_count>0,1,0)) login_last_30d_count,        sum(order_count) order_last_30d_count,        sum(order_amount) order_last_30d_amount,        sum(payment_count) payment_last_30d_count,        sum(payment_amount) payment_last_30d_amount    from <span class="token variable">$&#123;APP&#125;</span>.dws_user_action_daycount    where dt>=date_add( '<span class="token variable">$do_date</span>',-30)    group by user_id)newon old.user_id=new.user_id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topicselect     nvl(new.sku_id,old.sku_id),    sku_info.spu_id,    nvl(new.order_count30,0),    nvl(new.order_num30,0),    nvl(new.order_amount30,0),    nvl(old.order_count,0) + nvl(new.order_count,0),    nvl(old.order_num,0) + nvl(new.order_num,0),    nvl(old.order_amount,0) + nvl(new.order_amount,0),    nvl(new.payment_count30,0),    nvl(new.payment_num30,0),    nvl(new.payment_amount30,0),    nvl(old.payment_count,0) + nvl(new.payment_count,0),    nvl(old.payment_num,0) + nvl(new.payment_num,0),    nvl(old.payment_amount,0) + nvl(new.payment_amount,0),    nvl(new.refund_count30,0),    nvl(new.refund_num30,0),    nvl(new.refund_amount30,0),    nvl(old.refund_count,0) + nvl(new.refund_count,0),    nvl(old.refund_num,0) + nvl(new.refund_num,0),    nvl(old.refund_amount,0) + nvl(new.refund_amount,0),    nvl(new.cart_count30,0),    nvl(old.cart_count,0) + nvl(new.cart_count,0),    nvl(new.favor_count30,0),    nvl(old.favor_count,0) + nvl(new.favor_count,0),    nvl(new.appraise_good_count30,0),    nvl(new.appraise_mid_count30,0),    nvl(new.appraise_bad_count30,0),    nvl(new.appraise_default_count30,0)  ,    nvl(old.appraise_good_count,0) + nvl(new.appraise_good_count,0),    nvl(old.appraise_mid_count,0) + nvl(new.appraise_mid_count,0),    nvl(old.appraise_bad_count,0) + nvl(new.appraise_bad_count,0),    nvl(old.appraise_default_count,0) + nvl(new.appraise_default_count,0) from (    select        sku_id,        spu_id,        order_last_30d_count,        order_last_30d_num,        order_last_30d_amount,        order_count,        order_num,        order_amount  ,        payment_last_30d_count,        payment_last_30d_num,        payment_last_30d_amount,        payment_count,        payment_num,        payment_amount,        refund_last_30d_count,        refund_last_30d_num,        refund_last_30d_amount,        refund_count,        refund_num,        refund_amount,        cart_last_30d_count,        cart_count,        favor_last_30d_count,        favor_count,        appraise_last_30d_good_count,        appraise_last_30d_mid_count,        appraise_last_30d_bad_count,        appraise_last_30d_default_count,        appraise_good_count,        appraise_mid_count,        appraise_bad_count,        appraise_default_count     from <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topic)oldfull outer join (    select         sku_id,        sum(if(dt='<span class="token variable">$do_date</span>', order_count,0 )) order_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_num ,0 ))  order_num,         sum(if(dt='<span class="token variable">$do_date</span>',order_amount,0 )) order_amount ,        sum(if(dt='<span class="token variable">$do_date</span>',payment_count,0 )) payment_count,        sum(if(dt='<span class="token variable">$do_date</span>',payment_num,0 )) payment_num,        sum(if(dt='<span class="token variable">$do_date</span>',payment_amount,0 )) payment_amount,        sum(if(dt='<span class="token variable">$do_date</span>',refund_count,0 )) refund_count,        sum(if(dt='<span class="token variable">$do_date</span>',refund_num,0 )) refund_num,        sum(if(dt='<span class="token variable">$do_date</span>',refund_amount,0 )) refund_amount,          sum(if(dt='<span class="token variable">$do_date</span>',cart_count,0 )) cart_count,        sum(if(dt='<span class="token variable">$do_date</span>',favor_count,0 )) favor_count,        sum(if(dt='<span class="token variable">$do_date</span>',appraise_good_count,0 )) appraise_good_count,          sum(if(dt='<span class="token variable">$do_date</span>',appraise_mid_count,0 ) ) appraise_mid_count ,        sum(if(dt='<span class="token variable">$do_date</span>',appraise_bad_count,0 )) appraise_bad_count,          sum(if(dt='<span class="token variable">$do_date</span>',appraise_default_count,0 )) appraise_default_count,        sum(order_count) order_count30 ,        sum(order_num) order_num30,        sum(order_amount) order_amount30,        sum(payment_count) payment_count30,        sum(payment_num) payment_num30,        sum(payment_amount) payment_amount30,        sum(refund_count) refund_count30,        sum(refund_num) refund_num30,        sum(refund_amount) refund_amount30,        sum(cart_count) cart_count30,        sum(favor_count) favor_count30,        sum(appraise_good_count) appraise_good_count30,        sum(appraise_mid_count) appraise_mid_count30,        sum(appraise_bad_count) appraise_bad_count30,        sum(appraise_default_count) appraise_default_count30     from <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycount    where dt >= date_add ('<span class="token variable">$do_date</span>', -30)    group by sku_id    )new on new.sku_id = old.sku_idleft join (select * from <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_sku_info where dt='<span class="token variable">$do_date</span>') sku_infoon nvl(new.sku_id,old.sku_id)= sku_info.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_activity_topicselect    nvl(new.id,old.id),    nvl(new.activity_name,old.activity_name),    nvl(new.activity_type,old.activity_type),    nvl(new.start_time,old.start_time),    nvl(new.end_time,old.end_time),    nvl(new.create_time,old.create_time),    nvl(new.display_count,0),    nvl(new.order_count,0),    nvl(new.order_amount,0.0),    nvl(new.payment_count,0),    nvl(new.payment_amount,0.0),    nvl(new.display_count,0)+nvl(old.display_count,0),    nvl(new.order_count,0)+nvl(old.order_count,0),    nvl(new.order_amount,0.0)+nvl(old.order_amount,0.0),    nvl(new.payment_count,0)+nvl(old.payment_count,0),    nvl(new.payment_amount,0.0)+nvl(old.payment_amount,0.0)from(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dwt_activity_topic)oldfull outer join(    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dws_activity_info_daycount    where dt='<span class="token variable">$do_date</span>')newon old.id=new.id;insert overwrite table <span class="token variable">$&#123;APP&#125;</span>.dwt_area_topicselect    nvl(old.id,new.id),    nvl(old.province_name,new.province_name),    nvl(old.area_code,new.area_code),    nvl(old.iso_code,new.iso_code),    nvl(old.region_id,new.region_id),    nvl(old.region_name,new.region_name),    nvl(new.login_day_count,0),    nvl(new.login_last_30d_count,0),    nvl(new.order_day_count,0),    nvl(new.order_day_amount,0.0),    nvl(new.order_last_30d_count,0),    nvl(new.order_last_30d_amount,0.0),    nvl(new.payment_day_count,0),    nvl(new.payment_day_amount,0.0),    nvl(new.payment_last_30d_count,0),    nvl(new.payment_last_30d_amount,0.0)from (    select        *    from <span class="token variable">$&#123;APP&#125;</span>.dwt_area_topic)oldfull outer join(    select        id,        province_name,        area_code,        iso_code,        region_id,        region_name,        sum(if(dt='<span class="token variable">$do_date</span>',login_count,0)) login_day_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_count,0)) order_day_count,        sum(if(dt='<span class="token variable">$do_date</span>',order_amount,0.0)) order_day_amount,        sum(if(dt='<span class="token variable">$do_date</span>',payment_count,0)) payment_day_count,        sum(if(dt='<span class="token variable">$do_date</span>',payment_amount,0.0)) payment_day_amount,        sum(login_count) login_last_30d_count,        sum(order_count) order_last_30d_count,        sum(order_amount) order_last_30d_amount,        sum(payment_count) payment_last_30d_count,        sum(payment_amount) payment_last_30d_amount    from <span class="token variable">$&#123;APP&#125;</span>.dws_area_stats_daycount    where dt>=date_add('<span class="token variable">$do_date</span>',-30)    group by id,province_name,area_code,iso_code,region_id,region_name)newon old.id=new.id;"</span><span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql</span>"</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8922.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> dws_to_dwt.sh<span class="token comment">#运行脚本加载数据：</span>dws_to_dwt.sh <span class="token number">2020</span>-06-15</code></pre><p>查看导入数据：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dwt_uv_topic <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8923.tmp.jpg" alt="img"> </p><h3 id="8-建ADS层所有主题指标分析表；"><a href="#8-建ADS层所有主题指标分析表；" class="headerlink" title="(8).建ADS层所有主题指标分析表；"></a>(8).建ADS层所有主题指标分析表；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8924.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8925.tmp.jpg" alt="img"> </p><p>仅展示部分sql代码，创建ADS层数据加载脚本：vim dwt_to_ads.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">hive</span><span class="token operator">=</span>/root/soft/hive/bin/hive<span class="token assign-left variable">APP</span><span class="token operator">=</span>gmall<span class="token comment"># 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">else</span>     <span class="token assign-left variable">do_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%F<span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token assign-left variable">sql</span><span class="token operator">=</span><span class="token string">"set mapreduce.job.queuename=hive;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_uv_count select      '<span class="token variable">$do_date</span>' dt,    daycount.ct,    wkcount.ct,    mncount.ct,    if(date_add(next_day('<span class="token variable">$do_date</span>','MO'),-1)='<span class="token variable">$do_date</span>','Y','N') ,    if(last_day('<span class="token variable">$do_date</span>')='<span class="token variable">$do_date</span>','Y','N') from (    select          '<span class="token variable">$do_date</span>' dt,        count(*) ct    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic    where login_date_last='<span class="token variable">$do_date</span>'  )daycount join (     select          '<span class="token variable">$do_date</span>' dt,        count (*) ct    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic    where login_date_last>=date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7)     and login_date_last&lt;= date_add(next_day('<span class="token variable">$do_date</span>','MO'),-1) ) wkcount on daycount.dt=wkcount.dtjoin (     select          '<span class="token variable">$do_date</span>' dt,        count (*) ct    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic    where date_format(login_date_last,'yyyy-MM')=date_format('<span class="token variable">$do_date</span>','yyyy-MM')  )mncount on daycount.dt=mncount.dt;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_new_mid_count select    login_date_first,    count(*)from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topicwhere login_date_first='<span class="token variable">$do_date</span>'group by login_date_first;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_silent_countselect    '<span class="token variable">$do_date</span>',    count(*) from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topicwhere login_date_first=login_date_lastand login_date_last&lt;=date_add('<span class="token variable">$do_date</span>',-7);insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_back_countselect'<span class="token variable">$do_date</span>',concat(date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7),'_', date_add(next_day('<span class="token variable">$do_date</span>','MO'),-1)),    count(*)from(    select        mid_id    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic    where login_date_last>=date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7)     and login_date_last&lt;= date_add(next_day('<span class="token variable">$do_date</span>','MO'),-1)    and login_date_first&lt;date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7))current_wkleft join(    select        mid_id    from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount    where dt>=date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7*2)     and dt&lt;= date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7-1)     group by mid_id)last_wkon current_wk.mid_id=last_wk.mid_idwhere last_wk.mid_id is null;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_wastage_countselect     '<span class="token variable">$do_date</span>',     count(*)from (    select         mid_id    from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic    where login_date_last&lt;=date_add('<span class="token variable">$do_date</span>',-7)    group by mid_id)t1;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_user_retention_day_rateselect    '<span class="token variable">$do_date</span>',--统计日期    date_add('<span class="token variable">$do_date</span>',-1),--新增日期    1,--留存天数    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-1) and login_date_last='<span class="token variable">$do_date</span>',1,0)),--<span class="token variable">$do_date</span>的1日留存数    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-1),1,0)),--<span class="token variable">$do_date</span>新增    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-1) and login_date_last='<span class="token variable">$do_date</span>',1,0))/sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-1),1,0))*100from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topicunion allselect    '<span class="token variable">$do_date</span>',--统计日期    date_add('<span class="token variable">$do_date</span>',-2),--新增日期    2,--留存天数    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-2) and login_date_last='<span class="token variable">$do_date</span>',1,0)),--<span class="token variable">$do_date</span>的2日留存数    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-2),1,0)),--<span class="token variable">$do_date</span>新增    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-2) and login_date_last='<span class="token variable">$do_date</span>',1,0))/sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-2),1,0))*100from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topicunion allselect    '<span class="token variable">$do_date</span>',--统计日期    date_add('<span class="token variable">$do_date</span>',-3),--新增日期    3,--留存天数    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-3) and login_date_last='<span class="token variable">$do_date</span>',1,0)),--<span class="token variable">$do_date</span>的3日留存数    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-3),1,0)),--<span class="token variable">$do_date</span>新增    sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-3) and login_date_last='<span class="token variable">$do_date</span>',1,0))/sum(if(login_date_first=date_add('<span class="token variable">$do_date</span>',-3),1,0))*100from <span class="token variable">$&#123;APP&#125;</span>.dwt_uv_topic;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_continuity_wk_countselect    '<span class="token variable">$do_date</span>',    concat(date_add(next_day('<span class="token variable">$do_date</span>','MO'),-7*3),'_',date_add(next_day('<span class="token variable">$do_date</span>','MO'),-1)),    count(*)from(    select        mid_id    from    (        select            mid_id        from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount        where dt>=date_add(next_day('<span class="token variable">$do_date</span>','monday'),-7)        and dt&lt;=date_add(next_day('<span class="token variable">$do_date</span>','monday'),-1)        group by mid_id        union all        select            mid_id        from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount        where dt>=date_add(next_day('<span class="token variable">$do_date</span>','monday'),-7*2)        and dt&lt;=date_add(next_day('<span class="token variable">$do_date</span>','monday'),-7-1)        group by mid_id        union all        select            mid_id        from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount        where dt>=date_add(next_day('<span class="token variable">$do_date</span>','monday'),-7*3)        and dt&lt;=date_add(next_day('<span class="token variable">$do_date</span>','monday'),-7*2-1)        group by mid_id    )t1    group by mid_id    having count(*)=3)t2;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_continuity_uv_countselect    '<span class="token variable">$do_date</span>',    concat(date_add('<span class="token variable">$do_date</span>',-6),'_','<span class="token variable">$do_date</span>'),    count(*)from(    select mid_id    from    (        select mid_id              from        (            select                 mid_id,                date_sub(dt,rank) date_dif            from            (                select                     mid_id,                    dt,                    rank() over(partition by mid_id order by dt) rank                from <span class="token variable">$&#123;APP&#125;</span>.dws_uv_detail_daycount                where dt>=date_add('<span class="token variable">$do_date</span>',-6) and dt&lt;='<span class="token variable">$do_date</span>'            )t1        )t2         group by mid_id,date_dif        having count(*)>=3    )t3     group by mid_id)t4;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_user_topicselect    '<span class="token variable">$do_date</span>',    sum(if(login_date_last='<span class="token variable">$do_date</span>',1,0)),    sum(if(login_date_first='<span class="token variable">$do_date</span>',1,0)),    sum(if(payment_date_first='<span class="token variable">$do_date</span>',1,0)),    sum(if(payment_count>0,1,0)),    count(*),    sum(if(login_date_last='<span class="token variable">$do_date</span>',1,0))/count(*),    sum(if(payment_count>0,1,0))/count(*),    sum(if(login_date_first='<span class="token variable">$do_date</span>',1,0))/sum(if(login_date_last='<span class="token variable">$do_date</span>',1,0))from <span class="token variable">$&#123;APP&#125;</span>.dwt_user_topic;withtmp_uv as(    select        '<span class="token variable">$do_date</span>' dt,        sum(if(array_contains(pages,'home'),1,0)) home_count,        sum(if(array_contains(pages,'good_detail'),1,0)) good_detail_count    from    (        select            mid_id,            collect_set(page_id) pages        from <span class="token variable">$&#123;APP&#125;</span>.dwd_page_log        where dt='<span class="token variable">$do_date</span>'        and page_id in ('home','good_detail')        group by mid_id    )tmp),tmp_cop as(    select         '<span class="token variable">$do_date</span>' dt,        sum(if(cart_count>0,1,0)) cart_count,        sum(if(order_count>0,1,0)) order_count,        sum(if(payment_count>0,1,0)) payment_count    from <span class="token variable">$&#123;APP&#125;</span>.dws_user_action_daycount    where dt='<span class="token variable">$do_date</span>')insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_user_action_convert_dayselect    tmp_uv.dt,    tmp_uv.home_count,    tmp_uv.good_detail_count,    tmp_uv.good_detail_count/tmp_uv.home_count*100,    tmp_cop.cart_count,    tmp_cop.cart_count/tmp_uv.good_detail_count*100,    tmp_cop.order_count,    tmp_cop.order_count/tmp_cop.cart_count*100,    tmp_cop.payment_count,    tmp_cop.payment_count/tmp_cop.order_count*100from tmp_uvjoin tmp_copon tmp_uv.dt=tmp_cop.dt;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_product_infoselect    '<span class="token variable">$do_date</span>' dt,    sku_num,    spu_numfrom(    select        '<span class="token variable">$do_date</span>' dt,        count(*) sku_num    from        <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topic) tmp_sku_numjoin(    select        '<span class="token variable">$do_date</span>' dt,        count(*) spu_num    from    (        select            spu_id        from            <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topic        group by            spu_id    ) tmp_spu_id) tmp_spu_numon    tmp_sku_num.dt=tmp_spu_num.dt;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_product_sale_topNselect    '<span class="token variable">$do_date</span>' dt,    sku_id,    payment_amountfrom    <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycountwhere    dt='<span class="token variable">$do_date</span>'order by payment_amount desclimit 10;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_product_favor_topNselect    '<span class="token variable">$do_date</span>' dt,    sku_id,    favor_countfrom    <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycountwhere    dt='<span class="token variable">$do_date</span>'order by favor_count desclimit 10;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_product_cart_topNselect    '<span class="token variable">$do_date</span>' dt,    sku_id,    cart_countfrom    <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycountwhere    dt='<span class="token variable">$do_date</span>'order by cart_count desclimit 10;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_product_refund_topNselect    '<span class="token variable">$do_date</span>',    sku_id,    refund_last_30d_count/payment_last_30d_count*100 refund_ratiofrom <span class="token variable">$&#123;APP&#125;</span>.dwt_sku_topicorder by refund_ratio desclimit 10;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_appraise_bad_topNselect    '<span class="token variable">$do_date</span>' dt,    sku_id,appraise_bad_count/(appraise_good_count+appraise_mid_count+appraise_bad_count+appraise_default_count) appraise_bad_ratiofrom    <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycountwhere    dt='<span class="token variable">$do_date</span>'order by appraise_bad_ratio desclimit 10;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_order_daycountselect    '<span class="token variable">$do_date</span>',    sum(order_count),    sum(order_amount),    sum(if(order_count>0,1,0))from <span class="token variable">$&#123;APP&#125;</span>.dws_user_action_daycountwhere dt='<span class="token variable">$do_date</span>';insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_payment_daycountselect    tmp_payment.dt,    tmp_payment.payment_count,    tmp_payment.payment_amount,    tmp_payment.payment_user_count,    tmp_skucount.payment_sku_count,    tmp_time.payment_avg_timefrom(    select        '<span class="token variable">$do_date</span>' dt,        sum(payment_count) payment_count,        sum(payment_amount) payment_amount,        sum(if(payment_count>0,1,0)) payment_user_count    from <span class="token variable">$&#123;APP&#125;</span>.dws_user_action_daycount    where dt='<span class="token variable">$do_date</span>')tmp_paymentjoin(    select        '<span class="token variable">$do_date</span>' dt,        sum(if(payment_count>0,1,0)) payment_sku_count     from <span class="token variable">$&#123;APP&#125;</span>.dws_sku_action_daycount    where dt='<span class="token variable">$do_date</span>')tmp_skucount on tmp_payment.dt=tmp_skucount.dtjoin(    select        '<span class="token variable">$do_date</span>' dt,        sum(unix_timestamp(payment_time)-unix_timestamp(create_time))/count(*)/60 payment_avg_time    from <span class="token variable">$&#123;APP&#125;</span>.dwd_fact_order_info    where dt='<span class="token variable">$do_date</span>'    and payment_time is not null)tmp_time on tmp_payment.dt=tmp_time.dt;with tmp_order as(    select        user_id,        order_stats_struct.sku_id sku_id,        order_stats_struct.order_count order_count    from <span class="token variable">$&#123;APP&#125;</span>.dws_user_action_daycount lateral view explode(order_detail_stats) tmp as order_stats_struct    where date_format(dt,'yyyy-MM')=date_format('<span class="token variable">$do_date</span>','yyyy-MM')),tmp_sku as(    select        id,        tm_id,        category1_id,        category1_name    from <span class="token variable">$&#123;APP&#125;</span>.dwd_dim_sku_info    where dt='<span class="token variable">$do_date</span>')insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_sale_tm_category1_stat_mnselect    tm_id,    category1_id,    category1_name,    sum(if(order_count>=1,1,0)) buycount,    sum(if(order_count>=2,1,0)) buyTwiceLast,    sum(if(order_count>=2,1,0))/sum( if(order_count>=1,1,0)) buyTwiceLastRatio,    sum(if(order_count>=3,1,0))  buy3timeLast  ,    sum(if(order_count>=3,1,0))/sum( if(order_count>=1,1,0)) buy3timeLastRatio ,    date_format('<span class="token variable">$do_date</span>' ,'yyyy-MM') stat_mn,    '<span class="token variable">$do_date</span>' stat_datefrom(    select         tmp_order.user_id,        tmp_sku.category1_id,        tmp_sku.category1_name,        tmp_sku.tm_id,        sum(order_count) order_count    from tmp_order    join tmp_sku    on tmp_order.sku_id=tmp_sku.id    group by tmp_order.user_id,tmp_sku.category1_id,tmp_sku.category1_name,tmp_sku.tm_id)tmpgroup by tm_id, category1_id, category1_name;insert into table <span class="token variable">$&#123;APP&#125;</span>.ads_area_topicselect    '<span class="token variable">$do_date</span>',    id,    province_name,    area_code,    iso_code,    region_id,    region_name,    login_day_count,    order_day_count,    order_day_amount,    payment_day_count,    payment_day_amountfrom <span class="token variable">$&#123;APP&#125;</span>.dwt_area_topic;"</span><span class="token variable">$hive</span> -e <span class="token string">"<span class="token variable">$sql</span>"</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8926.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> dwt_to_ads.sh<span class="token comment">#运行脚本导入数据：</span>dwt_to_ads.sh <span class="token number">2020</span>-06-15</code></pre><p>查看是否成功导入数据：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ads_area_topic <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'2020-06-15'</span><span class="token punctuation">;</span> </code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8927.tmp.jpg" alt="img"> </p><h3 id="9-Azkaban调度；"><a href="#9-Azkaban调度；" class="headerlink" title="(9).Azkaban调度；"></a>(9).Azkaban调度；</h3><p>安装Azkaban，上传安装包：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8928.tmp.jpg" alt="img"> </p><p>创建azkaban文件夹：mkdir &#x2F;root&#x2F;soft&#x2F;azkaban</p><p>解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf azkaban-exec-server-3.84.4.tar.gz -C /root/soft/azkaban<span class="token function">tar</span> -zxvf azkaban-web-server-3.84.4.tar.gz -C /root/soft/azkaban<span class="token function">tar</span> -zxvf azkaban-db-3.84.4.tar.gz -C /root/soft/azkaban</code></pre><p>打开Navicat连接hadoop1的MySQL，创建azkaban数据库：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8929.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps892A.tmp.jpg" alt="img"> </p><p>输入：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'azkaban'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'000000'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span><span class="token keyword">INSERT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span> <span class="token keyword">ON</span> azkaban<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'azkaban'</span><span class="token variable">@'%'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span></code></pre><p>本地解压azkaban-db-3.84.4.tar.gz，导入sql代码：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps892B.tmp.jpg" alt="img"> </p><p>更改MySQL包的大小，防止Azkaban连接MySQL阻塞：sudo vim &#x2F;etc&#x2F;my.cnf</p><p>在[mysqld]下面加一行：max_allowed_packet&#x3D;1024M</p><p>重启MySQL：sudo systemctl restart mysqld</p><p>如果是基于docker安装的MySQL，先启动docker服务：service docker start</p><p>查看历史容器：docker ps -a</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps893B.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重启MySQL容器：</span><span class="token function">docker</span> restart 容器id<span class="token comment">#进入容器使用MySQL：</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器idbash<span class="token comment">#输入MySQL启动命令：</span>mysql -uroot -p123456</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps893C.tmp.jpg" alt="img"> </p><p>切换到MySQL目录下，编辑mysql.conf.d：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/mysql/mysql.conf.d</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps893D.tmp.jpg" alt="img"> </p><p>在[mysqld]下面加一行：max_allowed_packet&#x3D;1024M</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps893E.tmp.jpg" alt="img"> </p><p>退出容器：exit</p><p>重启容器：docker restart 容器id</p><p>切换目录：cd &#x2F;root&#x2F;soft&#x2F;azkaban&#x2F;</p><p>创建软连接：ln -s azkaban-exec-server-3.84.4 azkaban-exec</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s azkaban-web-server-3.84.4 azkaban-web<span class="token function">ln</span> -s azkaban-db-3.84.4 azkaban-db</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps893F.tmp.jpg" alt="img"> </p><p>修改azkaban-exec&#x2F;conf目录下的azkaban.properties：</p><p>vim azkaban-exec&#x2F;conf&#x2F;azkaban.properties</p><p>添加如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash">default.timezone.id<span class="token operator">=</span>Asia/Shanghaiazkaban.webserver.url<span class="token operator">=</span>http://hadoop1:8081mysql.host<span class="token operator">=</span>hadoop1mysql.password<span class="token operator">=</span>000000executor.port<span class="token operator">=</span><span class="token number">12321</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8940.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8941.tmp.jpg" alt="img"> </p><p>进入azkaban目录分发azkaban-exec：xsync azkaban-exec</p><p>hadoop1,hadoop2,hadoop3进入azkaban-exec目录，启动executor：bin&#x2F;start-exec.sh</p><p>激活executor:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -G <span class="token string">"hadoop1:12321/executor?action=activate"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span><span class="token function">curl</span> -G <span class="token string">"hadoop2:12321/executor?action=activate"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span><span class="token function">curl</span> -G <span class="token string">"hadoop3:12321/executor?action=activate"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span></code></pre><p>配置azkaban-web，进入azkaban-web&#x2F;conf目录,编辑azkaban.properties：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/soft/azkaban/azkaban-web/conf/azkaban.properties</code></pre><p>添加如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash">default.timezone.id<span class="token operator">=</span>Asia/Shanghaimysql.host<span class="token operator">=</span>hadoop1mysql.password<span class="token operator">=</span>000000azkaban.executorselector.filters<span class="token operator">=</span>StaticRemainingFlowSize,CpuStatus</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8942.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8943.tmp.jpg" alt="img"> </p><p>编辑azkaban-user.xml:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/soft/azkaban/azkaban-web/conf/azkaban-user.xml</code></pre><p>添加hadoop用户及密码，用于web登录：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8944.tmp.jpg" alt="img"> </p><p>进入azkaban-web目录，启动web server：bin&#x2F;start-web.sh</p><p>在网页输入hadoop1:8081 (如果本地没有映射，就输入hadoop1的ip地址)</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8945.tmp.jpg" alt="img"> </p><p>创建MySQL数据库和表：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8946.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8957.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8958.tmp.jpg" alt="img"> </p><p>编写Sqoop导出脚本：vim hdfs_to_mysql.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">hive_db_name</span><span class="token operator">=</span>gmall<span class="token assign-left variable">mysql_db_name</span><span class="token operator">=</span>gmall_report<span class="token function-name function">export_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>/root/soft/sqoop/bin/sqoop <span class="token builtin class-name">export</span> <span class="token punctuation">\</span>-Dmapreduce.job.queuename<span class="token operator">=</span>hive <span class="token punctuation">\</span>--connect <span class="token string">"jdbc:mysql://hadoop1:3306/<span class="token variable">$&#123;mysql_db_name&#125;</span>?useUnicode=true&amp;characterEncoding=utf-8"</span>  <span class="token punctuation">\</span>--username root <span class="token punctuation">\</span>--password <span class="token number">123456</span> <span class="token punctuation">\</span>--table <span class="token variable">$1</span> <span class="token punctuation">\</span>--num-mappers <span class="token number">1</span> <span class="token punctuation">\</span>--export-dir /warehouse/<span class="token variable">$hive_db_name</span>/ads/<span class="token variable">$1</span> <span class="token punctuation">\</span>--input-fields-terminated-by <span class="token string">"<span class="token entity" title="\t">\t</span>"</span> <span class="token punctuation">\</span>--update-mode allowinsert <span class="token punctuation">\</span>--update-key <span class="token variable">$2</span> <span class="token punctuation">\</span>--input-null-string <span class="token string">'\\N'</span>    <span class="token punctuation">\</span>--input-null-non-string <span class="token string">'\\N'</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>  <span class="token string">"ads_uv_count"</span><span class="token punctuation">)</span>     export_data <span class="token string">"ads_uv_count"</span> <span class="token string">"dt"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">"ads_user_action_convert_day"</span><span class="token punctuation">)</span>      export_data <span class="token string">"ads_user_action_convert_day"</span> <span class="token string">"dt"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">"ads_user_topic"</span><span class="token punctuation">)</span>     export_data <span class="token string">"ads_user_topic"</span> <span class="token string">"dt"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">"ads_area_topic"</span><span class="token punctuation">)</span>     export_data <span class="token string">"ads_area_topic"</span> <span class="token string">"dt,iso_code"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token string">"all"</span><span class="token punctuation">)</span>     export_data <span class="token string">"ads_uv_count"</span> <span class="token string">"dt"</span>     export_data <span class="token string">"ads_user_topic"</span> <span class="token string">"dt"</span>     export_data <span class="token string">"ads_area_topic"</span> <span class="token string">"dt,iso_code"</span>     <span class="token comment">#其余表省略未写</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8959.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> hdfs_to_mysql.sh</code></pre><p>Sqoop导出数据：hdfs_to_mysql.sh all</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps895A.tmp.jpg" alt="img"> </p><p>编写Azkaban工作流程配置文件；</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps895B.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps895C.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps895D.tmp.jpg" alt="img"> </p><p>打包zip上传azkaban，创建gmall项目导入zip包：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps895E.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps895F.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8960.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8961.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8962.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8963.tmp.jpg" alt="img"> </p><h2 id="4-可视化报表。"><a href="#4-可视化报表。" class="headerlink" title="4.可视化报表。"></a>4.可视化报表。</h2><h3 id="1-Superset入门；"><a href="#1-Superset入门；" class="headerlink" title="(1).Superset入门；"></a>(1).Superset入门；</h3><p>安装Miniconda，上传安装包:</p><p>安装命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Miniconda3-latest-Linux-x86_64.sh</code></pre><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8964.tmp.jpg" alt="img"> </p><p>一直按回车，直到出现下面输入yes：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8965.tmp.jpg" alt="img"> </p><p>输入安装路径：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8966.tmp.jpg" alt="img"> </p><p>安装完成后，加载环境变量，使之生效： source ~&#x2F;.bashrc</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8967.tmp.jpg" alt="img"> </p><p>取消自动激活base环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda config --set auto_activate_base <span class="token boolean">false</span></code></pre><p>激活base环境：conda activate base</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8977.tmp.jpg" alt="img"> </p><p>配置conda国内镜像：</p><pre class="language-bash" data-language="bash"><code class="language-bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/freeconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/mainconda config --set show_channel_urls <span class="token function">yes</span></code></pre><p>查看conda的镜像配置：vim ~&#x2F;.condarc</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8978.tmp.jpg" alt="img"> </p><p>创建Python3.6环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda create --name superset <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.6</span></code></pre><p>查看所有环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda info --envs</code></pre><p>删除一个环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda remove -n env_name --all</code></pre><p>激活superset环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda activate superset</code></pre><p>执行python命令，查看Python版本：python</p><p>退出当前环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda deactivate</code></pre><p>部署Superset，安装依赖；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y gcc gcc-c++ libffi-devel python-devel python-pip python-wheel python-setuptools openssl-devel cyrus-sasl-devel openldap-devel</code></pre><p>安装（更新）setuptools和pip：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade setuptools pip -i https://repo.huaweicloud.com/repository/pypi/simple</code></pre><p>安装Superset：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> apache-superset --trusted-host https://repo.huaweicloud.com -i https://repo.huaweicloud.com/repository/pypi/simple</code></pre><p>执行以下两条指令，否则无法初始化：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token assign-left variable">sqlalchemy</span><span class="token operator">==</span><span class="token number">1.3</span>.24pip <span class="token function">install</span> dataclasses</code></pre><p>初始化Superset数据库：</p><pre class="language-bash" data-language="bash"><code class="language-bash">superset db upgrade</code></pre><p>创建管理员用户，自己设置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FLASK_APP</span><span class="token operator">=</span>supersetsuperset fab create-admin</code></pre><p>Superset初始化：</p><pre class="language-bash" data-language="bash"><code class="language-bash">superset init</code></pre><p>安装gunicorn：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> gunicorn -i https://repo.huaweicloud.com/repository/pypi/simple</code></pre><p>在superset环境下启动Superset：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gunicorn --workers <span class="token number">5</span> --timeout <span class="token number">120</span> --bind hadoop1:8787  <span class="token string">"superset.app:create_app()"</span> --daemon</code></pre><p>网页端访问hadoop1:8787：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8979.tmp.jpg" alt="img"> </p><p>停止superset：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/superset/ &amp;&amp; !/awk/&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9</code></pre><h3 id="2-superset启停脚本；"><a href="#2-superset启停脚本；" class="headerlink" title="(2).superset启停脚本；"></a>(2).superset启停脚本；</h3><p>在&#x2F;root&#x2F;bin目录下：vim superset.sh</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps897A.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps897B.tmp.jpg" alt="img"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#赋权限：</span><span class="token function">chmod</span> <span class="token number">777</span> superset.sh<span class="token comment">#启动superset：</span>superset.sh start</code></pre><h3 id="3-Superset的使用；"><a href="#3-Superset的使用；" class="headerlink" title="(3).Superset的使用；"></a>(3).Superset的使用；</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#对接MySQL数据源，安装依赖：</span>conda <span class="token function">install</span> mysqlclient<span class="token comment">#重启Superset：</span>superset.sh restart</code></pre><p>配置数据库：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps897C.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps897D.tmp.jpg" alt="img"> </p><p>mysql:&#x2F;&#x2F;root:123456@hadoop1&#x2F;gmall_report?charset&#x3D;utf8</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps897E.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps897F.tmp.jpg" alt="img"> </p><p>表示连接成功，保存配置；</p><p>配置表：</p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8980.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8981.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8982.tmp.jpg" alt="img"> </p><h3 id="4-制作可视化数据；"><a href="#4-制作可视化数据；" class="headerlink" title="(4).制作可视化数据；"></a>(4).制作可视化数据；</h3><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8983.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8984.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8985.tmp.jpg" alt="img"> </p><p><img src="/2022/06/18/%E6%95%B0%E4%BB%93/wps8986.tmp.jpg" alt="img"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> kafka </tag>
            
            <tag> java </tag>
            
            <tag> hive </tag>
            
            <tag> sqoop </tag>
            
            <tag> azkaban </tag>
            
            <tag> superset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理学习笔记</title>
      <link href="/2022/06/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理学习笔记"><a href="#计算机组成原理学习笔记" class="headerlink" title="计算机组成原理学习笔记"></a>计算机组成原理学习笔记</h1><h2 id="1-计算机组成原理概论"><a href="#1-计算机组成原理概论" class="headerlink" title="1. 计算机组成原理概论"></a>1. 计算机组成原理概论</h2><p><strong>计算机</strong>：数字电子计算机</p><p><strong>组成</strong>：计算机硬件系统的逻辑实现</p><p><strong>原理</strong>：不以具体机型为依托的，基本实现原理。</p><p>计算机组成原理：掌握如何实现的具体细节。</p><h3 id="1-1-计算机系统简介"><a href="#1-1-计算机系统简介" class="headerlink" title="1.1 计算机系统简介"></a>1.1 计算机系统简介</h3><p>计算机系统由两大部分组成：硬件和软件。软件又包括系统软件和应用软件。</p><p>系统软件可以管理整个计算机系统：</p><ul><li><strong>语言处理程序（将高级语言转换为机器可以懂的指令）</strong></li><li><strong>操作系统</strong></li><li><strong>服务性程序（比如数学库、MPI服务程序进行并行之间的通信）</strong></li><li><strong>数据库管理系统</strong></li><li><strong>网络软件</strong></li></ul><p>应用软件是按照任务需要编制成的程序。</p><p>可以简单将软硬件看作一个层次结构，<strong>硬件为软件提供接口，系统软件又为应用软件形成接口，来完成不同的程序。</strong></p><p>对于计算机的物理结构层次，我们这门课主要研究逻辑层和微电路层的具体实现方式。</p><p>计算机系统的指令层次如下图所示</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f8f082641a793f54b240a3bedc01be50_720w.jpg" alt="img"></p><p>操作系统可以管理软硬件的资源。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-3f91e6af54a662b9d5b72731171ef3b4_720w.jpg" alt="img"></p><p>计算机系统结构<strong>定义了系统软硬件的交界面，定义了哪些功能由软件实现，哪些功能由硬件实现</strong>，定义为&#x3D;&#x3D;<strong>程序员所见到的计算机系统的属性概念性的结构与功能特性</strong>&#x3D;&#x3D;。（指令系统，数据类型，寻址技术，I&#x2F;O机理），即程序员需要理解的东西。</p><p>计算机组成：实现计算机体系结构所体现的属性，即<strong>具体指令的实现。</strong></p><h3 id="1-2-计算机的基本组成"><a href="#1-2-计算机的基本组成" class="headerlink" title="1.2 计算机的基本组成"></a>1.2 计算机的基本组成</h3><h5 id="1-2-1-冯诺依曼结构"><a href="#1-2-1-冯诺依曼结构" class="headerlink" title="1.2.1 冯诺依曼结构"></a>1.2.1 冯诺依曼结构</h5><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-400ee3ebfddf3d69912ac93f011374ed_720w.jpg" alt="img"></p><p>上图实线表示数据流动，虚线表示控制反馈。</p><ul><li>计算机结构由五大部件组成：<strong>存储器、运算器、控制器、输入设备、输出设备</strong>。</li><li><strong>以运算器为中心</strong>，**&#x3D;&#x3D;程序存储在存储器中&#x3D;&#x3D;**。</li><li><strong>指令和数据以同等地位</strong>保存在存储器中，可以按照地址寻找。</li><li>指令和数据由二进制表示，指令由操作码和地址码组成，<strong>操作码指明指令要干什么，地址码指明操作数的地址。</strong></li></ul><p>冯诺依曼结构以运算器为中心，容易形成瓶颈。我们可以使用存储器作为中心来进行优化，但是还不够。</p><h5 id="1-2-2-现代计算机硬件框图"><a href="#1-2-2-现代计算机硬件框图" class="headerlink" title="1.2.2 现代计算机硬件框图"></a>1.2.2 现代计算机硬件框图</h5><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-69a1d35329ee45fc170771d35a166b86_720w.jpg" alt="img"></p><p>指令和数据都是保存在存储器中的。</p><h5 id="1-2-3-存储器的基本组成"><a href="#1-2-3-存储器的基本组成" class="headerlink" title="1.2.3 存储器的基本组成"></a>1.2.3 存储器的基本组成</h5><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-944e43e25966b494973463043e549bab_720w.jpg" alt="img"></p><p><strong>MAR是存储器地址寄存器，保存了存储单元的地址和编号，长度反映存储单元的个数。</strong></p><p><strong>MDR是存储器数据寄存器，保存了要存入存储体的数据或刚从存储体拿出来的数据，长度反映存储字长。</strong></p><p>利用MAR和MDR来将数据放入存储器。</p><h5 id="1-2-4-运算器的结构"><a href="#1-2-4-运算器的结构" class="headerlink" title="1.2.4 运算器的结构"></a>1.2.4 运算器的结构</h5><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1dae6cfbd865f753be7315f812069af2_720w.jpg" alt="img"></p><p>ALU（算术逻辑单元），通常是一个组合电路，输入撤销，输出也撤销，<strong>因此需要加上寄存器保存参与运算的计算</strong>。</p><p>数据寄存器X保存输入参数，ACC为累加寄存器，保存结果，<strong>乘法可能使得数据位数保存不下，使用MQ寄存器保存低位。</strong></p><p>上表中存放了不同运算中，运算器的工作过程，以乘法为例，操作过程如下：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-027a4d6e589fb343988ccfa78f34fc96_720w.jpg" alt="img"></p><ul><li>首先将被乘数取出来放到ACC中</li><li>从指令中的乘数地址M中取出乘数，送入MQ中</li><li>将被乘数送到X中</li><li>将ACC清零</li><li>完成乘法操作，结果由ACC和MQ保存</li></ul><p>这些操作的过程顺序是由<strong>控制器来控制完成的。</strong></p><h5 id="1-2-5-控制器的基本结构"><a href="#1-2-5-控制器的基本结构" class="headerlink" title="1.2.5 控制器的基本结构"></a>1.2.5 控制器的基本结构</h5><p>控制器的功能是<strong>解释指令（完成指令）、保证指令的按序执行</strong>。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8565f5dd792980b286d549bb7e6024a9_720w.jpg" alt="img"></p><ul><li><strong>PC（程序计数器）寄存器保存了当前指令的地址，进行取指令，PC有计数功能。</strong></li><li><strong>IR（指令寄存器）存放当前要执行的指令，将操作码送入CU进行分析。</strong></li><li><strong>CU（控制单元）发出控制信号，控制相对应的部件来执行指令。</strong></li></ul><p>下面以取数指令为例分析指令执行过程（取数送到ACC中）</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2daf226d97d2b36ccd8fcdf01a07dab4_720w.jpg" alt="img"></p><ol><li>PC保存指令的地址，送到MAR进行寻址</li><li>MAR根据地址到存储体中找到保存的指令</li><li>MDR从存储体中取出指令</li><li>送到IR中，IR存放要执行的指令</li><li>IR将操作码送入CU中进行分析</li><li>同时将地址码送到MAR中找这个数的数据</li><li>MAR根据地址到存储体中找到要取的数</li><li>MDR保存从存储体中取出的数</li><li>CU控制下，将要取的数送到ACC中。</li></ol><p><strong>CU分析控制这些步骤的过程。</strong></p><h3 id="1-3-计算机硬件的主要技术指标"><a href="#1-3-计算机硬件的主要技术指标" class="headerlink" title="1.3 计算机硬件的主要技术指标"></a>1.3 计算机硬件的主要技术指标</h3><ul><li>机器字长：CPU一次能处理数据的位数，与CPU中寄存器位数有关。</li><li>运算速度：主频、核数以及每个核支持的线程数、CPI（执行一条指令所需的时钟周期数）、MIPS（每秒执行百万条指令）、FLOPS（每秒浮点运算次数）。</li><li>存储容量：主存容量（可使用存储单元个数×存储字长来表示存储体容量，MAR * MDR）（也可使用字节数来表示）、辅存容量（字节数表示）。</li></ul><h2 id="2-计算机的发展以及应用"><a href="#2-计算机的发展以及应用" class="headerlink" title="2. 计算机的发展以及应用"></a>2. 计算机的发展以及应用</h2><h3 id="2-1-计算机的发展史"><a href="#2-1-计算机的发展史" class="headerlink" title="2.1 计算机的发展史"></a>2.1 计算机的发展史</h3><p>第一台计算机，1946年ENIAC，十进制运算。</p><p>电子技术的发展与计算机体系结构技术的发展对计算机的发展产生了决定性作用。</p><p>根据硬件技术来对计算机进行划分代</p><p><strong>电子管→晶体管→中小规模集成电路→大规模集成电路→超大规模集成电路</strong></p><p>软件技术的发展：机器语言（面向机器）、汇编语言（面向机器）、高级语言（面向问题）。</p><h3 id="2-2-计算机的应用"><a href="#2-2-计算机的应用" class="headerlink" title="2.2 计算机的应用"></a>2.2 计算机的应用</h3><ul><li>科学计算和数据处理</li><li>工业控制和实时控制</li><li>网络技术</li><li>虚拟现实</li><li>办公自动化和管理信息系统</li><li>CAD&#x2F;CAM&#x2F;CIMS</li><li>多媒体技术</li><li>人工智能</li></ul><h2 id="3-系统总线"><a href="#3-系统总线" class="headerlink" title="3. 系统总线"></a>3. 系统总线</h2><h3 id="3-1-总线（bus）的基本概念"><a href="#3-1-总线（bus）的基本概念" class="headerlink" title="3.1 总线（bus）的基本概念"></a>3.1 总线（bus）的基本概念</h3><p>总线是连接各个部件的信息传输线，<strong>是各个部件共享的传输介质，</strong>是信号的公共传输线。</p><p>如果使用单总线结构（系统总线），那么<strong>同时只能有一对部件进行信号传输</strong>，效率较低，使用双总线结构效率会更高。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9a04dd0d8329e04fd06ec42467131cba_720w.jpg" alt="img"></p><p>上面的结构，无法在I&#x2F;O和主存之间进行直接的信息传输，必须要通过CPU。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b5b1ba238025a0f9938165accb1a4f9e_720w.jpg" alt="img"></p><h3 id="3-2-总线的分类"><a href="#3-2-总线的分类" class="headerlink" title="3.2 总线的分类"></a>3.2 总线的分类</h3><ul><li><p>片内总线：芯片内部的总线。</p></li><li><p>系统总线：计算机各部件之间的信息传输线。可分为：</p></li><li><ul><li><strong>数据总线</strong>，双向的，一般小于等于机器字长和存储字长。</li><li><strong>地址总线</strong>，单向的，与存储地址、I&#x2F;O地址有关。</li><li><strong>控制总线</strong>，双向（CPU发出存储器读写指令，总线允许，中断确认等；CPU接收中断请求、总线请求）</li></ul></li><li><p>通信总线：计算机之间或计算机和其它设备之间的通信，并行通信总线和串行通信总线。</p></li></ul><h3 id="3-3-总线的特性和性能指标"><a href="#3-3-总线的特性和性能指标" class="headerlink" title="3.3 总线的特性和性能指标"></a>3.3 总线的特性和性能指标</h3><p>总线印刷到电路板上（主板），其他设备插板插到主板上。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-686025071c4309677ef414d14bcd0cf1_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-31dc1a5a161020875b92e8fe70961701_720w.jpg" alt="img"></p><p>总线的性能指标：</p><ul><li>总线宽度：数据线根数，同时可以传输多少位。</li><li>标准传输率：每秒传输的最大字节数MBps</li><li>时钟同步&#x2F;不同步</li><li>总线复用：地址线与数据线是否可以复用</li><li>信号线数：地址线、数据线和控制线的总和</li><li>总线控制方式</li><li>其他指标：负载能力等</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-5d968958b712d0a2724af6824bdd93ee_720w.jpg" alt="img"></p><h3 id="3-4-总线结构"><a href="#3-4-总线结构" class="headerlink" title="3.4 总线结构"></a>3.4 总线结构</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-48c250bf81a7d88ca9033cb90f4b8d60_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b7450aa5377fae2a59d7b034dc1b4a66_720w.jpg" alt="img"></p><p><strong>增加了DMA（直接存储器访问）总线，外部设备直接访问存储器内存。</strong>高速设备直接通过DMA访问主存。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e99a5cffacc23efec4bb49fdf16ac7ed_720w.jpg" alt="img"></p><p>CPU与cache通过局部总线进行相连，扩展总线将外部设备连接。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-5b91de164ae2dff903b0b7b0c0851b7f_720w.jpg" alt="img"></p><p>高速设备和低速设备分离，分别连接到高速总线和扩展总线上。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1f7ae7d57def2dc29ed21ef32eccf229_720w.jpg" alt="img"></p><p>PCI高速总线来连接高速设备，PCI总线可以通过桥来进行扩展。</p><h3 id="3-5-总线控制"><a href="#3-5-总线控制" class="headerlink" title="3.5 总线控制"></a>3.5 总线控制</h3><h4 id="3-5-1-总线判优控制"><a href="#3-5-1-总线判优控制" class="headerlink" title="3.5.1 总线判优控制"></a>3.5.1 总线判优控制</h4><p>通过是否能对总线发出占用请求，我们将设备分为主设备（主模块）和从设备（从模块）。<strong>主设备可以对总线有控制权，从设备响应从主设备发来的总线命令。</strong></p><p>总线判优控制可以分为两种：集中式和分布式。下面介绍几种集中式的总线判优控制结构。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-861b7aeec653084b2dda2ab9e4ae8130_720w.jpg" alt="img"></p><p>主设备通过BR申请总线的控制权，<strong>有设备在使用总线，则设置BS。总线控制部件通过BG来链式查询这些接口是否提出了BR，遇到了BR则交出控制权。</strong></p><p><strong>因此，优先顺序则为BG的查询顺序</strong>。这种结构对电路故障特别敏感，尤其是BG，如果BG后面出了问题，会导致后面的设备一直不会响应。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c6994c004889ac4b70e8af961524b90b_720w.jpg" alt="img"></p><p>数据线用于数据的传输，地址线用于从设备的查找。<strong>通过设备地址线来查找某个设备是否发出总线请求。计数器的值通过设备地址线进行传输，来查找某个设备是否发出请求。</strong>可以自定义计数器的计数方式，来改变从哪个设备先查询等。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6fc0b9baef4000172b465032bcd6e6e4_720w.jpg" alt="img"></p><p>为每个I&#x2F;O接口增加了BR和BG，<strong>通过排队器来进行优先级排队</strong>。这种方式使用的线数较多。</p><h4 id="3-5-2-总线通信控制"><a href="#3-5-2-总线通信控制" class="headerlink" title="3.5.2 总线通信控制"></a>3.5.2 总线通信控制</h4><p>为了解决通信双方（主从设备）协调配合的问题。</p><p>总线的传输周期（完成一次主从设备完整可靠的传输所需要的时间）：</p><ul><li>申请分配阶段：主设备申请，总线决定</li><li>寻址阶段：主设备向向从设备给出地址和命令</li><li>传数阶段：主设备和从设备进行交换数据</li><li>结束阶段：主从设备撤销有关信息</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-09b037f3510443143bc0562ae67b0637_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b9fbb40ece372f60d0c503a8203edd0e_720w.jpg" alt="img"></p><ul><li>T1，主设备给出地址信号</li><li>T2，给出从设备的读命令信号</li><li>T3，从设备给出数据，输出到总线，完成数据交换</li><li>T4，撤销地址信号，结束周期</li></ul><p>强制同步，如果设备之间速度不同，快的设备需要等慢的设备。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-bf4f0e7fde69e32e3e6c096b5d150a05_720w.jpg" alt="img"></p><p><strong>不互锁：不管从设备是否接收到请求信号，过段时间主设备都会撤销请求。不管主设备是否接收到应答信号，从设备多段时间都会撤销应答。</strong></p><p>半互锁和全互锁针对上面进行改进。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c350d75aee932c08977c635af7c70739_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-bf899d524112b9cd84b9f79fa2e2545e_720w.jpg" alt="img"></p><p>增加等待响应信号，当wait为低电平，则等待一个T。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-498179fa698c849afd894fd05900aea6_720w.jpg" alt="img"></p><p>使用分离式通信来将总线空闲的时间也充分利用起来。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-a5e440385d7b6d3ad44f917e1c23d309_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f509b451261ca9960f4d801aeddc7543_720w.jpg" alt="img"></p><h2 id="4-存储器"><a href="#4-存储器" class="headerlink" title="4. 存储器"></a>4. 存储器</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>按照存取方式对存储器进行分类：</p><ul><li>存取时间与物理地址无关（随机访问）：随机存储器、只读存储器。</li><li>存取时间与物理地址有关（串行访问）：顺序存取存储器（磁带）、直接存取存储器（磁盘）。</li></ul><p>按照在计算机中的作用分类：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-3e474b4e2264a9d5329dbb547d6f66e8_720w.jpg" alt="img"></p><p>存储器的层次结构：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1c67cdce3a2f34f0bde957a63c88f7eb_720w.jpg" alt="img"></p><ul><li>寄存器包括体系结构寄存器和非体系结构寄存器。</li><li>一部分缓存放在了CPU之中。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ecb8493e385dd90519547b2260d84a0a_720w.jpg" alt="img"></p><ul><li>缓存——主存层次，使用硬件方法连接到一个整体（对程序员透明，即不需要了解），速度较快，解决CPU和主存之间速度差距较大的问题，缓存即为cache，CPU可以直接从缓存调用数据，cache和主存也进行数据交换。使用主存储器的实地址和物理地址。</li><li>主存——辅存层次，使用软硬件结合方式连接，容量较大，解决容量不足问题。这个层次称为虚拟存储器，使用虚地址和逻辑地址。</li></ul><h3 id="4-2-主存储器"><a href="#4-2-主存储器" class="headerlink" title="4.2 主存储器"></a>4.2 主存储器</h3><h4 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h4><p>主存的基本组成：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-a4cb6c6fa5d63b7d76cc8c9c98532a73_720w.jpg" alt="img"></p><p>主存与CPU之间的联系：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c14afbf373caeb20cf157df27bbda84c_720w.jpg" alt="img"></p><p>主存中存储单元地址的分配：</p><ul><li>每个字节（8位）一个地址，如果一个存储单元存储32位，即四个字节为一个字，可<strong>以将高位字节&#x2F;低位字节，放在小的地址作为字地址。</strong></li></ul><p>主存的技术指标：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-42cda5798755d4a507b46a0d2dd0f789_720w.jpg" alt="img"></p><h4 id="4-2-2-主存储器半导体芯片简介"><a href="#4-2-2-主存储器半导体芯片简介" class="headerlink" title="4.2.2 主存储器半导体芯片简介"></a>4.2.2 主存储器半导体芯片简介</h4><p>基本结构：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b7ff96d3e063a3a156a9994a487b0b00_720w.jpg" alt="img"></p><ul><li>地址线（单向）给出地址，经过译码驱动电路来选择指定的存储单元，完成数据的读写操作（数据线双向）。</li><li>片选线是芯片选择信号，给出这次选择的地址是不是这个芯片的地址。</li><li>读写控制线，控制操作允许读还是写。</li><li>根据地址线和数据线条数，可以计算出芯片容量。<strong>如果地址线10条，数据线4条，那么芯片容量则为1K×4位。即1K个地址，每个地址数据4位。</strong></li></ul><p>译码驱动方式：</p><p>第一种方法是线选法</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-72e60fb35e95ccd82f6196065319305a_720w.jpg" alt="img"></p><ul><li>使用地址译码器，给定输入，输出只有一根线（字线）是有效的，图中一根线中是8个芯片组合成一个字，那么只有一根线的这一组芯片有效。</li><li><strong>这种方法，每个字的存储单元都需要一根线，当容量较大的时候，很麻烦。</strong></li></ul><p>第二种方法是重合法</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b3e78113246d8c759c93ac9f54857c93_720w.jpg" alt="img"></p><ul><li>将所有存储单元布置成二维的阵列，使用两个地址译码器XY，一组(X,Y)对应一个存储单元。</li><li>这样会大大降低所需要的线数量。</li></ul><h4 id="4-2-3-随机存取存储器（RAM）"><a href="#4-2-3-随机存取存储器（RAM）" class="headerlink" title="4.2.3 随机存取存储器（RAM）"></a>4.2.3 随机存取存储器（RAM）</h4><h5 id="4-2-3-1-静态RAM（SRAM）"><a href="#4-2-3-1-静态RAM（SRAM）" class="headerlink" title="4.2.3.1 静态RAM（SRAM）"></a>4.2.3.1 静态RAM（SRAM）</h5><p>SRAM的基本电路：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f91729a10c9c02ac0e0b40eee2873448_720w.jpg" alt="img"></p><ul><li><strong>使用触发器T1-T4来存储0&#x2F;1，T5、T6控制存储单元读写，实际中会有许多虚线框进行堆叠，T7、T8列开关，一列共用。同样，可以横向进行堆叠，那么行地址选择的这一行，所有存储单元的T5和T6都会导通，但是只有对应列也有效的那个存储单元才进行读写。</strong></li><li><strong>通过行选和列选，选中进行读写操作的存储单元。</strong></li></ul><p>SRAM芯片举例（Intel 2114）：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e69116568a98aebf26024116e8306794_720w.jpg" alt="img"></p><ul><li>WE读写控制信号，CS片选信号，A0-A9为地址线，4个I&#x2F;O数据线。</li><li>10根地址线，使用重合法，6线为行地址，4线为列地址，每个列信号控制四列，这样一次就可以选择4位，将这4位看做是一个存储单元。就完成了1K×4位的选择。</li></ul><h5 id="4-2-3-2-动态RAM（DRAM）"><a href="#4-2-3-2-动态RAM（DRAM）" class="headerlink" title="4.2.3.2 动态RAM（DRAM）"></a>4.2.3.2 动态RAM（DRAM）</h5><p>DRAM的基本电路：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1c1006911b42899ac25b7532eb848f0a_720w.jpg" alt="img"></p><ul><li>利用电容，如果电容保存了电荷，则认为保存是1，没有电，则认为是0。</li><li>保存在Cg上，T1、T2、T3是控制管。</li><li><strong>读出信息与原信息相反，需要加非门。</strong></li><li><strong>写入信息与输入信息相同。</strong></li></ul><p>还有一种结构是单管动态RAM：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7d5a3d3ecb3f411a4117c7bfee4558a2_720w.jpg" alt="img"></p><ul><li>读出数据时，数据线有电，则为1。</li><li>写入时，Cs充电为1，放电为0。</li></ul><p>三管DRAM芯片举例（Intel 1103）：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-fb0f1504423e9c9a49b2f1d62e295ae1_720w.jpg" alt="img"></p><ul><li>因为电容会漏电，刷新放大器会定时对存储的信息进行刷新。</li></ul><p>单管DRAM芯片举例（Intel 4116 16k×1位）：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-33b78430483e07932e1a7ef4947bedd8_720w.jpg" alt="img"></p><ul><li>只有7根地址线，通过两次，来接受行地址和列地址，存放到对应的缓存器中。</li><li>通过行时钟、列时钟、写时钟来控制读写。</li></ul><p>动态RAM的刷新：</p><ul><li>每一次刷新只与行地址有关，与列地址没有关系，每次刷新一行。</li><li>集中刷新（在某段时间集中刷新所有的电容），这段时间DRAM是不可用的，称为死区。</li><li>分散刷新（每次读写操作之后，将某一行刷新），相当于将原来的读写操作的时间变长，把刷新操作放在读写操作中，这样就不存在死区。分散刷新比较频繁，有点过度刷新了。</li><li>异步刷新（将上面两种结合），则每隔一段时间对某一行进行刷新，即多个读写操作加一个刷新操作。</li></ul><h5 id="4-2-3-3-两种RAM的比较"><a href="#4-2-3-3-两种RAM的比较" class="headerlink" title="4.2.3.3 两种RAM的比较"></a>4.2.3.3 两种RAM的比较</h5><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-3cea24c6da2cb4a2d97fbceaf3f26507_720w.jpg" alt="img"></p><ul><li>DRAM的集成度较高，每个存储单元复杂度较低。</li><li>SRAM的速度较快，一般用作缓存。</li></ul><h4 id="4-2-4-只读存储器（ROM）"><a href="#4-2-4-只读存储器（ROM）" class="headerlink" title="4.2.4 只读存储器（ROM）"></a>4.2.4 只读存储器（ROM）</h4><p>ROM中一般保存系统信息或系统程序。早期是只读的，不可以写，经过多年的发展和改进，现在的ROM可以自己多次读写。</p><ul><li>掩模ROM（MROM）：只读，不能修改。行列选择线交叉处有MOS管则为1，没有则为0。</li><li>PROM（一次性编程）：熔丝断了，则为0，否则为1。可以一次性的破坏性编程。</li><li>EPROM（可以多次编程）：N型沟道浮动栅MOS电路。S与D导通为1，不导通为0。</li><li>EEPROM（多次性编程）：电可擦写、局部擦写、全部擦写。</li><li>Flash Memory（闪存型存储器）：比EEPROM快，具有RAM的一些功能。</li></ul><h4 id="4-2-5-CPU与存储器的连接"><a href="#4-2-5-CPU与存储器的连接" class="headerlink" title="4.2.5 CPU与存储器的连接"></a>4.2.5 CPU与存储器的连接</h4><p>存储器容量扩展可以通过位扩展（增加存储字长）、字扩展（增加存储字的数量）、同时扩展。</p><p>CPU与存储器的连接：</p><ul><li>地址线的连接：<strong>低位作为地址，高位作为片选信号</strong>。</li><li>数据线的连接</li><li>读写命令控制线的连接</li><li>片选线的连接：<strong>MREQ信号（表示该信号是连接存储器还是I&#x2F;O接口）一定要连接到片选信号中，</strong>使得只有这个信号有效，才是CPU和内存连接工作。</li><li>合理选择存储芯片（ROM&#x2F;RAM，芯片的性能参数）</li><li>其他：时序、负载</li></ul><h4 id="4-2-6-存储器的校验"><a href="#4-2-6-存储器的校验" class="headerlink" title="4.2.6 存储器的校验"></a>4.2.6 存储器的校验</h4><p>校验，检测合法代码，对非法代码进行纠错。</p><p><strong>编码的纠错、检错能力与编码的最小距离有关。最小距离为任意两组合法代码之间二进制位数的最小差异。</strong> $$ L-1 &#x3D; D + C\ (D≥C) $$ <strong>L为最小距离，D为检测错误的位数，C为纠正错误的位数。</strong></p><p>汉明码是具有一位纠错能力的编码，汉明码都采用了奇偶校验和分组校验（分组的奇偶校验，分组之间是有重叠的，校验位放在2 ^ k处，k&#x3D;0,1,2,3…）。</p><p>汉明码的分组，将代码中每一位进行分组（1,2,3,4,5,6,7序号），<strong>将每一位的序号进行分组，序号的二进制最右边一位为1的，第一组，右边第二位为1的，第二组……</strong></p><p>&#x3D;&#x3D;<strong>最后的校验结果，哪一位是1，那么这位对应的那组中的那个序号的代码位出错。如果出现了多个1，那么就是这几个组中公共的那位出错了。</strong>&#x3D;&#x3D;</p><h4 id="4-2-7-提高主存的访问以及存储速度"><a href="#4-2-7-提高主存的访问以及存储速度" class="headerlink" title="4.2.7 提高主存的访问以及存储速度"></a>4.2.7 提高主存的访问以及存储速度</h4><p>CPU速度提升很快，但是存储器的速度提升较慢。</p><p><strong>我们可以采用高速器件，采用层次结构（Cache-主存）,&#x3D;&#x3D;调整主存结构。&#x3D;&#x3D;</strong></p><ul><li>单体多字系统：使得存储器的存储字长大于CPU的字长（比如是CPU字长的4倍），这样一次读取就可以读取多个指令。<strong>但是这样会导致存储器结构复杂， 而且，如果需要执行的指令不是连续存放的，会更麻烦。</strong></li><li>多体并行方式：</li><li>高位交叉：对各个存储体进行编号，存储体内部自行编号，每个存储体独立，有自己的控制编号。这样CPU给出的地址是<strong>体号+体内地址</strong>，各个存储体可以并行处理。（类似存储器容量的扩展）如果程序指令存方式顺序的，实际上还是在一个存储体中，并无法提升存储体速度。</li><li>低位交叉：<strong>体内地址+体号</strong>，使用横向的编码，比如存储体为M0-M3，那么第一个地址为M0的第一个位置，第二个地址为M1的第一个位置……这样<strong>M0中所有地址后两位都为00，M1都为01，M2都为10，M3都为11。后两位给出了存储体的选择地址。</strong>这样如果程序指令顺序存放的地址，实际上是不同存储体并行处理，这样就提升了效率，流水操作。</li></ul><h3 id="4-3-高速缓冲存储器（Cache）"><a href="#4-3-高速缓冲存储器（Cache）" class="headerlink" title="4.3 高速缓冲存储器（Cache）"></a>4.3 高速缓冲存储器（Cache）</h3><h4 id="4-3-1-概述"><a href="#4-3-1-概述" class="headerlink" title="4.3.1 概述"></a>4.3.1 概述</h4><p>CPU与主存（DRAM）之间存在速度差异，为了避免CPU“空等”的现象，使用cache。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-353ef48785f13a861a6c7098e01cf40b_720w.jpg" alt="img"></p><p><strong>程序访问的局部性原理</strong>：</p><ul><li>时间的局部性：当前正在使用的指令或数据，会在不久的将来还会使用到，那么应该把这种数据或指令放在缓存中。</li><li>空间的局部性：当前正在使用的指令或数据，不久的将来，相邻的指令或数据会使用到，那么应该把当前和相邻的指令和数据放到缓存中。</li></ul><p>cache的工作原理：</p><p><strong>把主存和cache分成大小相等的块</strong>，每个块大小相等，主存的块数量远远大于cache的块数量。**&#x3D;&#x3D;主存与cache之间的信息传送是按块传送，块内地址不变，cache的每个块的标记，标记了这个块是主存的哪个块。&#x3D;&#x3D;**</p><p>主存块调入了缓存（即cache标记了），称为命中，CPU可直接在缓存中取得数据；如果没有调入，称为未命中。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b389e6288a972d06339a6a02668b9b12_720w.jpg" alt="img"></p><p>我们希望，每次执行程序，都尽可能的在cache中提取数据，这样速度会很快。<strong>CPU欲访问的信息在Cache中的比率称为命中率，命中率与Cache的容量和块长有关。</strong>一般每块取4-8个字，一般为一个存取周期内从主存调出的信息长度。</p><p>cache与主存的访问效率：</p><p><strong>这里面平均访问时间为每次访问的平均时间</strong>（可能从cache，可能从主存）。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-483109d42dab83c244559504f862bf9b_720w.jpg" alt="img"></p><h4 id="4-3-2-cache的基本结构与读写操作"><a href="#4-3-2-cache的基本结构与读写操作" class="headerlink" title="4.3.2 cache的基本结构与读写操作"></a>4.3.2 cache的基本结构与读写操作</h4><p>cache的基本结构：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-01dc495db6a09ddf0022618f1bb88640_720w.jpg" alt="img"></p><p>读写操作：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-61c29bfc2dcc23820a116b253e1dfc4a_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2e4806efb2c9888730795934df565fa6_720w.jpg" alt="img"></p><ul><li>前者时刻保持了cache和主存的一致，后者只写cache中，当cache中退出时才写回主存。</li></ul><p>cache的改进：</p><ul><li>增加cache的级数：片内cache，片外cache。</li><li>分立缓存：指令cache，数据cache。</li></ul><h4 id="4-3-3-cache-主存的地址映射"><a href="#4-3-3-cache-主存的地址映射" class="headerlink" title="4.3.3 cache-主存的地址映射"></a>4.3.3 cache-主存的地址映射</h4><p>即主存的任意一块加载到cache中的哪块。</p><p>直接映射：</p><p><strong>即主存中任意一个块，只能映射到指定的一个cache块中，</strong>cache块可以是一对多的。相当于将主存分区，每个区内的这些块，对应于cache的所有块；<strong>这样在cache的标记中，有t位的标记，表示当前该cache块存放的是主存哪个区的对应位置信息。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b4ae19aa355063f31023956d9df31399_720w.jpg" alt="img"></p><hr><p>这种方法cache块的利用率比较低，且可能会冲突。</p><p>全相联映射：</p><p><strong>主存中任意一个块，可以被放入cache中的任意一个块中。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cdf526e1135e3779f38c0f1d70867524_720w.jpg" alt="img"></p><p>这样的话，<strong>虽然块的利用率高了，但是因为块可以映射到任意一个位置，如果查询某个主存块是否已经放入cache，需要比较所有的cache标记，速度较慢。</strong></p><p>**&#x3D;&#x3D;组相联映射&#x3D;&#x3D;**：</p><p>与直接映射相似，**&#x3D;&#x3D;将cache分组，每个组可以有多个块；将主存分区，每个区的大小为cache的组数&#x3D;&#x3D;<strong>。这样每个区的第0块，可以放入cache第0组的任何一个位置，</strong>因为每个组有多个块，解决了直接映射的冲突问题；想查询某个主存的块是否放入了cache，只需要在对应的组进行查询即可，解决了全相联映射的问题。**</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8bf0c9b2d66ba574d6c7d8b0f39004d5_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f97734f6f2adaff46b770237f2722735_720w.jpg" alt="img"></p><h4 id="4-3-4-替换算法"><a href="#4-3-4-替换算法" class="headerlink" title="4.3.4 替换算法"></a>4.3.4 替换算法</h4><p>如果内存块满了，如何替换，将谁弹出。</p><p><strong>先进先出（FIFO）算法</strong></p><p><strong>近期最少使用（LRU）算法</strong></p><h3 id="4-4-辅助存储器"><a href="#4-4-辅助存储器" class="headerlink" title="4.4 辅助存储器"></a>4.4 辅助存储器</h3><p>辅助存储器的主要作用是保存程序、文档和影音资料，<strong>不能直接与CPU交换信息，需要调入主存才能进行读写。</strong></p><p>包括磁盘存储器和光盘存储器等。</p><h2 id="5-输入输出系统"><a href="#5-输入输出系统" class="headerlink" title="5. 输入输出系统"></a>5. 输入输出系统</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p><strong>发展概况：</strong></p><ul><li>早期CPU与I&#x2F;O设备串行工作，分散连接。使用程序查询方式连接。</li><li>后来使用总线连接（一条总线可以连接多个设备），出现了I&#x2F;O接口和DMA控制器，并行工作。</li><li>具有通道结构的阶段。</li><li>具有I&#x2F;O处理机的阶段（I&#x2F;O的独立性更强，使用I&#x2F;O处理器）。</li></ul><p><strong>I&#x2F;O系统的组成：</strong></p><ul><li><p>I&#x2F;O软件：</p></li><li><ul><li>CPU中的I&#x2F;O指令，来控制外部设备与主机协调工作，**格式为&#x3D;&#x3D;操作码+命令码+设备码&#x3D;&#x3D;**。</li><li>通道指令，通道自身的指令。</li></ul></li><li><p>I&#x2F;O硬件：</p></li><li><ul><li>设备以及I&#x2F;O接口，或者设备以及设备控制器，通道。</li></ul></li></ul><p><strong>I&#x2F;O设备与主机的联系方式：</strong></p><ul><li>对I&#x2F;O设备进行编址：<strong>统一编址（将I&#x2F;O地址放在内存的地址空间中，可以直接使用指令对外部设备进行存取数），不统一编址（需要使用专门的I&#x2F;O指令来调用设备）。</strong></li><li>设备选址：使用设备选择电路识别某个设备是否被选中。</li><li>数据传送方式：串行（一位一位传输）&#x2F;并行（多位同时传输）。</li></ul><p><strong>联络方式：</strong></p><ul><li>立即响应，接收到数据&#x2F;指令，直接响应。</li><li>异步工作，使用应答信号，可以并行也可以串行（I&#x2F;O设备与接口之间）</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-36018d99ff90a6a72e0d9566a3c2a933_720w.jpg" alt="img"></p><ul><li>同步工作，使用同步时标。</li></ul><p><strong>I&#x2F;O设备与主机的连接方式：</strong>分散连接（辐射式连接，每台设备都配有一套控制线路和信号线），总线连接。</p><p><strong>I&#x2F;O设备与主机信息传送的控制方式：</strong></p><ul><li>程序查询方式（CPU与I&#x2F;O串行工作，<strong>CPU需要等待，效率很低</strong>，CPU连接I&#x2F;O设备和内存）</li><li>程序中断方式（部分并行，<strong>CPU被一定程度解放，在IO设备自身准备的时候，CPU可以先进行自己的工作，当IO与主机进行信息交换的时候，CPU暂停自身程序，来参与信息交换</strong>）。</li><li>DMA方式（使外部设备与内存建立连接，解放cpu，**主存与IO之间有一条直接数据通道，通过DMA控制器可以直接进行数据交换，&#x3D;&#x3D;采用周期窃取，借用一个存取周期，使得DMA控制总线，完成数据在IO和主存之间的传送&#x3D;&#x3D;**，在这个周期中，CPU不能控制总线，但可以继续执行不需要访存的指令）。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c8814fbc3f16c95db1e05626741ba498_720w.jpg" alt="img"></p><h3 id="5-2-外部设备"><a href="#5-2-外部设备" class="headerlink" title="5.2 外部设备"></a>5.2 外部设备</h3><ul><li>输入设备：键盘、鼠标、触摸屏</li><li>输出设备：显示器、打印机</li><li>其他：A&#x2F;D,D&#x2F;A转换器，终端，汉字处理</li><li>多媒体技术：VR等</li></ul><h3 id="5-3-I-x2F-O接口"><a href="#5-3-I-x2F-O接口" class="headerlink" title="5.3 I&#x2F;O接口"></a>5.3 I&#x2F;O接口</h3><h4 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h4><p>为什么要设置接口：</p><ul><li>实现设备的选择</li><li>实现数据缓冲，达到速度匹配</li><li>实现数据串&#x2F;并格式转换</li><li>实现电平转换（主机和IO设备工作电平可能不一致）</li><li>传送控制命令</li><li>反映设备的状态（忙、就绪、中断请求）</li></ul><h4 id="5-3-2-接口的功能和组成"><a href="#5-3-2-接口的功能和组成" class="headerlink" title="5.3.2 接口的功能和组成"></a>5.3.2 接口的功能和组成</h4><p>主机通过IO总线与IO设备相连接。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-234b9a9141dabb3978007f891e1a90c8_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-049a5f99304a3a6a6fa3e540ebd7859e_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-50f0d2effcdf192b2efa20964052a8a9_720w.jpg" alt="img"></p><p>五大部分：<strong>数据缓冲寄存器、设备状态标记、控制逻辑电路、设备选择电路、命令寄存器和命令译码器。</strong></p><h4 id="5-3-3-接口类型"><a href="#5-3-3-接口类型" class="headerlink" title="5.3.3 接口类型"></a>5.3.3 接口类型</h4><ul><li>按照数据传送方式：串行&#x2F;并行</li><li>按照功能选择的灵活性：可编程接口&#x2F;不可编程接口</li><li>按通用性：通用接口&#x2F;专用接口</li><li>按数据传送的控制方式：中断接口&#x2F;DMA接口</li></ul><h3 id="5-4-程序查询方式"><a href="#5-4-程序查询方式" class="headerlink" title="5.4 程序查询方式"></a>5.4 程序查询方式</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-a3845c55270c15d3d1c93bda1307cfa1_720w.jpg" alt="img"></p><p><strong>程序查询方式的接口电路：</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-02069a45157ce0961a13a2c881601ec9_720w.jpg" alt="img"></p><ul><li>当D等于1的时候，IO完成了送入数据到DBR，<strong>此时CPU通过数据线读入数据，在D等于1之前，CPU一直在原地踏步等待。</strong></li></ul><h3 id="5-5-程序中断方式"><a href="#5-5-程序中断方式" class="headerlink" title="5.5 程序中断方式"></a>5.5 程序中断方式</h3><h4 id="5-5-1-中断的概念"><a href="#5-5-1-中断的概念" class="headerlink" title="5.5.1 中断的概念"></a>5.5.1 中断的概念</h4><p>CPU在执行程序的时候，<strong>遇到特殊事件或异常事件，暂停原来的程序，去处理这个事件（执行中断服务程序），之后再继续执行原来的程序。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ed5ead354e598f429c5d2fbb5fc5c16e_720w.jpg" alt="img"></p><h4 id="5-5-2-I-x2F-O中断的产生"><a href="#5-5-2-I-x2F-O中断的产生" class="headerlink" title="5.5.2 I&#x2F;O中断的产生"></a>5.5.2 I&#x2F;O中断的产生</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-21b5873456d87e7ba9dc462989f79262_720w.jpg" alt="img"></p><h4 id="5-5-3-程序中断方式的接口电路"><a href="#5-5-3-程序中断方式的接口电路" class="headerlink" title="5.5.3 程序中断方式的接口电路"></a>5.5.3 程序中断方式的接口电路</h4><ul><li>配置中断请求触发器和中断屏蔽触发器（如果目前执行的程序比请求的设备优先级高，则屏蔽该中断请求）</li><li>排队器（有多个中断的话，需要使用排队器，根据优先级进行排队）</li><li>中断向量地址形成部件（形成中断服务程序的入口地址）</li></ul><p><strong>配置中断请求触发器和中断屏蔽触发器：</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c24a7e7bd53d7dfa4240dab976d1659c_720w.jpg" alt="img"></p><p><strong>排队器：</strong></p><p>排队器可以使用硬件电路来实现（在CPU内或接口电路中），也可以在软件中实现。</p><p>链式排队器，<strong>输出只有一位是高电平，其他都是低电平，高电平表示此时最高优先级的中断。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ab622ca1a033ab52bc812bee17af7638_720w.jpg" alt="img"></p><p><strong>中断向量地址形成部件：</strong></p><p>找到中断服务程序的入口地址，同样可以使用软件或硬件方法（硬件向量法）。</p><p><strong>硬件向量法由硬件产生向量地址，再由向量地址找到入口地址。</strong></p><p>中断向量地址形成部件的<strong>输入为排队器的输出</strong>（只有一位是高电平，其他都是低电平），&#x3D;&#x3D;<strong>输出为该种中断的向量地址，再通过向量地址，找到该种中断的中断服务程序的入口地址。</strong>&#x3D;&#x3D;</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-882c410475b3f0119b6ca28550ef0942_720w.jpg" alt="img"></p><h4 id="5-5-4-I-x2F-O中断处理过程"><a href="#5-5-4-I-x2F-O中断处理过程" class="headerlink" title="5.5.4 I&#x2F;O中断处理过程"></a>5.5.4 I&#x2F;O中断处理过程</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6e0573d5842b488b3b4832ca6fb445d9_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7d7ab148498ac3048a68e578f0fadf3d_720w.jpg" alt="img"></p><h4 id="5-5-5-中断服务程序流程"><a href="#5-5-5-中断服务程序流程" class="headerlink" title="5.5.5 中断服务程序流程"></a>5.5.5 中断服务程序流程</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2d97e87947354b4eaa9dd08b23b70701_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f3f3d63c25f2077e0fc31053ce2c19f4_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c64231e9418cf7eb85a2ba6e2d7ec135_720w.jpg" alt="img"></p><h3 id="5-6-DMA（直接存储器访问）方式"><a href="#5-6-DMA（直接存储器访问）方式" class="headerlink" title="5.6 DMA（直接存储器访问）方式"></a>5.6 DMA（直接存储器访问）方式</h3><h4 id="5-6-1-DMA方式的特点"><a href="#5-6-1-DMA方式的特点" class="headerlink" title="5.6.1 DMA方式的特点"></a>5.6.1 DMA方式的特点</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9227e4cde1f4b33b4f38d010019fad73_720w.jpg" alt="img"></p><p>程序中断方式必须使用CPU来作为缓冲（即使是主存和IO之间进行信息交换）。</p><p>DMA方式，不需要CPU作为缓冲。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f6741cf48a31210b6e257e0b9a9b84b1_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2f1017e17df182ab9429359649b47a79_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-832462276ad36e49d68737e7dc30df55_720w.jpg" alt="img"></p><ul><li>这种方法的实用性不强。</li></ul><h4 id="5-6-2-DMA接口的功能和组成"><a href="#5-6-2-DMA接口的功能和组成" class="headerlink" title="5.6.2 DMA接口的功能和组成"></a>5.6.2 DMA接口的功能和组成</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e848ed9bf4bb8e6ae13579260d54a240_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-32ddddbf1c7cb853cb6cb3fcb9ff032b_720w.jpg" alt="img"></p><ul><li>AR：地址寄存器，WC：计数器，对传输数据量计数。</li><li>BR：数据缓冲器，DAR：设备地址寄存器，供设备选择电路使用；对于硬盘等设备，可以保存扇区号等。</li><li>DMA控制逻辑：完成与设备之间的请求回答，与总线的请求回答。</li><li>中断机构：传输结束之后的后续处理。</li></ul><h4 id="5-6-3-DMA的工作过程"><a href="#5-6-3-DMA的工作过程" class="headerlink" title="5.6.3 DMA的工作过程"></a>5.6.3 DMA的工作过程</h4><p><strong>DMA的传送过程</strong>：<strong>预处理、数据传送、后处理。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-742b30c0695d121fe5cb564d17b8736f_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1a1e25ed9572b59ef4b628189823800e_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-54fc05c234015ac602e81a08fff0ae20_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cc3a9d2c01fe5198070dcc7196ec725c_720w.jpg" alt="img"></p><p><strong>DMA接口与系统的连接方式：</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-161ece29eeada9301c4280a7313e2795_720w.jpg" alt="img"></p><ul><li>多个DMA接口连在一起，共享一条请求线。各DMA同样有优先级顺序。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b9b57b9ea08c8ba41c3934c190e477d6_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-38326dc785a0b2e2c4b395966cf8138c_720w.jpg" alt="img"></p><h4 id="5-6-4-DMA接口的类型"><a href="#5-6-4-DMA接口的类型" class="headerlink" title="5.6.4 DMA接口的类型"></a>5.6.4 DMA接口的类型</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8e8b0eb2842291a42685d4ee48324b3f_720w.jpg" alt="img"></p><ul><li>一个接口连了多个设备，但是每次只能与一个设备使用。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-45250bc057df82c94407bceb1c3f409e_720w.jpg" alt="img"></p><ul><li>每个通道有多个子通道，子通道可以并行使用。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-250ecbfe831995cc07959343b504c23d_720w.jpg" alt="img"></p><h2 id="6-计算机的运算方法"><a href="#6-计算机的运算方法" class="headerlink" title="6. 计算机的运算方法"></a>6. 计算机的运算方法</h2><h3 id="6-1-无符号数和有符号数"><a href="#6-1-无符号数和有符号数" class="headerlink" title="6.1 无符号数和有符号数"></a>6.1 无符号数和有符号数</h3><h4 id="6-1-1-无符号数"><a href="#6-1-1-无符号数" class="headerlink" title="6.1.1 无符号数"></a>6.1.1 无符号数</h4><p>没有正负号的数据，<strong>寄存器的位数即为无符号数的表示范围。</strong></p><h4 id="6-1-2-有符号数"><a href="#6-1-2-有符号数" class="headerlink" title="6.1.2 有符号数"></a>6.1.2 有符号数</h4><p>分为符号部分和数值部分。</p><p>机器数<strong>保存符号、小数点位置以及数值</strong>。计算机中<strong>没有</strong>专门的硬件保存小数点，都是以约定的形式给出。</p><p><strong>原码表示法：</strong></p><p>整数：&#x3D;&#x3D;<strong>符号位+，+数值。符号位0为正，1为负。</strong>&#x3D;&#x3D;逗号将符号位和数值分隔开，数值其实是数的绝对值。</p><p>小数：&#x3D;&#x3D;<strong>符号位+.+小数部分，符号位0为正，1为负。</strong>&#x3D;&#x3D;小数点将符号位和小数部分分隔开。</p><p><strong>上面的逗号和小数点，都不需要在计算机中存储，这里是方便人来阅读。</strong></p><p>使用原码进行加法的时候，结果的符号可正可负，希望找到一个与负数等价的正数来替代这个负数，这样就可以使得减法变成加法，即补码表示法。</p><p><strong>补码表示法：</strong></p><p>整数：<strong>正数的补码与原码一致，负数的补码为它的原码，除符号位以外，各位取反，最后加1。</strong></p><p>小数：<strong>正数的补码与原码一致，负数的补码为它的原码，除符号位以外，各位取反，最后加1。</strong></p><p><strong>反码表示法：</strong></p><p>正数的反码就是原码，负数的反码，将原码除符号位外，所有位取反。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-d897d8301ade757735da507c16e5cc5e_720w.jpg" alt="img"></p><p><strong>移码表示法（只有整数形式定义）：</strong></p><p>补码很难直接判断其真值大小。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6a3cdf6050e60506e92dd16a157e2b6e_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2d9837b1a6bedaf32be3f0fb589de95a_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-394d544564c5217eee08b41b26e4f029_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ed12f9fda7ee5912620a894f5a2193e1_720w.jpg" alt="img"></p><h3 id="6-2-数的定点表示和浮点表示"><a href="#6-2-数的定点表示和浮点表示" class="headerlink" title="6.2 数的定点表示和浮点表示"></a>6.2 数的定点表示和浮点表示</h3><h4 id="6-2-1-定点表示"><a href="#6-2-1-定点表示" class="headerlink" title="6.2.1 定点表示"></a>6.2.1 定点表示</h4><p>小数点按照约定方式标出，没有硬件完成小数点，根据设计人员的约定来进行表示。</p><p>小数点可放在数符和数值之间（小数定点机），或数值之后（整数定点机）。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6e8acba8b8fc1dded67e97f753ec5977_720w.jpg" alt="img"></p><h3 id="6-2-2-浮点表示"><a href="#6-2-2-浮点表示" class="headerlink" title="6.2.2 浮点表示"></a>6.2.2 浮点表示</h3><p>定点表示的数，表示范围小，为了表示两个大小相差很大的数据，需要很长的机器字长。数据存储单元的利用率很低。</p><p>浮点数的一般形式 $$ N &#x3D; S×r^j $$ S为尾数，j为阶码，r为尾数的基值，计算机中r通常取2,4,8,16。<strong>在计算机中，S为小数，可正可负；j为整数，可正可负。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2009b694f8408aa43ffad17e1cc32506_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ec6810b1fcde4b5b448e56e5c7fd1394_720w.jpg" alt="img"></p><p>对浮点数进行规格化，是为了尽可能保证数据的精度，让有效的位数尽可能多。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-14d223a976be94b4544f5c9194fcce7e_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6bc74400fdf3408fc608f1abe72d9ead_720w.jpg" alt="img"></p><h3 id="6-3-定点运算"><a href="#6-3-定点运算" class="headerlink" title="6.3 定点运算"></a>6.3 定点运算</h3><h4 id="6-3-1-移位运算"><a href="#6-3-1-移位运算" class="headerlink" title="6.3.1 移位运算"></a>6.3.1 移位运算</h4><p>数据相对于小数点进行左移&#x2F;右移（小数点不动）。左移，绝对值扩大，右移，绝对值缩小。移位与加减法配合，能够实现乘除法运算。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-99ed7169acfb00d5d23a71ef346ee12a_720w.jpg" alt="img"></p><ul><li>注意，&#x3D;&#x3D;符号位保持不变&#x3D;&#x3D;。</li></ul><p><strong>算数移位的硬件实现：</strong></p><p>即，左移，最高位扔掉，其他位左移，末尾补0&#x2F;1。</p><p>右移，最低位扔掉，其他位右移，高位补0&#x2F;1。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-653e755f9801caab4583a36a8cbda674_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cd77d50aaada2fb7146cbd52dd0a86b5_720w.jpg" alt="img"></p><h4 id="6-3-2-加减法运算"><a href="#6-3-2-加减法运算" class="headerlink" title="6.3.2 加减法运算"></a>6.3.2 加减法运算</h4><p>主要是使用补码进行加减法运算，因为可以将减法变为加法。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e65743521c23abe2e32f8ee8393a25a2_720w.jpg" alt="img"></p><p>还需要判断处理溢出。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-33b395859242666145fd1b1c5b1776b0_720w.jpg" alt="img"></p><p><strong>两个同符号的数，数值运算产生了进位，进位到了符号位，改变了符号位，则就出现了溢出。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9d5763771e2521ef64139e69067539a0_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-0467e3da10cb7cd7d759085ed9d5416c_720w.jpg" alt="img"></p><p>核心是n+1位加法器，两个寄存器保存参与计算的数据。</p><h4 id="6-3-3-乘法运算"><a href="#6-3-3-乘法运算" class="headerlink" title="6.3.3 乘法运算"></a>6.3.3 乘法运算</h4><p>模拟笔算乘法的过程，符号位进行单独处理（异或电路），可以将乘数放到移位寄存器中。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-22a4364f5174c4d7d78c48d996089be3_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2d665149b1a2f1f24edb23c4ef0daa57_720w.jpg" alt="img"></p><ul><li>n是参加运算的数的数值部分长度。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2d74e4b2493b2bf1a6460478cc49fb29_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9a6df8722fd24f77d5679af7c1079364_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4bf21278b48c18784327f09da3c47165_720w.jpg" alt="img"></p><h4 id="6-3-4-除法运算"><a href="#6-3-4-除法运算" class="headerlink" title="6.3.4 除法运算"></a>6.3.4 除法运算</h4><p>二进制的除法比十进制简单得多，商只会上0&#x2F;1。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8621ac43a4e2b546e48fed304433010b_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7a5e8396ed8594c5f5002c25f015f2bd_720w.jpg" alt="img"></p><ul><li>小数除法，小数都是小于1的，因此默认被除数小于除数，这样结果还是小于1的。</li></ul><p>恢复余数法：余数为正，上商1；余数为负，上商0，恢复余数。</p><p>不恢复余数法（加减交替法）</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-111286030a80c2c5d3cf0569934d52be_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6e6b4b38431bbb932c680ea7ae1a3f66_720w.jpg" alt="img"></p><h3 id="6-4-浮点四则运算"><a href="#6-4-浮点四则运算" class="headerlink" title="6.4 浮点四则运算"></a>6.4 浮点四则运算</h3><p>浮点数的加减运算：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-35da1e201bf44b2d582f91694d84e905_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-d421ec2c547508394693892c9839ea02_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-bc1bffdde6824ccc16625e8b5866fb15_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-616d0f28ff6f144b64461d550df77240_720w.jpg" alt="img"></p><h3 id="6-5-算术逻辑单元（ALU）"><a href="#6-5-算术逻辑单元（ALU）" class="headerlink" title="6.5 算术逻辑单元（ALU）"></a>6.5 算术逻辑单元（ALU）</h3><h4 id="6-5-1-ALU电路"><a href="#6-5-1-ALU电路" class="headerlink" title="6.5.1 ALU电路"></a>6.5.1 ALU电路</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-0bad4e319a1da81cc6a670bfdb479903_720w.jpg" alt="img"></p><p>Ai和Bi两个输入，进行计算的两个数值，F为输出结果，K控制进行什么计算。</p><h4 id="6-5-2-快速进位链"><a href="#6-5-2-快速进位链" class="headerlink" title="6.5.2 快速进位链"></a>6.5.2 快速进位链</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ce99c34604d325ca6e0ac2ab24f81a1b_720w.jpg" alt="img"></p><ul><li>C为进位，需要等低位的计算完之后，才能进行这一位的计算，因此需要更快的进位。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b88b52250375a02d1753fba8a94700b5_720w.jpg" alt="img"></p><ul><li>进位链是影响加法速度的瓶颈</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8346609c9d5f78ac5f05b0bf8b041f87_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cec52432cf0f836a068aa8613ca01b54_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4e16fbfa2525a9e894876b0a8bb5ec07_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8f5d21ebfa2b0f3c83045122ccfa4828_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7ac74dc29c0ecbb5871fe7a90cd741b7_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-30b1db9095be53de9df3a66f1f11271c_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b4dbabc10878c88e8be6b5e84aa4c3f5_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c67441181c3e0442c0966d8315862aa7_720w.jpg" alt="img"></p><h2 id="7-指令系统"><a href="#7-指令系统" class="headerlink" title="7. 指令系统"></a>7. 指令系统</h2><p>指令系统是计算机软硬件的交汇面。</p><h3 id="7-1-机器指令"><a href="#7-1-机器指令" class="headerlink" title="7.1 机器指令"></a>7.1 机器指令</h3><h4 id="7-1-1-指令的一般格式"><a href="#7-1-1-指令的一般格式" class="headerlink" title="7.1.1 指令的一般格式"></a>7.1.1 指令的一般格式</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-98a6b474fc548fba56b432a5389d10a0_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1a356f0b44baf334e727b419899d927d_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1350227e0717ed0bef5146fa366b56db_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8fd5bc6e4948cec19da7b918cc9eedef_720w.jpg" alt="img"></p><h4 id="7-1-2-指令字长"><a href="#7-1-2-指令字长" class="headerlink" title="7.1.2 指令字长"></a>7.1.2 指令字长</h4><p>指令的字长取决于：操作码的长度，操作数地址的长度，操作数地址的个数。</p><p>指令字长可以是固定的（指令字长&#x3D;存储字长），也可以是可变的，按照字节的倍数进行变化。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-3dd663a9f1cd87d5a5bf0855dc1310a2_720w.jpg" alt="img"></p><h3 id="7-2-操作数类型和操作种类"><a href="#7-2-操作数类型和操作种类" class="headerlink" title="7.2 操作数类型和操作种类"></a>7.2 操作数类型和操作种类</h3><h4 id="7-2-1-操作数类型"><a href="#7-2-1-操作数类型" class="headerlink" title="7.2.1 操作数类型"></a>7.2.1 操作数类型</h4><ul><li>地址：无符号整数（绝对地址），有符号数（相对地址）</li><li>数字：定点数、浮点数、十进制数</li><li>字符：ASCII</li><li>逻辑数：逻辑运算</li></ul><h3 id="7-2-2-数据在存储器中的存放方式"><a href="#7-2-2-数据在存储器中的存放方式" class="headerlink" title="7.2.2 数据在存储器中的存放方式"></a>7.2.2 数据在存储器中的存放方式</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c8b0cf805c761ac8cfd3a49e5bd82d92_720w.jpg" alt="img"></p><p>字节编址：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-258c0ae86a0cf5dced8ff61f21ebcace_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-911639d4ea60b7941bf4ff489bae0479_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-79758c0730be6c72e2448c820211e89e_720w.jpg" alt="img"></p><h4 id="7-2-3-操作类型"><a href="#7-2-3-操作类型" class="headerlink" title="7.2.3 操作类型"></a>7.2.3 操作类型</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e80d2179db474bd214ab55d85b6081aa_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-60331452311ef076ab8f69b884c199d3_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-62ca2b1d52b8951bf9d334c65737be64_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-3b36fb82b72d8e520b6d826dc1f46ad9_720w.jpg" alt="img"></p><h3 id="7-3-寻址方式"><a href="#7-3-寻址方式" class="headerlink" title="7.3 寻址方式"></a>7.3 寻址方式</h3><p>确定本条指令的操作数地址，或下一条指令的指令地址。</p><p>可分为指令的寻址和数据寻址</p><h4 id="7-3-1-指令寻址"><a href="#7-3-1-指令寻址" class="headerlink" title="7.3.1 指令寻址"></a>7.3.1 指令寻址</h4><p>顺序寻址&#x2F;跳跃寻址。</p><p>pc程序计数器。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c0c57fba32931971dfa3acc8c60fbbb5_720w.jpg" alt="img"></p><h4 id="7-3-2-数据寻址"><a href="#7-3-2-数据寻址" class="headerlink" title="7.3.2 数据寻址"></a>7.3.2 数据寻址</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-54356fae3d68588119f0215e70b3306e_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-57878ba3ec2d0e02530ee8b41a8c2bd7_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-dea762b7cbe150b8d1a291c10e788a69_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-fe04753ed352f51476c52422044327f4_720w.jpg" alt="img"></p><ul><li>操作数的有效地址保存在另一个位置，再去这个位置找到有效地址EA，访存两次。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9cf702816cd97ee18002f54bbc658ff2_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-fc3d5c688eeac38569482de915cac3aa_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cdcaae570fc9396a3e379c3cb1866ba8_720w.jpg" alt="img"></p><ul><li>BR是基址，A相当于偏移量，形式地址。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-82486c9a347dcb7f4c7d4fc5c5a90169_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4445ed987460133a438626a3b6ecd4be_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6ea74f28c9b588e400dc13e75f97f349_720w.jpg" alt="img"></p><ul><li>相对于当前PC值。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-495c7c8224b8abb4eab61310bcde6d44_720w.jpg" alt="img"></p><h3 id="7-4-指令格式举例"><a href="#7-4-指令格式举例" class="headerlink" title="7.4 指令格式举例"></a>7.4 指令格式举例</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7f557e8b2a25dafbeec9ccef53a9de02_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-352cd052c7d2762782e62da5affa44c4_720w.jpg" alt="img"></p><h3 id="7-5-RISC（精简指令集计算机）技术"><a href="#7-5-RISC（精简指令集计算机）技术" class="headerlink" title="7.5 RISC（精简指令集计算机）技术"></a>7.5 RISC（精简指令集计算机）技术</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4a2e7799e675ef547d04a89bf7504ac8_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-5b0294e195a58d9df758b0db7bd35451_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cbb90ab791b3c9c93805cd2317238377_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c1a931e604616c339419883553d2e0f9_720w.jpg" alt="img"></p><h2 id="8-CPU的结构与功能"><a href="#8-CPU的结构与功能" class="headerlink" title="8. CPU的结构与功能"></a>8. CPU的结构与功能</h2><h3 id="8-1-CPU的结构"><a href="#8-1-CPU的结构" class="headerlink" title="8.1 CPU的结构"></a>8.1 CPU的结构</h3><h4 id="8-1-1-CPU的功能"><a href="#8-1-1-CPU的功能" class="headerlink" title="8.1.1 CPU的功能"></a>8.1.1 CPU的功能</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c8d59c52ce03b8660c9e5294f610645b_720w.jpg" alt="img"></p><h4 id="8-1-2-CPU结构框图"><a href="#8-1-2-CPU结构框图" class="headerlink" title="8.1.2 CPU结构框图"></a>8.1.2 CPU结构框图</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-73181cfcc27e2207c1f8f222d8b67375_720w.jpg" alt="img"></p><ul><li>IR指令寄存器，PC程序计数器</li></ul><h4 id="8-1-3-CPU的寄存器"><a href="#8-1-3-CPU的寄存器" class="headerlink" title="8.1.3 CPU的寄存器"></a>8.1.3 CPU的寄存器</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-95cb86b429d0859197376e68df522c8e_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f74c63b293116496b2bfc879cc9ae9b8_720w.jpg" alt="img"></p><h4 id="8-1-4-其他"><a href="#8-1-4-其他" class="headerlink" title="8.1.4 其他"></a>8.1.4 其他</h4><p>其他部分还包括CU（控制单元）、中断系统以及ALU。</p><p><strong>CU产生全部指令执行的时候的微操作命令序列，可使用组合逻辑设计或微程序设计。</strong></p><h3 id="8-2-指令周期"><a href="#8-2-指令周期" class="headerlink" title="8.2 指令周期"></a>8.2 指令周期</h3><h4 id="8-2-1-基本概念"><a href="#8-2-1-基本概念" class="headerlink" title="8.2.1 基本概念"></a>8.2.1 基本概念</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b7d7e0c28a00121c7e79aaa71b931568_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-69f06b5dae753a813d73c9d73afb1667_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4e068b10aded51c176b0f53166c95ac3_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-d632bdba372b27770d4f6954f95ddac1_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9dd83563b97ad61a54969dace6e91ca0_720w.jpg" alt="img"></p><h4 id="8-2-2-指令周期的数据流"><a href="#8-2-2-指令周期的数据流" class="headerlink" title="8.2.2 指令周期的数据流"></a>8.2.2 指令周期的数据流</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-16bc0563fc33b007f63f2d9e63426f68_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ffe1f1639490e88d147dca09c4c2de47_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-33dbaa90facba4a2495551882c24f90f_720w.jpg" alt="img"></p><h3 id="8-3-指令流水"><a href="#8-3-指令流水" class="headerlink" title="8.3 指令流水"></a>8.3 指令流水</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9c16393a72d6dec738963ea01109597d_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-949473d8f05b3a4d70456e9d50928e99_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2f10fa304075e6bc122a6e389b4b0684_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cd39fea3beccf163fd0d6def48a60201_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ad13acd1809dd1fad491f9714442f599_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-becee89f33a1e5ea3df31f3b9092e7ba_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-5ffd433f519357b941ad2d4210c62d33_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-893f271bc6c0a6feae3ea44895ce9f17_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4c4c40a9d617570797b2f88cd8e8b525_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-bf6629730222b07b5e76f581d72526ec_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8af1daee44b1b31895f74c3a6153d196_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-1748e609006890cae417637268e3dc98_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-a1973374365a3c82bca9e67894cdfda3_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-594cc4e23c8d23c851371b284ad6bc09_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-5d76326753b746899842a3ad471b5dec_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-086cb08b406587df59d147ad04ceca37_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-eb8c96a902a9ba0b4dc2909dc98b3dca_720w.jpg" alt="img"></p><h3 id="8-4-中断系统"><a href="#8-4-中断系统" class="headerlink" title="8.4 中断系统"></a>8.4 中断系统</h3><h4 id="8-4-1-概述"><a href="#8-4-1-概述" class="headerlink" title="8.4.1 概述"></a>8.4.1 概述</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-80d57c2b31ef27adc9ab7c679be9b0d8_720w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-250f0412c444ce2f9a891190dc20c3ec_720w.jpg" alt="img"></p><h4 id="8-4-2-中断请求标记和中断判优逻辑"><a href="#8-4-2-中断请求标记和中断判优逻辑" class="headerlink" title="8.4.2 中断请求标记和中断判优逻辑"></a>8.4.2 中断请求标记和中断判优逻辑</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-182ff5dc96c0788a2631a09787962ae9_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-9979d4fc77823677663af765135194de_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-d997cb8203c7b804b8515e26dba50ef2_1440w.jpg" alt="img"></p><h4 id="8-4-3-中断服务程序入口地址查询"><a href="#8-4-3-中断服务程序入口地址查询" class="headerlink" title="8.4.3 中断服务程序入口地址查询"></a>8.4.3 中断服务程序入口地址查询</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7e2503776d875f089d09543062b8608c_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-68e36f17805e16ac5e2e127e6344fa05_1440w.jpg" alt="img"></p><h4 id="8-4-4-中断响应"><a href="#8-4-4-中断响应" class="headerlink" title="8.4.4 中断响应"></a>8.4.4 中断响应</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cfab9df5aba6657f37b912518a762a11_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-63c5a6c2a3765c312d85c4a48cb57b53_1440w.jpg" alt="img"></p><ul><li>中断隐指令不是实际的指令，而是硬件直接实现的。</li></ul><h4 id="8-4-5-保护现场和恢复现场"><a href="#8-4-5-保护现场和恢复现场" class="headerlink" title="8.4.5 保护现场和恢复现场"></a>8.4.5 保护现场和恢复现场</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c0e5720e9e3654d4fa42bd2fbdb9c43e_1440w.jpg" alt="img"></p><h4 id="8-4-6-多重中断"><a href="#8-4-6-多重中断" class="headerlink" title="8.4.6 多重中断"></a>8.4.6 多重中断</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-882d0f7425bfc56051ccd580d83a3cde_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-68f647f033e41b0cf03994ba1841b91b_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e0e4e703ba8ef0593e12564e45f67334_1440w.jpg" alt="img"></p><ul><li>通过屏蔽触发器，设置中断屏蔽字，来调整中断的优先级（中断处理的优先级。不是响应的优先级）。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b3cc033a886f5ec6bbf5cd4a7f964404_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4bc3e67c760a0096729e35c1178c30ad_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-2030b13c2f5eae15eb67b615b41e4fc1_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-10fe213183c5b3f71d10eb25d793dbd7_1440w.jpg" alt="img"></p><h2 id="9-控制单元的功能"><a href="#9-控制单元的功能" class="headerlink" title="9. 控制单元的功能"></a>9. 控制单元的功能</h2><h3 id="9-1-微操作命令的分析"><a href="#9-1-微操作命令的分析" class="headerlink" title="9.1 微操作命令的分析"></a>9.1 微操作命令的分析</h3><p>完成一条指令分为四个周期：<strong>取指周期、间址周期、执行周期、中断周期。</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cbb164e1850bc8f37d5498ec2fe0afcf_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-75272039372621007a4554e02dbfb467_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4c6567a97b236e05174123a140221ee6_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b772034c369be1600ba3080f27fadaa3_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c4faa85fec57c43725466face1829180_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-31cb07c191bcdc5cd668166c4787ad61_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e3f0d0f1ec7a9c3563c31f2a22df2363_1440w.jpg" alt="img"></p><h3 id="9-2-控制单元的功能"><a href="#9-2-控制单元的功能" class="headerlink" title="9.2 控制单元的功能"></a>9.2 控制单元的功能</h3><p>发出各种控制命令和微指令。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-92f9d2ca8721bc62a10c859dcb0da399_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-90bb51feab78c7390e4e01cf30f1866f_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-36c2c4aacffc7e7c43f97164b447ebae_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-7c7fbfdf28804adfee9b7f01efe9c64b_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f1a6d5d012376115300119419afd15d0_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-dfb799edfaf102f4e8973f368c00fc99_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f13c6d91223963c75cf74d9ba2093ce2_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-945eea3400501415e948088622558fce_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-de7ff8a76adac22577d542cac866c1ae_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-05b22c2344be072bf7ccf6e0bfe658e1_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6ba1fd7fd49c2dd0d560ecf29cbe84ab_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-46c0e6e495df3496358098356e89437a_1440w.jpg" alt="img"></p><h2 id="10-控制单元的设计"><a href="#10-控制单元的设计" class="headerlink" title="10. 控制单元的设计"></a>10. 控制单元的设计</h2><h3 id="10-1-组合逻辑设计"><a href="#10-1-组合逻辑设计" class="headerlink" title="10.1 组合逻辑设计"></a>10.1 组合逻辑设计</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-afcdb84d70aba264c94c8bfff7b4d8da_1440w.jpg" alt="img"></p><ul><li><strong>操作码译码只有一条有效，为高电平，对应操作为什么，CU给出对应的一个或几个操作控制信号。</strong>如果是几个都有效，说明这个节拍下，这几个可以并行处理。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c73a54ec82d4bf5866530b173091ad71_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-0050f5c44453167baf1ee347b30f6208_1440w.jpg" alt="img"></p><ul><li>蓝色的C为控制信号，都是由CU在时钟和IR操作码的控制下，在相应节拍给出的。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-bc2e80321efaf02d3d707a038fd60000_1440w.jpg" alt="img"></p><ul><li>可以并行的微操作，尽可能安排在同一个节拍内。</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f11dd68c4e3c8245d4b0962e7d7a3c8a_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-b816d2c4fed11a5f8094e111ef0eb7e3_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-3ce870f40742455d23b1be36d0cf62f2_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-307d20fe27c73c90c3650c5838cd2bcf_1440w.jpg" alt="img"></p><ul><li>1.累加器清零</li><li>2.ACC按位取反</li><li>3.算术右移操作</li><li>4.循环左移操作</li><li>5.停机指令</li><li>6.加法操作，T0，取操作数，将指令地址码送入MAR，同时读信号；T1，内存中的数据送入MDR；T2，累加器中内容和MDR中数据相加，放在累加器中。</li><li>7.将累加器中保存的数据，送到地址为X内存中。</li><li>8.load，把内存地址为x的内存中数据，取到累加器中。</li><li>9.跳转到给定的地址X</li><li>10.分支指令，条件转移，如果上条计算指令结果小于0，则跳到X处</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cbc0a0637644cd09325e9218cbf719e3_1440w.jpg" alt="img"></p><p>组合逻辑设计步骤：</p><ul><li>列出操作的时间表</li><li>写出微操作命令的最简表达式</li><li>画出逻辑图</li></ul><h3 id="10-2-微程序设计"><a href="#10-2-微程序设计" class="headerlink" title="10.2 微程序设计"></a>10.2 微程序设计</h3><p>采用微程序设计的方法来实现控制器。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ff433902ea666675f621610151ccb174_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-82a7909d71ee6e6e656768e183efec1f_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-63c59321455516bf050b876d2280f06f_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-cdc52466c06d7ec139de56e63edccc4d_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-288ca719664f9942395818a51f69fc2a_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-d20d3629effd03eacb4fb371d008a947_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6abed604804893e2835d9d0813fbec01_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-5b6419bf237035ed8350f2bee32305d8_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-ae6becb1050d9bf3f42e50ccb23e6424_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-f5a0e27e24c66cf765ecc9fb4bf3dad8_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8ec25c5c29ff19fdc37255a43fd558e1_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-0266561975bc190b465bf9f75139517a_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-4d988f79331211ea72422a3d7221f824_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-65dabbe80ada4860c1fc99af68e4cd5d_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-e7c9426dd54938c3392ee7c9f409f81e_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-d5fe8ab2aed1d9db05889bac4f66835d_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-93a53006aae7efca0a3fc3ac78f1b914_1440w.jpg" alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-70c1a78b8f90710483eb238e06d95840_1440w.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot入门及使用</title>
      <link href="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Springboot-简介"><a href="#一、Springboot-简介" class="headerlink" title="一、Springboot 简介"></a>一、Springboot 简介</h1><h2 id="1-1-原有Spring优缺点分析"><a href="#1-1-原有Spring优缺点分析" class="headerlink" title="1.1 原有Spring优缺点分析"></a>1.1 原有Spring优缺点分析</h2><h3 id="1-1-1-Spring的-x3D-x3D-优点-x3D-x3D-分析"><a href="#1-1-1-Spring的-x3D-x3D-优点-x3D-x3D-分析" class="headerlink" title="1.1.1 Spring的&#x3D;&#x3D;优点&#x3D;&#x3D;分析"></a>1.1.1 Spring的&#x3D;&#x3D;优点&#x3D;&#x3D;分析</h3><p>Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过&#x3D;&#x3D;依赖注入&#x3D;&#x3D;和&#x3D;&#x3D;面向切面编程&#x3D;&#x3D;，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。</p><h3 id="1-1-2-Spring的-x3D-x3D-缺点-x3D-x3D-分析"><a href="#1-1-2-Spring的-x3D-x3D-缺点-x3D-x3D-分析" class="headerlink" title="1.1.2 Spring的&#x3D;&#x3D;缺点&#x3D;&#x3D;分析"></a>1.1.2 Spring的&#x3D;&#x3D;缺点&#x3D;&#x3D;分析</h3><p>虽然Spring的组件代码是轻量级的，但它的&#x3D;&#x3D;配置却是重量级&#x3D;&#x3D;的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</p><p>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。</p><p>除此之外，&#x3D;&#x3D;项目的依赖管理&#x3D;&#x3D;也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。</p><h2 id="1-2-Springboot的概述"><a href="#1-2-Springboot的概述" class="headerlink" title="1.2 Springboot的概述"></a>1.2 Springboot的概述</h2><h3 id="1-2-1-Springboot解决上述Spring的缺点"><a href="#1-2-1-Springboot解决上述Spring的缺点" class="headerlink" title="1.2.1 Springboot解决上述Spring的缺点"></a>1.2.1 Springboot解决上述Spring的缺点</h3><p>Springboot对上述Spring的缺点进行的改善和优化，基于&#x3D;&#x3D;约定优于配置的思想&#x3D;&#x3D;，可以让开发人员&#x3D;&#x3D;不必在配置与逻辑业务之间进行思维的切换&#x3D;&#x3D;，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上&#x3D;&#x3D;缩短了项目周期&#x3D;&#x3D;。</p><h3 id="1-2-2-Springboot的特点"><a href="#1-2-2-Springboot的特点" class="headerlink" title="1.2.2 Springboot的特点"></a>1.2.2 Springboot的特点</h3><ul><li><p>为基于Spring的开发提供更快的入门体验</p></li><li><p>开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求</p></li><li><p>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等</p></li><li><p>Springboot不是对Spring功能上的增强，而是提供了一种&#x3D;&#x3D;快速使用Spring&#x3D;&#x3D;的方式</p></li></ul><h3 id="1-2-3-Springboot的核心功能"><a href="#1-2-3-Springboot的核心功能" class="headerlink" title="1.2.3 Springboot的核心功能"></a>1.2.3 Springboot的核心功能</h3><ul><li>起步依赖</li></ul><p>起步依赖本质上是一个&#x3D;&#x3D;Maven项目对象模型（Project Object Model，POM）&#x3D;&#x3D;，定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，&#x3D;&#x3D;起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。&#x3D;&#x3D;</p><ul><li>自动配置</li></ul><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。</p><h1 id="二、-Springboot-快速入门"><a href="#二、-Springboot-快速入门" class="headerlink" title="二、 Springboot 快速入门"></a>二、 Springboot 快速入门</h1><h2 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h2><h3 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h3><p>使用idea工具创建一个maven工程，该工程为普通的java工程即可</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601090250685.png" alt="image-20220601090250685"></p><p>选择maven 项目</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601090321383.png" alt="image-20220601090321383"></p><p>填写项目名、选择项目的路径，即可完成创建。</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601090610353.png" alt="image-20220601090610353"></p><p>项目的初始文件夹结构：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601092803636.png" alt="image-20220601092803636"></p><h3 id="2-1-2-添加Springboot的起步依赖"><a href="#2-1-2-添加Springboot的起步依赖" class="headerlink" title="2.1.2 添加Springboot的起步依赖"></a>2.1.2 添加Springboot的起步依赖</h3><p>Springboot要求，项目要继承Springboot的起步依赖spring-boot-starter-parent  （此次的最新版的2.7 可能会有很多问题 。哈哈哈！)</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>Springboot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="2-1-3-编写Springboot引导类"><a href="#2-1-3-编写Springboot引导类" class="headerlink" title="2.1.3 编写Springboot引导类"></a>2.1.3 编写Springboot引导类</h3><p>要通过Springboot提供的引导类起步Springboot才可以进行访问</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringbootApplication</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/6/1 10:13 */</span><span class="token annotation punctuation">@SpringbootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意：Springboot的启动类名是项目名+Applicaiton（路径也要注意）</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601101445973.png" alt="image-20220601101445973"></p><h3 id="2-1-4-编写Controller"><a href="#2-1-4-编写Controller" class="headerlink" title="2.1.4 编写Controller"></a>2.1.4 编写Controller</h3><p>在引导类DemoApplication&#x3D;&#x3D;同级包&#x3D;&#x3D;或者&#x3D;&#x3D;子级包&#x3D;&#x3D;中创建TestController（我个人建议在子级包）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/6/1 10:17 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如图所示：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601101952041.png" alt="image-20220601101952041"></p><h3 id="2-1-5-测试"><a href="#2-1-5-测试" class="headerlink" title="2.1.5 测试"></a>2.1.5 测试</h3><p>执行Springboot起步类的主方法，通过测试</p><p>通过日志发现，Tomcat started on port(s): 8080 (http) with context path ‘’</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601111708293.png" alt="image-20220601111708293"></p><p>tomcat已经起步，端口监听8080，web应用的虚拟工程名称为空</p><p>打开浏览器访问url地址为：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a><br><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601111844496.png" alt="image-20220601111844496"></p><h2 id="2-2-快速入门解析"><a href="#2-2-快速入门解析" class="headerlink" title="2.2 快速入门解析"></a>2.2 快速入门解析</h2><h3 id="2-2-2-Springboot代码解析"><a href="#2-2-2-Springboot代码解析" class="headerlink" title="2.2.2 Springboot代码解析"></a>2.2.2 Springboot代码解析</h3><ul><li>@SpringbootApplication：标注Springboot的启动类，该注解具备多种功</li><li>SpringApplication.run(DemoApplication.class) 代表运行Springboot的启动类，参数为Springboot启动类的字节码对象</li></ul><h3 id="2-2-3-Springboot工程热部署"><a href="#2-2-3-Springboot工程热部署" class="headerlink" title="2.2.3 Springboot工程热部署"></a>2.2.3 Springboot工程热部署</h3><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大量的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称之为热部署。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--热部署配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>注意：IDEA进行Springboot热部署失败原因</code></pre><p>出现这种情况，并不是热部署配置问题，其根本原因是因为Intellij IEDA默认情况下不会自动编译，需要对IDEA进行自动编译的设置，如下：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601112116055.png" alt="image-20220601112116055"></p><p>然后 Shift+Ctrl+Alt+&#x2F;，选择Registry</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601112220915.png" alt="image-20220601112220915"></p><h3 id="2-2-4-使用idea快速创建Springboot项目"><a href="#2-2-4-使用idea快速创建Springboot项目" class="headerlink" title="2.2.4 使用idea快速创建Springboot项目"></a>2.2.4 使用idea快速创建Springboot项目</h3><p>新建Springboot项目：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601112942646.png" alt="image-20220601112942646"></p><p>选择Springboot的版本和项目所需要的依赖：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601113740484.png" alt="image-20220601113740484"></p><p>目录层级：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601113841261.png" alt="image-20220601113841261"></p><p>通过idea快速创建的Springboot项目的pom.xml中已经导入了我们选择的web的起步依赖的坐标</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>可以使用快速入门的方式创建Controller进行访问，此处不再赘述</p><h1 id="三、Springboot原理分析"><a href="#三、Springboot原理分析" class="headerlink" title="三、Springboot原理分析"></a>三、Springboot原理分析</h1><h2 id="3-1-起步依赖原理分析"><a href="#3-1-起步依赖原理分析" class="headerlink" title="3.1 起步依赖原理分析"></a>3.1 起步依赖原理分析</h2><h2 id="3-1-1-分析spring-boot-starter-parent"><a href="#3-1-1-分析spring-boot-starter-parent" class="headerlink" title="3.1.1 分析spring-boot-starter-parent"></a>3.1.1 分析spring-boot-starter-parent</h2><p>按住Ctrl点击pom.xml中的spring-boot-starter-parent，跳转到了spring-boot-starter-parent的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Parent pom providing dependency and plugin management for applications built with Maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource.delimiter</span><span class="token punctuation">></span></span>@<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource.delimiter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>按住Ctrl点击pom.xml中的spring-boot-starter-dependencies，跳转到了spring-boot-starter-dependencies的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre class="language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activemq.version</span><span class="token punctuation">></span></span>5.36.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activemq.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>antlr2.version</span><span class="token punctuation">></span></span>2.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>antlr2.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appengine-sdk.version</span><span class="token punctuation">></span></span>1.9.96<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appengine-sdk.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artemis.version</span><span class="token punctuation">></span></span>2.19.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artemis.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectj.version</span><span class="token punctuation">></span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectj.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assertj.version</span><span class="token punctuation">></span></span>3.22.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>assertj.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atomikos.version</span><span class="token punctuation">></span></span>4.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>atomikos.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>awaitility.version</span><span class="token punctuation">></span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>awaitility.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build-helper-maven-plugin.version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build-helper-maven-plugin.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>byte-buddy.version</span><span class="token punctuation">></span></span>1.12.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>byte-buddy.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache2k.version</span><span class="token punctuation">></span></span>2.6.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache2k.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caffeine.version</span><span class="token punctuation">></span></span>2.9.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caffeine.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cassandra-driver.version</span><span class="token punctuation">></span></span>4.14.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cassandra-driver.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classmate.version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>classmate.version</span><span class="token punctuation">></span></span>     ... ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;activemq.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-blueprint<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;activemq.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-broker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;activemq.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-camel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;activemq.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;activemq.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      ... ... ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>从上面的spring-boot-starter-dependencies的pom.xml中我们可以发现，&#x3D;&#x3D;一部分坐标的版本&#x3D;&#x3D;、&#x3D;&#x3D;依赖管理&#x3D;&#x3D;、&#x3D;&#x3D;插件管理已经定义好&#x3D;&#x3D;，所以我们的Springboot工程继承spring-boot-starter-parent后&#x3D;&#x3D;已经具备版本锁定等配置了&#x3D;&#x3D;。所以&#x3D;&#x3D;起步依赖的作用就是进行依赖的传递&#x3D;&#x3D;。</p><h3 id="3-1-2-分析spring-boot-starter-web"><a href="#3-1-2-分析spring-boot-starter-web" class="headerlink" title="3.1.2 分析spring-boot-starter-web"></a>3.1.2 分析spring-boot-starter-web</h3><p>按住Ctrl点击pom.xml中的spring-boot-starter-web，跳转到了spring-boot-starter-web的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- This module was also published with a richer model, Gradle metadata,  --></span>  <span class="token comment">&lt;!-- which should be used instead. Do not delete the following line which  --></span>  <span class="token comment">&lt;!-- is to indicate to Gradle or any Gradle module metadata file consumer  --></span>  <span class="token comment">&lt;!-- that they should prefer consuming it instead. --></span>  <span class="token comment">&lt;!-- do_not_remove: published-with-gradle-metadata --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://spring.io/projects/spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>organization</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Pivotal Software, Inc.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://spring.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>organization</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>licenses</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>license</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Apache License, Version 2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://www.apache.org/licenses/LICENSE-2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>license</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>licenses</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Pivotal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>info@pivotal.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>organization</span><span class="token punctuation">></span></span>Pivotal Software, Inc.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>organization</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>organizationUrl</span><span class="token punctuation">></span></span>https://www.spring.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>organizationUrl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scm</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connection</span><span class="token punctuation">></span></span>scm:git:git://github.com/spring-projects/spring-boot.git<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developerConnection</span><span class="token punctuation">></span></span>scm:git:ssh://git@github.com/spring-projects/spring-boot.git<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developerConnection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/spring-projects/spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scm</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>issueManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">></span></span>GitHub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/spring-projects/spring-boot/issues<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>issueManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>从上面的spring-boot-starter-web的pom.xml中我们可以发现，spring-boot-starter-web就是<strong>将web开发要使用的spring-web、spring-webmvc等坐标进行了“打包”，</strong>这样我们的工程只要引入spring-boot-starter-web起步依赖的坐标就可以进行web开发了，同样体现了依赖传递的作用。</p><h2 id="3-2-自动配置原理解析"><a href="#3-2-自动配置原理解析" class="headerlink" title="3.2 自动配置原理解析"></a>3.2 自动配置原理解析</h2><p>按住Ctrl点击查看启动类MySpringbootApplication上的注解@SpringbootApplication</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringbootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注解@SpringbootApplication的源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//</span><span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment">// (powered by FernFlower decompiler)</span><span class="token comment">//</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringbootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> <span class="token class-name">EnableAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> <span class="token class-name">EnableAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>其中，</p><p>@SpringbootConfiguration：等同与@Configuration，既标注该类是Spring的一个配置类</p><p>@EnableAutoConfiguration：Springboot自动配置功能开启</p><p>按住Ctrl点击查看注解@EnableAutoConfiguration</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> ENABLED_OVERRIDE_PROPERTY <span class="token operator">=</span> <span class="token string">"spring.boot.enableautoconfiguration"</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其中，@Import(AutoConfigurationImportSelector.class) 导入了AutoConfigurationImportSelector类</p><p>按住Ctrl点击查看AutoConfigurationImportSelector源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span>                                                                   attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其中，SpringFactoriesLoader.loadFactoryNames 方法的作用就是从META-INF&#x2F;spring.factories文件中读取指定类对应的类名称列表</p><p>spring.factories 文件中有关自动配置的配置信息如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>WebClientAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServletAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletWebServerFactoryAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>error<span class="token punctuation">.</span></span>ErrorMvcAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>HttpEncodingAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>MultipartAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>上面配置文件存在大量的以Configuration为结尾的类名称，这些类就是存有自动配置信息的类，而SpringApplication在获取这些类名后再加载</p><p>我们以ServletWebServerFactoryAutoConfiguration为例来分析源码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ServerProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>其中，</p><p>@EnableConfigurationProperties(ServerProperties.class) 代表加载ServerProperties服务器配置属性类</p><p>进入ServerProperties.class源码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"server"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerProperties</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * Server HTTP port. */</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span><span class="token comment">/** * Network address to which the server should bind. */</span><span class="token keyword">private</span> <span class="token class-name">InetAddress</span> address<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span></code></pre><p>其中，</p><p>prefix &#x3D; “server” 表示Springboot配置文件中的前缀，Springboot会将配置文件中以server开始的属性映射到该类的字段中。映射关系如下：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601121044096.png" alt="image-20220601121044096"></p><h1 id="四、Springboot的配置文件"><a href="#四、Springboot的配置文件" class="headerlink" title="四、Springboot的配置文件"></a>四、Springboot的配置文件</h1><h2 id="4-1-Springboot配置文件类型"><a href="#4-1-Springboot配置文件类型" class="headerlink" title="4.1 Springboot配置文件类型"></a>4.1 Springboot配置文件类型</h2><h3 id="4-1-1-Springboot配置文件类型和作用"><a href="#4-1-1-Springboot配置文件类型和作用" class="headerlink" title="4.1.1 Springboot配置文件类型和作用"></a>4.1.1 Springboot配置文件类型和作用</h3><p>Springboot是基于约定的，所以很多配置都有默认值，但<strong>如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</strong></p><p>Springboot<strong>默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件</strong></p><p>其中，application.<a href="https://so.csdn.net/so/search?q=properties&spm=1001.2101.3001.7020">properties</a>文件是键值对类型的文件，之前一直在使用，所以此处不在对properties文件的格式进行阐述。除了properties文件外，Springboot还可以使用yml文件进行配置，下面对yml文件进行讲解。</p><h3 id="4-1-2-application-yml配置文件"><a href="#4-1-2-application-yml配置文件" class="headerlink" title="4.1.2 application.yml配置文件"></a>4.1.2 application.yml配置文件</h3><h4 id="4-1-2-1-yml配置文件简介"><a href="#4-1-2-1-yml配置文件简介" class="headerlink" title="4.1.2.1 yml配置文件简介"></a>4.1.2.1 yml配置文件简介</h4><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的<strong>数据序列化格式</strong>，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C&#x2F;C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是<strong>以数据为核心的</strong>，比传统的xml方式更加简洁。</p><p>YML文件的<strong>扩展名可以使用.yml或者.yaml</strong>。</p><h4 id="4-1-2-2-yml配置文件的语法"><a href="#4-1-2-2-yml配置文件的语法" class="headerlink" title="4.1.2.2 yml配置文件的语法"></a>4.1.2.2 yml配置文件的语法</h4><h5 id="4-1-2-2-1-配置普通数据"><a href="#4-1-2-2-1-配置普通数据" class="headerlink" title="4.1.2.2.1 配置普通数据"></a>4.1.2.2.1 配置普通数据</h5><ul><li><p>语法： key: value</p></li><li><p>示例代码：</p></li><li><pre><code class="yaml">name: haohao<pre class="language-none"><code class="language-none">- 注意：value之前有一个空格##### 4.1.2.2.2 配置对象数据- 语法：  key:</code></pre>  key1: value1  key2: value2<pre class="language-none"><code class="language-none">  或者：  key: &#123;key1: value1,key2: value2&#125;- 示例代码：- &#96;&#96;&#96;yaml  person:    name: haohao    age: 31    addr: beijing    #或者    person: &#123;name: haohao,age: 31,addr: beijing&#125;  12345678</code></pre></code></pre></li><li><p>注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别</p></li></ul><h5 id="4-1-2-2-2-配置Map数据"><a href="#4-1-2-2-2-配置Map数据" class="headerlink" title="4.1.2.2.2 配置Map数据"></a>4.1.2.2.2 配置Map数据</h5><p>同上面的对象写法</p><h5 id="4-1-2-2-3-配置数组（List、Set）数据"><a href="#4-1-2-2-3-配置数组（List、Set）数据" class="headerlink" title="4.1.2.2.3 配置数组（List、Set）数据"></a>4.1.2.2.3 配置数组（List、Set）数据</h5><ul><li><p>语法：</p><p>key:</p><pre class="language-none"><code class="language-none">- value1     - value2</code></pre><p>或者：</p><p>key: [value1,value2]</p></li><li><p>示例代码：</p></li><li><p>&#96;&#96;&#96;yaml<br>city:</p><ul><li>beijing</li><li>tianjin</li><li>shanghai</li><li>chongqing</li></ul><p>#或者</p><p>city: [beijing,tianjin,shanghai,chongqing]</p><p>#集合中的元素是对象形式<br>student:</p><ul><li>name: zhangsan<br>age: 18<br>score: 100</li><li>name: lisi<br>age: 28<br>score: 88</li><li>name: wangwu<br>age: 38<br>score: 90<br>123456789101112131415161718192021<pre class="language-none"><code class="language-none">- 注意：value1与之间的 - 之间存在一个空格### 4.1.3 Springboot配置信息的查询上面提及过，Springboot的配置文件，主要的目的就是对配置信息进行修改的，但在配置时的key从哪里去查询呢？我们可以查阅Springboot的官方文档文档URL：https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;2.7.0&#x2F;reference&#x2F;htmlsingle&#x2F;#common-application-properties常用的配置摘抄如下：&#96;&#96;&#96;properties# QUARTZ SCHEDULER (QuartzProperties)spring.quartz.jdbc.initialize-schema&#x3D;embedded # Database schema initialization mode.spring.quartz.jdbc.schema&#x3D;classpath:org&#x2F;quartz&#x2F;impl&#x2F;jdbcjobstore&#x2F;tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.spring.quartz.job-store-type&#x3D;memory # Quartz job store type.spring.quartz.properties.*&#x3D; # Additional Quartz Scheduler properties.# ----------------------------------------# WEB PROPERTIES# ----------------------------------------# EMBEDDED SERVER CONFIGURATION (ServerProperties)server.port&#x3D;8080 # Server HTTP port.server.servlet.context-path&#x3D; # Context path of the application.server.servlet.path&#x3D;&#x2F; # Path of the main dispatcher servlet.# HTTP encoding (HttpEncodingProperties)spring.http.encoding.charset&#x3D;UTF-8 # Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not set explicitly.# JACKSON (JacksonProperties)spring.jackson.date-format&#x3D; # Date format string or a fully-qualified date format class name. For instance, &#96;yyyy-MM-dd HH:mm:ss&#96;.# SPRING MVC (WebMvcProperties)spring.mvc.servlet.load-on-startup&#x3D;-1 # Load on startup priority of the dispatcher servlet.spring.mvc.static-path-pattern&#x3D;&#x2F;** # Path pattern used for static resources.spring.mvc.view.prefix&#x3D; # Spring MVC view prefix.spring.mvc.view.suffix&#x3D; # Spring MVC view suffix.# DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)spring.datasource.driver-class-name&#x3D; # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.spring.datasource.password&#x3D; # Login password of the database.spring.datasource.url&#x3D; # JDBC URL of the database.spring.datasource.username&#x3D; # Login username of the database.# JEST (Elasticsearch HTTP client) (JestProperties)spring.elasticsearch.jest.password&#x3D; # Login password.spring.elasticsearch.jest.proxy.host&#x3D; # Proxy host the HTTP client should use.spring.elasticsearch.jest.proxy.port&#x3D; # Proxy port the HTTP client should use.spring.elasticsearch.jest.read-timeout&#x3D;3s # Read timeout.spring.elasticsearch.jest.username&#x3D; # Login username.12345678910111213141516171819202122232425262728293031323334353637383940</code></pre></li></ul></li></ul><p>我们可以通过配置application.poperties 或者 application.yml 来修改Springboot的默认配置</p><p>例如：</p><p>application.properties文件</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8888</span><span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">demo</span></code></pre><p>application.yml文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /demo</code></pre><h2 id="4-2-配置文件与配置类的属性映射方式"><a href="#4-2-配置文件与配置类的属性映射方式" class="headerlink" title="4.2 配置文件与配置类的属性映射方式"></a>4.2 配置文件与配置类的属性映射方式</h2><h3 id="4-2-1-使用注解-Value映射"><a href="#4-2-1-使用注解-Value映射" class="headerlink" title="4.2.1 使用注解@Value映射"></a>4.2.1 使用注解@Value映射</h3><p>我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上</p><p>例如：</p><p>application.properties配置如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">person</span><span class="token punctuation">:</span><span class="token key attr-name">  name</span><span class="token punctuation">:</span> <span class="token value attr-value">zhangsan</span><span class="token key attr-name">  age</span><span class="token punctuation">:</span> <span class="token value attr-value">18</span></code></pre><p>或者，application.yml配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span></code></pre><p>实体Bean代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;person.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;person.age&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Springboot 访问成功! name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>浏览器访问地址：<a href="http://localhost:8080/quick">http://localhost:8080/quick</a> 结果如下：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601122242664.png" alt="image-20220601122242664"></p><h3 id="4-2-2-使用注解-ConfigurationProperties映射"><a href="#4-2-2-使用注解-ConfigurationProperties映射" class="headerlink" title="4.2.2 使用注解@ConfigurationProperties映射"></a>4.2.2 使用注解@ConfigurationProperties映射</h3><p>通过注解@ConfigurationProperties(prefix&#x3D;“配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射</p><p>application.properties配置如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">person</span><span class="token punctuation">:</span><span class="token key attr-name">  name</span><span class="token punctuation">:</span> <span class="token value attr-value">zhangsan</span><span class="token key attr-name">  age</span><span class="token punctuation">:</span> <span class="token value attr-value">18</span></code></pre><p>或者，application.yml配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span></code></pre><p>实体Bean代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Springboot 访问成功! name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>浏览器访问地址：<a href="http://localhost:8080/quick">http://localhost:8080/quick</a> 结果相同</p><p>注意：使用@ConfigurationProperties方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方法才可以，而使用@Value注解修饰的字段不需要提供set方法</p><h1 id="五、Springboot整合其他技术"><a href="#五、Springboot整合其他技术" class="headerlink" title="五、Springboot整合其他技术"></a>五、Springboot整合其他技术</h1><h2 id="5-1-Springboot整合swagger"><a href="#5-1-Springboot整合swagger" class="headerlink" title="5.1 Springboot整合swagger"></a>5.1 Springboot整合swagger</h2><h3 id="5-1-1-添加swagger的依赖"><a href="#5-1-1-添加swagger的依赖" class="headerlink" title="5.1.1 添加swagger的依赖"></a>5.1.1 添加swagger的依赖</h3><p>swagger</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-1-2-添加SwaggerConfig的配置类"><a href="#5-1-2-添加SwaggerConfig的配置类" class="headerlink" title="5.1.2 添加SwaggerConfig的配置类"></a>5.1.2 添加SwaggerConfig的配置类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>classmate<span class="token punctuation">.</span></span><span class="token class-name">TypeResolver</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Environment</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Profiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>   <span class="token comment">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TypeResolver</span> typeResolver<span class="token punctuation">;</span>    <span class="token comment">//配置swagger的Docker的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置显示的swagger环境信息</span>        <span class="token class-name">Profiles</span> profiles <span class="token operator">=</span> <span class="token class-name">Profiles</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断是否处在自己设定的环境当中</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment">//                .enable(flag)   //enable 是否启动swagger，如果为false，则swagger不能浏览器中访问</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//RequestHandlerSelectors  配置要扫描接口的方式</span>                <span class="token comment">//basePackage :指定的包</span>                <span class="token comment">//any(） :扫描全部</span>                <span class="token comment">//none :都不扫描</span>                <span class="token comment">//withClassAnnotation :扫描类上的注解  参数是一个注解的反射对象</span>                <span class="token comment">//withMethodAnnotation :扫描类上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.changshun.nongxinggang.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//path()  过滤什么路径</span><span class="token comment">//                .paths(PathSelectors.ant("/swagger"))</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                .additionalModels(typeResolver.resolve(TAdmin.class),typeResolver.resolve(TOrder.class),typeResolver.resolve(TShop.class),typeResolver.resolve(TUser.class));</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置swagger 信息 = info</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//作者信息</span>        <span class="token comment">//作者信息</span>        <span class="token class-name"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>Contact</span> contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token punctuation">,</span> <span class="token string">"ip地址啊"</span><span class="token punctuation">,</span> <span class="token string">"邮箱啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"****api文档"</span><span class="token punctuation">,</span>                <span class="token string">"**"</span><span class="token punctuation">,</span>                <span class="token string">"1.0"</span><span class="token punctuation">,</span>       <span class="token comment">//版本</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span>                contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>到此swagger的集成就差不多了。剩下的都可以参考swagger的一些注解。</p><p>可以参考这几篇文章：</p><blockquote><p><a href="https://blog.csdn.net/wyb880501/article/details/79576784">https://blog.csdn.net/wyb880501/article/details/79576784</a></p></blockquote><h2 id="5-2-Springboot整合druid数据源"><a href="#5-2-Springboot整合druid数据源" class="headerlink" title="5.2 Springboot整合druid数据源"></a>5.2 Springboot整合druid数据源</h2><blockquote><p>ava程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。 Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。 Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。 </p></blockquote><p>Druid连接池是阿里巴巴内部唯一使用的连接池，内置强大的监控功能，监控特性不影响性能。功能强大，能防SQL注入，内置Loging能诊断Hack应用行为。，在内部数据库相关中间件TDDL&#x2F;DRDS 都内置使用强依赖了Druid连接池，经过阿里内部数千上万的系统大规模验证，经过历年双十一超大规模并发验证。<br>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源。</p><ul><li>稳定性特性，阿里巴巴的业务验证</li><li>完备的监控信息，快速诊断系统的瓶颈</li><li>内置了WallFilter 提供防SQL注入功能</li></ul><h4 id="5-2-1-引入druid-的依赖"><a href="#5-2-1-引入druid-的依赖" class="headerlink" title="5.2.1 引入druid 的依赖"></a>5.2.1 引入druid 的依赖</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--druid 的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="5-2-2-切换默认的数据源"><a href="#5-2-2-切换默认的数据源" class="headerlink" title="5.2.2 切换默认的数据源"></a>5.2.2 切换默认的数据源</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root               <span class="token comment">#数据库的用户名</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> mysql729           <span class="token comment">#数据库的密码</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/demo<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span>   <span class="token comment">#url</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver             <span class="token comment">#数据库的驱动</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource</code></pre><p>配置完成后，重新启动项目，通过测试类DataSource可以看到数据源已经切换成功</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringbootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>查看输出：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601155816210.png" alt="image-20220601155816210"></p><h4 id="5-2-3-修改数据源相关配置"><a href="#5-2-3-修改数据源相关配置" class="headerlink" title="5.2.3 修改数据源相关配置"></a>5.2.3 修改数据源相关配置</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root               <span class="token comment">#数据库的用户名</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> mysql729           <span class="token comment">#数据库的密码</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/demo<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span>   <span class="token comment">#url</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver             <span class="token comment">#数据库的驱动</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment"># 初始化时建立物理连接的个数</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token comment"># 最小连接池数量</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token comment"># 最大连接池数量</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">201</span>    <span class="token comment"># 获取连接时最大等待时间，单位毫秒</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token comment"># 连接保持空闲而不被驱逐的最小时间</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token comment"># 用来检测连接是否有效的sql，要求是一个查询语句</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL    <span class="token comment"># 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span>    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    <span class="token comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。</span>    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token comment"># 合并多个DruidDataSource的监控数据</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><h4 id="5-2-4-druid-常用配置项及解释"><a href="#5-2-4-druid-常用配置项及解释" class="headerlink" title="5.2.4 druid 常用配置项及解释"></a>5.2.4 druid 常用配置项及解释</h4><table><thead><tr><th align="left">配置</th><th align="left">缺省值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">name</td><td align="left"></td><td align="left">配置这个属性的意义在于没如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是”DataSource-“+System.identityHashCode(this)</td></tr><tr><td align="left">jdbcurl</td><td align="left"></td><td align="left">连接数据库的url，不同数据库不一样</td></tr><tr><td align="left">username</td><td align="left"></td><td align="left">连接数据库的用户名</td></tr><tr><td align="left">password</td><td align="left"></td><td align="left">连接数据库的密码。如果你不希望密码直接写在配置文件中</td></tr><tr><td align="left">driverClassName</td><td align="left"></td><td align="left">这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td align="left">initialSize</td><td align="left">0</td><td align="left">初始化时建立物理连接的个数，初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td align="left">maxActive</td><td align="left">8</td><td align="left">最大连接池数量</td></tr><tr><td align="left">maxIdle</td><td align="left">8</td><td align="left">已经不再使用，配置了也没效果</td></tr><tr><td align="left">minIdle</td><td align="left"></td><td align="left">最小连接池数量</td></tr><tr><td align="left">maxWait</td><td align="left"></td><td align="left">获取连接时最大等待时间，单位毫秒，配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁</td></tr><tr><td align="left">poolPreparedStatements</td><td align="left">false</td><td align="left">是否缓存preparedStatement，也就是PsCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭</td></tr><tr><td align="left">maxOpenPreparedStatements</td><td align="left">-1</td><td align="left">要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置打一下，比如说100</td></tr><tr><td align="left">validationQuery</td><td align="left"></td><td align="left">用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn 、testWhileIdle都不会起作用</td></tr><tr><td align="left">testOnBorrow</td><td align="left">true</td><td align="left">申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td align="left">testOnReturn</td><td align="left">false</td><td align="left">归还连接时执行它validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td align="left">testWhileIdle</td><td align="left">false</td><td align="left">建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunMills，执行validationQuery检测连接是否有效</td></tr><tr><td align="left">timeBetweenEvictionRunMillis</td><td align="left">1分钟</td><td align="left">有两个含义:Destory线程会检测连接的间隔时间 testWhileIdle的判断依据，详细看testWhileIdele属性的说明</td></tr><tr><td align="left">numTestsPerEvictionRun</td><td align="left"></td><td align="left">不再使用，一个DruidDataSource只支持一个EvicationRun</td></tr><tr><td align="left">minEvictableIdleTimeMillis</td><td align="left">30分钟</td><td align="left"></td></tr><tr><td align="left">connectionInitSqls</td><td align="left"></td><td align="left">物理连接初始化的时候执行sql</td></tr><tr><td align="left">exceptionSorter</td><td align="left">根据DBType自动识别</td><td align="left">当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td align="left">filters</td><td align="left"></td><td align="left">属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有:监控统计用的filter：stat日志用的filter;log4j防御注入的filter:wall</td></tr><tr><td align="left">proxyFilters</td><td align="left"></td><td align="left">类型是List&lt;com.alibaba.druid,filter.Filter&gt;，如果同时配置filter和proxyFilters，是组合关系，并非</td></tr></tbody></table><h4 id="5-2-5-编写druid监控"><a href="#5-2-5-编写druid监控" class="headerlink" title="5.2.5 编写druid监控"></a>5.2.5 编写druid监控</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">StatViewServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">WebStatFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRegistrationBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/5/9 10:23 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 配置 Druid 监控管理后台的Servlet；     * 内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式     * @return  ServletRegistrationBean     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//默认就是允许所有访问</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//deny：Druid 后台拒绝谁访问，表示禁止此ip访问</span>        <span class="token comment">// initParams.put("deny","192.168.10.132");</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 2、配置一个web监控的filter     * @return FilterRegistrationBean     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 解决druid 日志报错：discard long time none received connection:xxx     * */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"druid.mysql.usePingMethod"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="5-2-6-监控连接"><a href="#5-2-6-监控连接" class="headerlink" title="5.2.6 监控连接"></a>5.2.6 监控连接</h4><p>启动项目，访问 <a href="http://localhost/">http://localhost</a>:8080&#x2F;druid&#x2F;login.html 即可进入Druid监控的登录页面<br>输入刚刚配置的用户名和密码</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601160725082.png" alt="image-20220601160725082"></p><p>顺利登陆相关后台，在后台可以对当前数据源的各项数据进行查看</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601160831465.png" alt="image-20220601160831465"></p><h4 id="5-2-7-可能出现的问题"><a href="#5-2-7-可能出现的问题" class="headerlink" title="5.2.7 可能出现的问题"></a>5.2.7 可能出现的问题</h4><p>如果出现这个报错：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601160540334.png" alt="image-20220601160540334"></p><p>可能是没有引入log4j 的依赖。在pom文件中引入log4j即可：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="5-3-Springboot整合mybatis-plus"><a href="#5-3-Springboot整合mybatis-plus" class="headerlink" title="5.3 Springboot整合mybatis-plus"></a>5.3 Springboot整合mybatis-plus</h2><h3 id="5-3-1-添加mybatis-plus的依赖"><a href="#5-3-1-添加mybatis-plus的依赖" class="headerlink" title="5.3.1 添加mybatis-plus的依赖"></a>5.3.1 添加mybatis-plus的依赖</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mybatis-plus 的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-2-添加数据库驱动坐标"><a href="#5-3-2-添加数据库驱动坐标" class="headerlink" title="5.3.2 添加数据库驱动坐标"></a>5.3.2 添加数据库驱动坐标</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- MySQL连接驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-3添加数据库连接信息"><a href="#5-3-3添加数据库连接信息" class="headerlink" title="5.3.3添加数据库连接信息"></a>5.3.3添加数据库连接信息</h3><p>在application.properties中添加数据库的连接信息</p><p>注意：高版本的url现在需要设置时区等信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root               <span class="token comment">#数据库的用户名</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> mysql729           <span class="token comment">#数据库的密码</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/demo<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span>   <span class="token comment">#url</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver             <span class="token comment">#数据库的驱动</span></code></pre><h3 id="5-3-4-添加mybatis-plus-配置信息"><a href="#5-3-4-添加mybatis-plus-配置信息" class="headerlink" title="5.3.4 添加mybatis-plus 配置信息"></a>5.3.4 添加mybatis-plus 配置信息</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">call-setters-on-nulls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                             <span class="token comment">#如果map查出字段为空，也显示</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                          <span class="token comment">#下划线转驼峰</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/xml/<span class="token important">*Mapper.xml</span>        <span class="token comment">#.xml所在的包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.example.Springboot.pojo     <span class="token comment"># 实体类包</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span>                                <span class="token comment"># 逻辑删除（不存在） 0</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>                             <span class="token comment"># 逻辑删除（存在） 1</span></code></pre><h3 id="5-3-5-编写mybatis-plus-的配置类"><a href="#5-3-5-编写mybatis-plus-的配置类" class="headerlink" title="5.3.5 编写mybatis-plus 的配置类"></a>5.3.5 编写mybatis-plus 的配置类</h3><p>包括分页插件、乐观锁等等</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mybatis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationCustomizer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MybatisConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">MybatisMapWrapperFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">OptimisticLockerInnerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableTransactionManagement</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/6/1 15:24 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.example.Springboot.mapper"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**注册乐观锁*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 新的分页插件,一缓和二缓遵循mybatis的规则,     * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置请求的页面大于最大页后操作，true调回到首页，false继续请求。默认false</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>paginationInnerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**使用mybatis-plus  selectMaps 可以下划线转驼峰。*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurationCustomizer</span> <span class="token function">mybatisConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">MybatisConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                configuration<span class="token punctuation">.</span><span class="token function">setObjectWrapperFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MybatisMapWrapperFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>一个自动填充的配置类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mybatis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/6/1 15:26 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新时间，取当前时间，也可以自定义</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-3-6-添加mybatis-plus代码生成器的依赖"><a href="#5-3-6-添加mybatis-plus代码生成器的依赖" class="headerlink" title="5.3.6 添加mybatis-plus代码生成器的依赖"></a>5.3.6 添加mybatis-plus代码生成器的依赖</h3><p>生成器的依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>模板引擎的依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-7-编写mybatis-plus代码生成器工具类"><a href="#5-3-7-编写mybatis-plus代码生成器工具类" class="headerlink" title="5.3.7 编写mybatis-plus代码生成器工具类"></a>5.3.7 编写mybatis-plus代码生成器工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mybatis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">FieldFill</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span></span><span class="token class-name">FastAutoGenerator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">OutputFile</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">DateType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">NamingStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>fill<span class="token punctuation">.</span></span><span class="token class-name">Column</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @since 2022/6/1 15:29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusGeneration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> dataBaseName <span class="token operator">=</span> <span class="token string">"demo"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/"</span><span class="token operator">+</span>dataBaseName<span class="token operator">+</span><span class="token string">"?useSSL=false&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>        <span class="token comment">//数据库的账号</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token comment">//数据库的密码</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"mysql729"</span><span class="token punctuation">;</span>        <span class="token comment">//表名集合</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FastAutoGenerator</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>                <span class="token comment">//全局配置</span>                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    builder<span class="token punctuation">.</span><span class="token function">fileOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//开启覆盖之前生成的文件</span>                            <span class="token punctuation">.</span><span class="token function">disableOpenDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//禁止打开输出目录</span>                            <span class="token punctuation">.</span><span class="token function">outputDir</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\src\\main\\java"</span><span class="token punctuation">)</span>   <span class="token comment">//指定输出目录</span>                            <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"成大事"</span><span class="token punctuation">)</span>   <span class="token comment">//作者名</span><span class="token comment">//                            .enableKotlin()      //开启 kotlin 模式</span>                            <span class="token punctuation">.</span><span class="token function">enableSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//开启 swagger 模式</span>                            <span class="token punctuation">.</span><span class="token function">fileOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//覆盖</span>                            <span class="token punctuation">.</span><span class="token function">dateType</span><span class="token punctuation">(</span><span class="token class-name">DateType</span><span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span>   <span class="token comment">//时间策略  定义生成的实体类中日期的类型 TIME_PACK=LocalDateTime;ONLY_DATE=Date;</span>                            <span class="token punctuation">.</span><span class="token function">commentDate</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//注释日期</span><span class="token comment">//                            .disableOpenDir();   //禁止打开输出目录，默认打开</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">//包配置</span>                <span class="token punctuation">.</span><span class="token function">packageConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    builder<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">"com.example.demo"</span><span class="token punctuation">)</span>     <span class="token comment">//父包名</span><span class="token comment">//                            .moduleName("demo")</span>                            <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"pojo"</span><span class="token punctuation">)</span>                 <span class="token comment">//Entity 包名</span>                            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span>             <span class="token comment">//Service 包名</span>                            <span class="token punctuation">.</span><span class="token function">serviceImpl</span><span class="token punctuation">(</span><span class="token string">"service.impl"</span><span class="token punctuation">)</span>    <span class="token comment">//Service Impl 包名</span>                            <span class="token punctuation">.</span><span class="token function">mapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span>               <span class="token comment">//Mapper 包名</span>                            <span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token string">"mapper.xml"</span><span class="token punctuation">)</span>              <span class="token comment">//Mapper XML 包名</span>                            <span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span>       <span class="token comment">//Controller 包名</span>                            <span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token string">"utils"</span><span class="token punctuation">)</span>                <span class="token comment">//自定义文件包名输出自定义文件时所用到的包名</span>                            <span class="token punctuation">.</span><span class="token function">pathInfo</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token class-name">OutputFile</span><span class="token punctuation">.</span>mapperXml<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                    <span class="token string">"\\src\\main\\java\\com\\example\\demo\\mapper\\xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定xml位置</span>                    <span class="token comment">//配置 **Mapper.xml 路径信息：项目的 resources 目录的 Mapper 目录下</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">//策略配置</span>                <span class="token punctuation">.</span><span class="token function">strategyConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    builder<span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addTablePrefix</span><span class="token punctuation">(</span><span class="token string">"tbl_"</span><span class="token punctuation">)</span><span class="token comment">//表名前缀，配置后生成的代码不会有此前缀</span>                            <span class="token comment">//service 的配置</span>                            <span class="token punctuation">.</span><span class="token function">serviceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">formatServiceFileName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token comment">//服务层接口名后缀</span>                            <span class="token punctuation">.</span><span class="token function">formatServiceImplFileName</span><span class="token punctuation">(</span><span class="token string">"%sServiceImpl"</span><span class="token punctuation">)</span><span class="token comment">//服务层实现类名后缀</span>                            <span class="token comment">//pojo 的配置</span>                            <span class="token punctuation">.</span><span class="token function">entityBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">enableLombok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//实体类使用lombok,需要自己引入依赖</span>                            <span class="token comment">//.disableSerialVersionUID()  //不实现 Serializable 接口，不生产 SerialVersionUID</span>                            <span class="token comment">//.logicDeleteColumnName("status")//逻辑删除字段，使用delete方法删除数据时会将status设置为1。调用update方法时并不会将该字段放入修改字段中，而是在条件字段中</span>                            <span class="token punctuation">.</span><span class="token function">enableTableFieldAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 开启生成实体时生成字段注解@TableField</span>                            <span class="token comment">// 数据库表字段映射到实体的命名策略</span>                            <span class="token punctuation">.</span><span class="token function">columnNaming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span>                <span class="token comment">//数据库表字段映射到实体的命名策略：下划线转驼峰命</span>                            <span class="token punctuation">.</span><span class="token function">naming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span>                      <span class="token comment">//数据库表映射到实体的命名策略：下划线转驼峰命</span>                            <span class="token punctuation">.</span><span class="token function">addTableFills</span><span class="token punctuation">(</span>                                    <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">,</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">,</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>                            <span class="token punctuation">)</span>   <span class="token comment">//添加表字段填充，"create_time"字段自动填充为插入时间，"modify_time"字段自动填充为插入修改时间</span>                            <span class="token comment">//controller 的配置</span>                            <span class="token punctuation">.</span><span class="token function">controllerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">formatFileName</span><span class="token punctuation">(</span><span class="token string">"%sController"</span><span class="token punctuation">)</span><span class="token comment">//控制类名称后缀</span>                            <span class="token punctuation">.</span><span class="token function">enableRestStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment">//mapper 的配置</span>                            <span class="token punctuation">.</span><span class="token function">mapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">enableBaseResultMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">enableBaseColumnList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">enableMapperAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">//开启 @Mapper 注解</span>                            <span class="token punctuation">.</span><span class="token function">superClass</span><span class="token punctuation">(</span><span class="token class-name">BaseMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment">//设置父类</span>                            <span class="token punctuation">.</span><span class="token function">formatMapperFileName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span>    <span class="token comment">//格式化 mapper 文件名称</span>                            <span class="token punctuation">.</span><span class="token function">formatXmlFileName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//格式化 Xml 文件名称</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//                .templateEngine(new FreemarkerTemplateEngine())</span><span class="token comment">//                .templateEngine(new VelocityTemplateEngine())   // 默认的</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-3-8-使用mybatis-plus代码生成器工具类"><a href="#5-3-8-使用mybatis-plus代码生成器工具类" class="headerlink" title="5.3.8 使用mybatis-plus代码生成器工具类"></a>5.3.8 使用mybatis-plus代码生成器工具类</h3><p>创建一张user表：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p>使用工具类生成：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601153403042.png" alt="image-20220601153403042"></p><h3 id="5-3-9-查看生成的代码"><a href="#5-3-9-查看生成的代码" class="headerlink" title="5.3.9 查看生成的代码"></a>5.3.9 查看生成的代码</h3><h4 id="实体类Bean"><a href="#实体类Bean" class="headerlink" title="实体类Bean"></a>实体类Bean</h4><p>如果数据库中的字段有注释，则会以@ApiModelProperty(“”)的形式展示：</p><p>@TableName(“user”) 表名</p><p>@TableId(“user_id”) 主键</p><p>@TableField(“name”) 数据库中字段名</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"User对象"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"创建时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"更新时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>注意：@Mapper标记该类是一个mybatis-plus的mapper接口，可以被spring boot自动扫描到spring上下文中</p><h4 id="Mapper-xml-映射文件"><a href="#Mapper-xml-映射文件" class="headerlink" title="Mapper.xml 映射文件"></a>Mapper.xml 映射文件</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.demo.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通用查询映射结果 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.demo.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通用查询结果列 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        user_id, name, pwd, create_time, update_time    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span><span class="token comment">/** *  服务类 * @author 成大事 * @since 2022-06-01 15:33:13 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** *  服务实现类 * @author 成大事 * @since 2022-06-01 15:33:13 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token comment">/** *  前端控制器 * @author 成大事 * @since 2022-06-01 15:33:13 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>@RestController 是 @Controller和@ResponseBody 结合。</p><h3 id="5-3-9测试"><a href="#5-3-9测试" class="headerlink" title="5.3.9测试"></a>5.3.9测试</h3><p>在新生成的UserController类编写测试：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在浏览器入<a href="http://localhost:8080/user/queryUser">http://localhost:8080/user/queryUser</a>  测试</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601154552894.png" alt="image-20220601154552894"></p><p>可以看到数据库的数据已经被查询出来了。并进行展示。</p><h4 id="5-3-10-可能会出现的问题"><a href="#5-3-10-可能会出现的问题" class="headerlink" title="5.3.10 可能会出现的问题"></a>5.3.10 可能会出现的问题</h4><p>如果启动失败，出现这个错误：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601154755466.png" alt="image-20220601154755466"></p><p>这是因为Springfox使用的路径匹配是基于AntPathMatcher的，而Spring Boot 2.6.X使用的是PathPatternMatcher。该注解可以更改匹配规则。你也可以直接修改配置spring.mvc.pathmatch.matching-strategy&#x3D;ANT_PATH_MATCHER来更改规则</p><p>在yml配置文件中添加这个：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601154926499.png" alt="image-20220601154926499"></p><p>还有就可在启动类上添加：@EnableWebMvc</p><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">@EnableWebMvc@SpringbootApplicationpublic class DemoApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DemoApplication.class, args);    &#125;&#125;</code></pre><p>OK。</p><h2 id="5-4-Springboot-整合Redis"><a href="#5-4-Springboot-整合Redis" class="headerlink" title="5.4 Springboot 整合Redis"></a>5.4 Springboot 整合Redis</h2><h3 id="5-4-1-添加redis-的起步依赖"><a href="#5-4-1-添加redis-的起步依赖" class="headerlink" title="5.4.1 添加redis 的起步依赖"></a>5.4.1 添加redis 的起步依赖</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 配置使用redis启动器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-4-2-配置redis的连接信息"><a href="#5-4-2-配置redis的连接信息" class="headerlink" title="5.4.2 配置redis的连接信息"></a>5.4.2 配置redis的连接信息</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>             <span class="token comment">#redis 数据库索引（默认为0）</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 10.111.43.55   <span class="token comment">#redis 服务器地址</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>              <span class="token comment">#redis 服务器连接端口号</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span>               <span class="token comment">#redis 服务器连接密码  默认为空</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token comment"># 连接池最大连接数(使用负值表示没有限制） 默认8</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>         <span class="token comment">#连接池最大阻塞等待时间（使用负值表示没有限制） 默认-1</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>          <span class="token comment">#连接池最大空闲连接 默认8</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token comment">#连接池最小空闲连接 默认 0</span></code></pre><h3 id="5-4-3-编写redis-的配置类"><a href="#5-4-3-编写redis-的配置类" class="headerlink" title="5.4.3 编写redis 的配置类"></a>5.4.3 编写redis 的配置类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonAutoDetect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertyAccessor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//key序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value序列化</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value hashmap序列化</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解决查询缓存转换异常的问题</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-4-4-编写redis-的工具类"><a href="#5-4-4-编写redis-的工具类" class="headerlink" title="5.4.4 编写redis 的工具类"></a>5.4.4 编写redis 的工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author 成大事 * @date 2022/1/5 12:56 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token comment">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-4-5测试："><a href="#5-4-5测试：" class="headerlink" title="5.4.5测试："></a>5.4.5测试：</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisUtil</span> redisUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/code"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>在浏览器输入：<a href="http://localhost:8080/user/code?code=666">http://localhost:8080/user/code?code=666</a></p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601162023993.png" alt="image-20220601162023993"></p><p>查看redis 的情况：</p><p><img src="/2022/06/01/springboot%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20220601161951238.png" alt="image-20220601161951238"></p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> Springboot </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> sa-token </tag>
            
            <tag> jwt </tag>
            
            <tag> redis </tag>
            
            <tag> druid </tag>
            
            <tag> tika </tag>
            
            <tag> mybatis-plus-join </tag>
            
            <tag> mapstruct </tag>
            
            <tag> minio </tag>
            
            <tag> mica </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minio笔记</title>
      <link href="/2022/05/29/Minio%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/29/Minio%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#1Minio_1">1.Minio相关介绍</a></li><li><ul><li><a href="#11_2">1.1相关网址</a></li><li><a href="#12Minio_8">1.2Minio介绍</a></li><li><a href="#13Minio_17">1.3Minio基础概念</a></li><li><a href="#14ECErasure_Code_26">1.4纠删码EC(Erasure Code)</a></li><li><a href="#15_29">1.5存储方案</a></li></ul></li><li><a href="#2_31">2.环境搭建</a></li><li><ul><li><a href="#21_32">2.1单机部署介绍</a></li><li><a href="#22_39">2.2单机部署（无纠删码模式）</a></li><li><a href="#23URL_71">2.3通过URL地址对文件进行访问</a></li><li><a href="#24Docker_77">2.4使用Docker单机部署（无纠删码模式）</a></li><li><a href="#25Docker_92">2.5使用Docker单机部署（纠删码模式）</a></li><li><a href="#26_112">2.6分布式集群部署介绍</a></li><li><a href="#27_137">2.7分布式集群部署</a></li></ul></li><li><a href="#3Minio_148">3.Minio客户端使用</a></li><li><ul><li><a href="#31mc_149">3.1mc的使用</a></li><li><a href="#32mc_admin_207">3.2mc admin使用</a></li></ul></li><li><a href="#4Minio_Java_Client_286">4.Minio Java Client使用</a></li><li><ul><li><a href="#41_310">4.1文件上传</a></li><li><a href="#42_355">4.2文件下载</a></li><li><a href="#43_Spring_Bootminio_414">4.3 Spring Boot整合minio</a></li><li><ul><li><a href="#431MinioConfig_415">4.3.1新建配置类MinioConfig</a></li><li><a href="#432_452">4.3.2下载功能代码</a></li><li><a href="#423_483">4.2.3上传功能代码</a></li><li><a href="#424_514">4.2.4删除功能代码</a></li></ul></li></ul></li></ul><h1 id="1-Minio相关介绍"><a href="#1-Minio相关介绍" class="headerlink" title="1.Minio相关介绍"></a>1.<a href="https://so.csdn.net/so/search?q=Minio&spm=1001.2101.3001.7020">Minio</a>相关介绍</h1><h2 id="1-1相关网址"><a href="#1-1相关网址" class="headerlink" title="1.1相关网址"></a>1.1相关网址</h2><p>官网：<a href="https://min.io/">https://min.io/</a><br>中文：<a href="http://www.minio.org.cn/">http://www.minio.org.cn</a><br>官方文档：<a href="https://docs.min.io/docs">https://docs.min.io/docs</a><br>中文文档(滞后)：<a href="http://docs.minio.org.cn/docs">http://docs.minio.org.cn/docs</a><br>官方demo：<a href="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a></p><h2 id="1-2Minio介绍"><a href="#1-2Minio介绍" class="headerlink" title="1.2Minio介绍"></a>1.2Minio介绍</h2><p>Minlo是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。<br>MinlO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似NodeJS,Redis或者MySQL.<br><strong>优点：</strong></p><ul><li>部署简单：一个single二进制文件即是一切，还可支持各种平台。</li><li>minio支持海量存储，可按zone扩展(原zone不受任何影响)，支持单个对象最大5TB;</li><li>兼容Amazon S3接口，充分考虑开发人员的需求和体验;</li><li>低冗余且磁盘损坏高容忍，标准且最高的数据冗余系数为2(即存储一个1M的数据对象，实际占用磁盘空间为2M)。但在任意n&#x2F;2块disk损坏的情况下依然可以读出数据(n为一个纠删码集合(Erasure Coding Set)中的disk数量)。并且这种损坏恢复是基于单个对象的，而不是基于整个存储卷的。</li><li>读写性能优异</li></ul><h2 id="1-3Minio基础概念"><a href="#1-3Minio基础概念" class="headerlink" title="1.3Minio基础概念"></a>1.3Minio基础概念</h2><ul><li>Object：存储到Minio的基本对象,如文件、字节流，Anything…</li><li>Bucket：来存储Object的逻辑空间。每个Bucket之间的数据是相互隔离的。对于客户端而言，就相当于一个存放文件的顶文件夹。</li><li>Drive：即存储数据的磁盘,在MinlO启动时，以参数的方式传入。Minio 中所有的对象数据都会存储在Drive里。</li><li>Set：即一组Drive的集合,分布式部署根据集群规模自动划分一个或多个Set，每个Set中的Drive分布在不同位置。一个对象存储在一个Set上。(For example: {1…64} is divided into 4 sets each of size 16.)<br>。一个对象存储在一个Set上<br>。一个集群划分为多个Set<br>。一个Set包含的Drive数量是固定的,默认由系统根据集群规模自动计算得出<br>。一个SET中的Drive尽可能分布在不同的节点上</li></ul><h2 id="1-4纠删码EC-Erasure-Code"><a href="#1-4纠删码EC-Erasure-Code" class="headerlink" title="1.4纠删码EC(Erasure Code)"></a>1.4纠删码EC(Erasure Code)</h2><p>MinlO使用纠删码机制来保证高可靠性,使用highwayhash来处理数据损坏( Bit Rot Protection)。关于纠删码,简单来说就是可以通过数学计算,把丢失的数据进行还原，它可以将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据,还原为原始数据。<br>即如果有任意小于等于m份的数据失效,仍然能通过剩下的数据还原出来。</p><h2 id="1-5存储方案"><a href="#1-5存储方案" class="headerlink" title="1.5存储方案"></a>1.5存储方案</h2><p><img src="/Minio%E7%AC%94%E8%AE%B0/51b824a7fdac48e6b33c126e2a3e8d53.png" alt="在这里插入图片描述"></p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h1><h2 id="2-1单机部署介绍"><a href="#2-1单机部署介绍" class="headerlink" title="2.1单机部署介绍"></a>2.1单机部署介绍</h2><p>minio server的standalone模式，即要管理的磁盘都在host本地。该启动模式一般仅用于实验环境、 测试环境的验证和学习使用。在standalone模式下，还可以分为non-erasure code mode（无纠删码模式）和erasure code mode（纠删码模式）。<br><strong>non-erasure code mode</strong><br>在此启动模式下，对于每一份对象数据， minio直接在data 下面存储这份数据，不会建立副本，也不会启用纠删码机制。因此，这种模式无论是服务实例还是磁盘都是“单点”，无任何高可用保障，磁盘损坏就表示数据丢失。<br><strong>erasure code mode</strong><br>此模式为minio server实例传入多个本地磁盘参数。一旦遇到多于一个磁盘参数，minio server会自动启用erasure code mode.<br>erasure code对磁盘的个数是有要求的，如不满足要求，实例启动将失败。erasure code启后，要求传给minio server的endpoint（standalone模式下，即本地磁盘上的目录）至少为4个。</p><h2 id="2-2单机部署（无纠删码模式）"><a href="#2-2单机部署（无纠删码模式）" class="headerlink" title="2.2单机部署（无纠删码模式）"></a>2.2单机部署（无纠删码模式）</h2><p><strong>基于ceentos7</strong><br>使用以下命令在运行 64 位 Intel&#x2F;AMD 架构的 Linux 主机上运行独立的 MinIO 服务器。将&#x2F;data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载minio执行文件</span><span class="token function">wget</span> https://dl.min.io/server/minio/release/linux-amd64/minio<span class="token function">chmod</span> +x minio<span class="token comment"># 启动，注意这个每次启动的端口号都会改变，可以进行固定,还可以对用户名和密码进行固定</span>./minio server /mnt/miniodata<span class="token number">12345</span></code></pre><p>可以这样启动（指定端口以及用户密码）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意，密码要大于等于8位！！</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MINIO_ROOT_USER</span><span class="token operator">=</span>admin<span class="token builtin class-name">export</span> <span class="token assign-left variable">MINIO_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">12345678</span><span class="token comment"># 更改配置文件默认路径 （可以不进行修改）</span>./minio server --config-dir /mnt/config /mnt/data<span class="token comment"># 指定端口号（默认是随机的）</span>./minio server --console-address <span class="token string">":50000"</span> /mnt/miniodata<span class="token number">1234567</span></code></pre><p><strong>PS:</strong> 开启服务器防火墙端口号（不开启，本机访问不了该端口）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置防火墙开放9000端口</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">9000</span>/tcp --permanent<span class="token comment"># 更新防火墙配置</span>firewall-cmd --reload<span class="token comment"># 查看已经开放的端口号</span>firewall-cmd --zone<span class="token operator">=</span>public --list-ports<span class="token number">123456</span></code></pre><p>启动之后，可以通过url访问，如图所示：<br><img src="/Minio%E7%AC%94%E8%AE%B0/97ba47139f4d4dd992b2ecba7c0f980e.png" alt="在这里插入图片描述"><br><img src="/Minio%E7%AC%94%E8%AE%B0/4f0059029ba9486aa109cc9226a52050.png" alt="在这里插入图片描述"></p><h2 id="2-3通过URL地址对文件进行访问"><a href="#2-3通过URL地址对文件进行访问" class="headerlink" title="2.3通过URL地址对文件进行访问"></a>2.3通过URL地址对文件进行访问</h2><p>例如图片或视频资源等，在上传到minio服务器之后。<br>可以通过 <code>http://ip:port/桶名/文件名</code> 的形式访问。<br>例如：<code>http://8.142.121.122:9000/avatars/123456789.jpg</code><br>注意：使用URL访问前，一定要把该桶的访问权限改成public.<br><img src="/Minio%E7%AC%94%E8%AE%B0/f1540e8f036443018118737947e69e5f.png" alt="在这里插入图片描述"></p><h2 id="2-4使用Docker单机部署（无纠删码模式）"><a href="#2-4使用Docker单机部署（无纠删码模式）" class="headerlink" title="2.4使用Docker单机部署（无纠删码模式）"></a>2.4使用Docker单机部署（无纠删码模式）</h2><p>首先拉取minio&#x2F;minio</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull minio/minio<span class="token number">1</span></code></pre><p>使用docker启动</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">9000</span>:9000 -p <span class="token number">50000</span>:50000 --name minio <span class="token punctuation">\</span>  -e <span class="token string">"MINIO_ROOT_USER=admin"</span> <span class="token punctuation">\</span>  -e <span class="token string">"MINIO_ROOT_PASSWORD=12345678"</span> <span class="token punctuation">\</span>  -v /mnt/miniodata:/data <span class="token punctuation">\</span>  -v /mnt/minioconfig:/root/.minio <span class="token punctuation">\</span>  minio/minio server --console-address <span class="token string">":50000"</span> /data<span class="token number">123456</span></code></pre><p>可以达到相同的效果</p><h2 id="2-5使用Docker单机部署（纠删码模式）"><a href="#2-5使用Docker单机部署（纠删码模式）" class="headerlink" title="2.5使用Docker单机部署（纠删码模式）"></a>2.5使用Docker单机部署（纠删码模式）</h2><p>Minio使用纠删码erasure code和校验和checksum来保护数据免受硬件故障和无声数据损坏。即便您丢失一半数量(N&#x2F;2)的硬盘，您仍然可以恢复数据。</p><blockquote><p>纠删码是一种恢复丢失和损坏数据的数学算法，Minio采用Reed-Solomon code将对象拆分成N&#x2F;2数据和N&#x2F;2奇偶校验块。这就意味着如果是12块盘，一个对象会被分成6个数据块、6个奇偶校验块，你可以丢失任意6块盘〈不管其是存放的数据块还是奇偶校验块)，你仍可以从剩下的盘中的数据进行恢复。</p></blockquote><p><img src="/Minio%E7%AC%94%E8%AE%B0/69ef7c817afa428b9cffb2f7a56ca8d9.png" alt="在这里插入图片描述"><br>使用Minio Docker镜像，在八块盘中启动Minio服务。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">9000</span>:9000 -p <span class="token number">50000</span>:50000 --name minioec <span class="token punctuation">\</span>  -e <span class="token string">"MINIO_ROOT_USER=admin"</span> <span class="token punctuation">\</span>  -e <span class="token string">"MINIO_ROOT_PASSWORD=12345678"</span> <span class="token punctuation">\</span>  -v /mnt/miniodataec/data1:/data1 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data2:/data2 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data3:/data3 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data4:/data4 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data5:/data5 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data6:/data6 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data7:/data7 <span class="token punctuation">\</span>  -v /mnt/miniodataec/data8:/data8 <span class="token punctuation">\</span>  minio/minio server /data<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span>.8<span class="token punctuation">&#125;</span> --console-address <span class="token string">":50000"</span><span class="token number">123456789101112</span></code></pre><h2 id="2-6分布式集群部署介绍"><a href="#2-6分布式集群部署介绍" class="headerlink" title="2.6分布式集群部署介绍"></a>2.6<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>集群部署介绍</h2><p>分布式Minio可以让你将多块硬盘（甚至在不同的机器上)组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式Minio避免了单点故障。<br><strong>分布式存储可靠性常用方法：</strong><br>分布式存储，很关键的点在于数据的可靠性，即保证数据的完整，不丢失，不损坏。只有在可靠性实现的前提下，才有了追求一致性、高可用、高性能的基础。而对于在存储领域，一般对于保证数据可靠性的方法主要有两类， <strong>一类是冗余法，一类是校验法</strong> 。<br><strong>冗余</strong><br>冗余法最简单直接，即对存储的数据进行副本备份，当数据出现丢失，损坏，即可使用备份内容进行恢复，而副本备份的多少，决定了数据可靠性的高低。这其中会有成本的考量，副本数据越多，数据越可靠，但需要的设备就越多，成本就越高。可靠性是允许丢失其中份数据。当前已有很多分布式系统是采用此种方式实现，如Hadoop的文件系统(3个副本)，Redis的集群，MySQL的主备模式等。<br><strong>校验</strong><br>校验法即通过校验码的数学计算的方式，对出现丢失、损坏的数据进行校验、还原。注意，这里有两个作用，一个校验，通过对数据进行校验和( checksum )进行计算，可以检查数据是否完整，有无损坏或更改，在数据传输和保存时经常用到，如TCP协议;二是恢复还原,通过对数据结合校验码，通过数学计算，还原丢失或损坏的数据，可以在保证数据可靠的前提下，降低冗余，如单机硬盘存储中的RAID技术，纠删码(Erasure Code)技术等。MinlO采用的就是纠删码技术。<br><strong>分布式Minio优势</strong></p><ul><li>数据保护<br>分布式Minio采用纠删码来防范多个节点宕机和位衰减bit rot 。<br>分布式Minio至少需要4个硬盘，使用分布式Minio自动引入了纠删码功能。</li><li>高可用<br>单机Minio服务存在单点故障，相反，如果是一个有N块硬盘的分布式Minio,只要有N&#x2F;2硬盘在线，你的数据就是安全的。不过你需要至少有N&#x2F;2+1个硬盘来创建新的对象。<br>例如，一个16节点的Minio集群，每个节点16块硬盘，就算8台服务器宕机，这个集群仍然是可读的，不过你需要9台服务器才能写数据。</li><li>一致性<br>Minio在分布式和单机模式下，所有读写操作都严格遵守read-after-write一致性模型。</li></ul><p><strong>运行分布式Minio</strong><br>启动一个分布式Minio实例，只需要把硬盘位置做为参数传给minio server命令即可，然后，你需要在所有其它节点运行同样的命令。</p><ul><li>分布式Minio里所有的节点需要有同样的access秘钥和secret秘钥，这样这些节点才能建立连接。为了实现这个，你需要在执行minio server命令之前，先将access秘钥和secret秘钥export成环境变量。新版本使用MINIO_ROOT_USER和MINIO_ROOT_PASSWORD。</li><li>分布式Minio使用的磁盘里必须是干净的，里面没有数据。</li><li>分布式Minio里的节点时间差 <strong>不能超过3秒</strong> ，可以使用 <strong>NTP</strong> 来保证时间一致。</li><li>在Windows下运行分布式Minio处于实验阶段，请悠着点使用。</li><li>下面示例里的IP仅供示例参考，需要改成你真实用到的IP和文件夹路径。</li></ul><h2 id="2-7分布式集群部署"><a href="#2-7分布式集群部署" class="headerlink" title="2.7分布式集群部署"></a>2.7分布式集群部署</h2><p>启动分布式Minio实例，8个节点，每个节点1块盘，需要在8个节点上都运行下面命令。<br><strong>该模块没有深入去写，目前了解即可。</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">MINIO_ROOT_USER</span><span class="token operator">=</span>admin<span class="token builtin class-name">export</span> <span class="token assign-left variable">MINIO_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">12345678</span>minio server http://192.168.244.131/export1 http://192.168.244.132/export2 <span class="token punctuation">\</span>http://192.168.244.133/export3 http://192.168.244.134/export4 <span class="token punctuation">\</span>http://192.168.244.135/export5 http://192.168.244.136/export6 <span class="token punctuation">\</span>http://192.168.244.137/export7 http://192.168.244.138/export8<span class="token number">123456</span></code></pre><h1 id="3-Minio客户端使用"><a href="#3-Minio客户端使用" class="headerlink" title="3.Minio客户端使用"></a>3.Minio客户端使用</h1><h2 id="3-1mc的使用"><a href="#3-1mc的使用" class="headerlink" title="3.1mc的使用"></a>3.1mc的使用</h2><p>MinIO Client（mc）为ls，cat，cp，mirror，diff，find等UNIX命令提供了一种替代方案。它支持文件系统和兼容Amazon S3的云存储服务(AWS Signature v2和v4)。<br><strong>下载客户端mc：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.min.io/client/mc/release/linux-amd64/mc<span class="token function">chmod</span> +x <span class="token function">mc</span>./mc --help<span class="token comment"># 可以添加到sbin下，以后该命令可以直接使用</span><span class="token function">mv</span> <span class="token function">mc</span> /usr/local/sbin<span class="token number">12345</span></code></pre><p><strong>配置mc:</strong><br>将所有的配置信息都存储在~&#x2F;.mc&#x2F;config.json中</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询mc host配置</span><span class="token function">mc</span> config <span class="token function">host</span> <span class="token function">ls</span><span class="token comment"># 添加minio服务(重要)</span><span class="token function">mc</span> config <span class="token function">host</span> <span class="token function">add</span> 服务名字 http://ip:port username password<span class="token function">mc</span> config <span class="token function">host</span> <span class="token function">add</span> minio-server http://192.168.244.131:9000 admin <span class="token number">12345678</span><span class="token comment"># 删除host</span><span class="token function">mc</span> config <span class="token function">host</span> remove minio-server<span class="token number">1234567</span></code></pre><p><strong>一些命令：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span class="token comment"># 列出文件和文件夹。</span>mb<span class="token comment"># 创建一个存储桶或一个文件夹。</span><span class="token function">cat</span><span class="token comment"># 显示文件和对象内容。</span>pipe<span class="token comment"># 将一个STDIN重定向到一个对象或者文件或者STDOUT。</span>share<span class="token comment"># 生成用于共享的URL。</span><span class="token function">cp</span><span class="token comment"># 拷贝文件和对象。</span>mirror<span class="token comment"># 给存储桶和文件夹做镜像。</span><span class="token function">find</span><span class="token comment"># 基于参数查找文件。</span><span class="token function">diff</span><span class="token comment"># 对两个文件夹或者存储桶比较差异。</span><span class="token function">rm</span><span class="token comment"># 删除文件和对象。</span>events<span class="token comment"># 管理对象通知。</span><span class="token function">watch</span><span class="token comment"># 监视文件和对象的事件。</span>policy<span class="token comment"># 管理访问策略。</span>config<span class="token comment"># 管理mc配置文件。</span>update<span class="token comment"># 检查软件更新。</span>version<span class="token comment"># 输出版本信息。</span><span class="token number">12345678910111213141516</span></code></pre><p><strong>命令演示：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载文件</span><span class="token function">mc</span> <span class="token function">cp</span> minio-server/test1/7.jpg /mnt/data/<span class="token comment"># 删除文件</span><span class="token function">mc</span> <span class="token function">rm</span> minio-server/test1/03.jpg<span class="token comment"># 上传文件</span><span class="token function">mc</span> <span class="token function">cp</span> /mnt/data/7.jpg minio-server/test1/ <span class="token number">123456</span></code></pre><p><strong>Bucket管理：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建bucket</span><span class="token function">mc</span> mb minio-server/bucket01<span class="token comment"># 删除bucket</span><span class="token function">mc</span> rb minio-server/bucket01<span class="token comment"># bucket不为空，可以强制删除 （慎用）</span><span class="token function">mc</span> rb --force minio-server/bucket01<span class="token number">123456</span></code></pre><h2 id="3-2mc-admin使用"><a href="#3-2mc-admin使用" class="headerlink" title="3.2mc admin使用"></a>3.2mc admin使用</h2><p>MinIO Client（mc）提供了“ admin”子命令来对您的MinIO部署执行管理任务。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span><span class="token comment"># 服务重启并停止所有MinIO服务器</span>update      <span class="token comment"># 更新更新所有MinIO服务器</span>info        <span class="token comment"># 信息显示MinIO服务器信息</span>user        <span class="token comment"># 用户管理用户</span>group       <span class="token comment"># 小组管理小组</span>policy      <span class="token comment"># MinIO服务器中定义的策略管理策略</span>config      <span class="token comment"># 配置管理MinIO服务器配置</span>heal        <span class="token comment"># 修复MinIO服务器上的磁盘，存储桶和对象</span>profile     <span class="token comment"># 概要文件生成概要文件数据以进行调试</span><span class="token function">top</span>         <span class="token comment"># 顶部提供MinIO的顶部统计信息</span>trace       <span class="token comment"># 跟踪显示MinIO服务器的http跟踪</span>console     <span class="token comment"># 控制台显示MinIO服务器的控制台日志</span>prometheus  <span class="token comment"># Prometheus管理Prometheus配置</span>kms         <span class="token comment"># kms执行KMS管理操作</span><span class="token number">1234567891011121314</span></code></pre><p><strong>用户管理：(重要)</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mc</span> admin user --help<span class="token comment"># 新建用户</span><span class="token function">mc</span> admin user <span class="token function">add</span> minio-server huige<span class="token function">mc</span> admin user <span class="token function">add</span> minio-server huige02 <span class="token number">12345678</span><span class="token comment"># 查看用户信息</span><span class="token function">mc</span> admin user list minio-server<span class="token comment"># 禁用用户</span><span class="token function">mc</span> admin user disable minio-server huige<span class="token comment"># 启用用户</span><span class="token function">mc</span> admin user <span class="token builtin class-name">enable</span> minio-server huige<span class="token comment"># 删除用户</span><span class="token function">mc</span> admin user remove minio-server huige<span class="token number">123456789101112</span></code></pre><p><strong>策略管理（重要）</strong><br>有了用户之后，还要有权限才能访问 policy，查看策略的相关命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mc</span> admin policy --help<span class="token comment"># 列出MinIO上所有的固定策略，主要有consoleAdmin、diagnostics、readonly、readwrite、writeonly </span><span class="token function">mc</span> admin policy list minio-server<span class="token comment"># 查看pllicy信息</span><span class="token function">mc</span> admin policy info minio-server <span class="token builtin class-name">readonly</span><span class="token number">12345</span></code></pre><p><strong>添加新的策略</strong><br>编写策略文件：&#x2F;mnt&#x2F;minio-user-policy-json&#x2F;minio-huige.json</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span>  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>    <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>    <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"s3:GetBucketLocation"</span><span class="token punctuation">,</span>    <span class="token string">"s3:GetObject"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"Resource"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"arn:aws:s3:::huige"</span><span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>    <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"s3:*"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"arn:aws:s3:::huige/*"</span>    <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223</span></code></pre><p>将minio-huige.json添加到策略数据库</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mc</span> admin policy <span class="token function">add</span> 服务名 策略名 json文件<span class="token comment"># 举例：</span><span class="token function">mc</span> admin policy <span class="token function">add</span> minio-server huige-admin /mnt/minio-user-policy-json/minio-huige.json<span class="token comment"># 可以进行查看，添加成功没</span><span class="token function">mc</span> admin policy list minio-server<span class="token comment"># 设置用户的访问策略</span><span class="token function">mc</span> admin policy <span class="token builtin class-name">set</span> minio-server huige-admin <span class="token assign-left variable">user</span><span class="token operator">=</span>huige<span class="token number">1234567</span></code></pre><h1 id="4-Minio-Java-Client使用"><a href="#4-Minio-Java-Client使用" class="headerlink" title="4.Minio Java Client使用"></a>4.Minio Java Client使用</h1><p>官方demo：<a href="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a><br>官方文档：<a href="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a><br>引入依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.minio/minio --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/me.tongfei/progressbar --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>me.tongfei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>progressbar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>123456789101112131415161718</code></pre><h2 id="4-1文件上传"><a href="#4-1文件上传" class="headerlink" title="4.1文件上传"></a>4.1文件上传</h2><p>具体写代码，进入github的官方demo或者官方文档，找到相应功能的代码即可。<br>如下是文件上传的代码举例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">BucketExistsArgs</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">MakeBucketArgs</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">MinioClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">UploadObjectArgs</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>errors<span class="token punctuation">.</span></span><span class="token class-name">MinioException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">InvalidKeyException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploader</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 创建客户端</span>      <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span><span class="token string">"https://192.168.244.131:9000"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345678"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 看桶存在不存在</span>      <span class="token keyword">boolean</span> found <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">BucketExistsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"桶名"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不存在则创建一个该桶名的桶</span>        minioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">MakeBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"桶名"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token comment">// 上传</span>      minioClient<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>          <span class="token class-name">UploadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"桶名"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">"桶内对象名"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">"/home/user/Photos/asiaphotos.zip(文件本地磁盘的地址)"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MinioException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error occurred: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HTTP trace: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">httpTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839</span></code></pre><h2 id="4-2文件下载"><a href="#4-2文件下载" class="headerlink" title="4.2文件下载"></a>4.2文件下载</h2><p>本部分仍为举例，具体其他功能请参考官网文档或者官方demo。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">DownloadObjectArgs</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">MinioClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">ServerSideEncryptionCustomerKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>errors<span class="token punctuation">.</span></span><span class="token class-name">MinioException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">InvalidKeyException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">KeyGenerator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadObject</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** MinioClient.getObject() example. */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span>          <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span><span class="token string">"https://192.168.244.131:9000"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345678"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* Amazon S3: */</span>      <span class="token comment">// MinioClient minioClient =</span>      <span class="token comment">//     MinioClient.builder()</span>      <span class="token comment">//         .endpoint("https://s3.amazonaws.com")</span>      <span class="token comment">//         .credentials("YOUR-ACCESSKEY", "YOUR-SECRETACCESSKEY")</span>      <span class="token comment">//         .build();</span><span class="token comment">// (1)不加密的方式下载：</span>      <span class="token punctuation">&#123;</span>        minioClient<span class="token punctuation">.</span><span class="token function">downloadObject</span><span class="token punctuation">(</span>            <span class="token class-name">DownloadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"my-bucketname"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">"my-objectname"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">"my-filename(到哪里)"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">// (2)加密的方式下载：</span>      <span class="token punctuation">&#123;</span>        <span class="token class-name">KeyGenerator</span> keyGen <span class="token operator">=</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyGen<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSideEncryptionCustomerKey</span> ssec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSideEncryptionCustomerKey</span><span class="token punctuation">(</span>keyGen<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minioClient<span class="token punctuation">.</span><span class="token function">downloadObject</span><span class="token punctuation">(</span>            <span class="token class-name">DownloadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"my-bucketname"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">"my-objectname"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">"my-filename"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ssec</span><span class="token punctuation">(</span>ssec<span class="token punctuation">)</span> <span class="token comment">// Replace with same SSE-C used at the time of upload.</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MinioException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error occurred: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><h2 id="4-3-Spring-Boot整合minio"><a href="#4-3-Spring-Boot整合minio" class="headerlink" title="4.3 Spring Boot整合minio"></a>4.3 Spring Boot整合minio</h2><h3 id="4-3-1新建配置类MinioConfig"><a href="#4-3-1新建配置类MinioConfig" class="headerlink" title="4.3.1新建配置类MinioConfig"></a>4.3.1新建配置类MinioConfig</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioConfig</span><span class="token punctuation">&#123;</span><span class="token comment">// 这个部分可以用属性配置类去做，看下面(1)(2)两个部分代码就懂了</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">MinioProperties</span> minioProperties<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MinioClient</span> <span class="token function">minioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>minioProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>minioProperties<span class="token punctuation">.</span><span class="token function">getAccessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minioProperties<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> minioClient<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>（1）其中MinioProperties由yml统一管理。<br>新建一个类MinioProperties</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"minio"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioProperties</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>（2）最后在yml配置文件中这么写：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.244.131<span class="token punctuation">:</span><span class="token number">9000</span>  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> admin  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> <span class="token number">12345678</span>1234</code></pre><h3 id="4-3-2下载功能代码"><a href="#4-3-2下载功能代码" class="headerlink" title="4.3.2下载功能代码"></a>4.3.2下载功能代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/download/&#123;fileName&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token comment">// 获取对象信息</span><span class="token class-name">StatObjectResponse</span> stat <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">statObject</span><span class="token punctuation">(</span><span class="token class-name">StatObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 文件下载</span>in <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">GetObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error occurred: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728</span></code></pre><h3 id="4-2-3上传功能代码"><a href="#4-2-3上传功能代码" class="headerlink" title="4.2.3上传功能代码"></a>4.2.3上传功能代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Res</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> file<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传文件不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> orgfileNameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> multipartFile <span class="token operator">:</span> file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> orgfileName <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orgfileNameList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orgfileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">// 文件上传</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>            <span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>orgfileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>                    in<span class="token punctuation">,</span> multipartFile<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627</span></code></pre><h3 id="4-2-4删除功能代码"><a href="#4-2-4删除功能代码" class="headerlink" title="4.2.4删除功能代码"></a>4.2.4删除功能代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/&#123;fileName&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Res</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>minioClient<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token class-name">RemoveObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version</code></pre><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><h4 id="说明：我们有个镜像才可以创建容器，linux，下载一个centos镜像来测试学习w"><a href="#说明：我们有个镜像才可以创建容器，linux，下载一个centos镜像来测试学习w" class="headerlink" title="说明：我们有个镜像才可以创建容器，linux，下载一个centos镜像来测试学习w"></a>说明：我们有个镜像才可以创建容器，linux，下载一个centos镜像来测试学习w</h4><pre class="language-docker" data-language="docker"><code class="language-docker">docker pull centos</code></pre><h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span>  image<span class="token comment">#参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span>    容器名字 tomcat01 tomcat02 用来区分容器-d               后台方式运行-it              使用交互方式运行，进入容器查看内容-p               指定容器的端口 -p <span class="token number">8080</span>:8080-p  主机端口:容器端口-p  容器端口-p  ip：主机端口:容器端口容器端口-P<span class="token punctuation">(</span>大写<span class="token punctuation">)</span>          随机指定端口<span class="token comment">#测试，启动并进入容器</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@befa73c2a1fd /<span class="token punctuation">]</span><span class="token comment"># ls      #查看容器内的centos，基础版本，很多命令都是不完善的。</span>bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media   opt  root  sbin  sys  usr<span class="token comment">#退出命令 从容器退回主机</span><span class="token punctuation">[</span>root@befa73c2a1fd /<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span></code></pre><h4 id="列出所有的运行的容器"><a href="#列出所有的运行的容器" class="headerlink" title="列出所有的运行的容器"></a>列出所有的运行的容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>CONTAINER ID   IMAGE         COMMAND       CREATED          STATUS                      PORTS     NAMESbefa73c2a1fd   centos        <span class="token string">"/bin/bash"</span>   <span class="token number">34</span> minutes ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">29</span> minutes ago             cool_ramanujan49a4be7f359a   hello-world   <span class="token string">"/hello"</span>      <span class="token number">5</span> hours ago      Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">5</span> hours ago                naughty_haslett</code></pre><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span>                <span class="token comment">#直接容器停止并退出</span>Ctrl + p + q        <span class="token comment">#容器不停止退出</span></code></pre><p><strong>docker rmi 删除镜像!</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi -f  镜像id     <span class="token comment">#删除指定的镜像</span><span class="token function">docker</span> rmi -f  镜像id 镜像id 镜像id    <span class="token comment">#删除多个镜像</span><span class="token function">docker</span> rmi -f  <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images -aq<span class="token variable">)</span></span>     <span class="token comment">#删除所有的镜像</span></code></pre><p><strong>docker rmi 删除容器!</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span>   容器id     <span class="token comment">#删除指定的容器，不能删除正在运行的容器，如果强制删除-f</span><span class="token function">docker</span> <span class="token function">rm</span> -f  镜像id 镜像id 镜像id    <span class="token comment">#删除多个镜像</span><span class="token function">docker</span> <span class="token function">rm</span> -f  <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token variable">)</span></span>     <span class="token comment">#删除所有的容器</span><span class="token function">docker</span> <span class="token function">ps</span> -a -q <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>   <span class="token comment">#删除所有的容器</span></code></pre><h5 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span>  start    容器id             <span class="token comment">#启动容器</span><span class="token function">docker</span>  restart  容器id             <span class="token comment">#重启容器</span><span class="token function">docker</span>  stop     容器id             <span class="token comment">#停止当前正在运行的容器</span><span class="token function">docker</span>  <span class="token function">kill</span>     容器id             <span class="token comment">#强制停止当前的容器</span></code></pre><h4 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h4><h5 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令 docker run  -d 镜像名</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -d centos</span>234d6f5bc2a5d01b69f363998f0f3b1c85eeb2e9d71b2bd7be4de5d35aa35c0d<span class="token comment">#问题docker ps 发现centos 停止了</span><span class="token comment"># 常见的坑：docker容器使用后台启动，就必须要有一个前台进程，docker发现没有应用，就会自动停止。</span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示日志</span>-tf                          <span class="token comment">#显示日志</span>--tail number                <span class="token comment">#要显示日志条数</span><span class="token function">docker</span> logs -tf --tail <span class="token number">10</span> 容器Id</code></pre><h4 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#命令 docker top 容器id</span></code></pre><h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect 容器id</code></pre><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span><span class="token comment">#命令  </span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器id<span class="token comment"># 方式二</span><span class="token function">docker</span> attach 容器id<span class="token comment">#docker exec     #进入容器后开启一个新的终端，可以在里面操作（常用）</span><span class="token comment">#docker attach   #进入容器正在执行的终端，不会启动新的进程。</span></code></pre><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内路径  目的主机路径</code></pre><h2 id="Docker-一些部署的测试"><a href="#Docker-一些部署的测试" class="headerlink" title="Docker 一些部署的测试"></a>Docker 一些部署的测试</h2><h3 id="Docker-部署Nginx"><a href="#Docker-部署Nginx" class="headerlink" title="Docker 部署Nginx"></a>Docker 部署Nginx</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1,搜索镜像 search 可以去docker搜索，可以看到帮助文档</span><span class="token comment">#2.下载镜像，pull</span><span class="token comment">#3，运行测试</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED        SIZEnginx         latest    605c77e624dd   <span class="token number">13</span> days ago    141MBmysql         latest    3218b38490ce   <span class="token number">3</span> weeks ago    516MBhello-world   latest    feb5d9fea6a5   <span class="token number">3</span> months ago   <span class="token number">13</span>.3kBcentos        latest    5d0da3dc9764   <span class="token number">3</span> months ago   231MB<span class="token comment"># -d               后台运行</span><span class="token comment">#--name            给容器命令</span><span class="token comment">#-p                宿主机</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker run --name nginx -p 80:80 -d nginx</span>819563d4625b7d3b1872b874bae052d8bd0b7975e3d8ce160d24a3c9b075339b<span class="token comment">#访问测试</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># curl localhost</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>html <span class="token punctuation">&#123;</span> color-scheme: light dark<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>body <span class="token punctuation">&#123;</span> width: 35em<span class="token punctuation">;</span> margin: <span class="token number">0</span> auto<span class="token punctuation">;</span>font-family: Tahoma, Verdana, Arial, sans-serif<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>p<span class="token operator">></span>If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>For online documentation and support please refer to<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"http://nginx.org/"</span><span class="token operator">></span>nginx.org<span class="token operator">&lt;</span>/a<span class="token operator">></span>.<span class="token operator">&lt;</span>br/<span class="token operator">></span>Commercial support is available at<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"http://nginx.com/"</span><span class="token operator">></span>nginx.com<span class="token operator">&lt;</span>/a<span class="token operator">></span>.<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>em<span class="token operator">></span>Thank you <span class="token keyword">for</span> using nginx.<span class="token operator">&lt;</span>/em<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token comment">#进入Nginx</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker exec -it nginx /bin/bash</span>root@819563d4625b:/<span class="token comment"># </span></code></pre><h3 id="Docker-部署Tomcat"><a href="#Docker-部署Tomcat" class="headerlink" title="Docker 部署Tomcat"></a>Docker 部署Tomcat</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#官方的使用</span><span class="token function">docker</span> run -it --rm tomcat:9.0<span class="token comment">#我们之前的启动都是后台，停止了容器之后，容器还是可以查到，docker run -it --rm ，一般是用来测试，用完删除</span><span class="token comment">#下载再启动</span><span class="token function">docker</span> pull tomcat:9.0<span class="token comment">#启动运行</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker run -d -p 3355:8080 --name tomcat tomcat:9.0</span>6cc5261a27231b91ef787915d9d9c37cc6101e575799e9e35b78cbec9584fc71<span class="token comment">#进入容器</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat /bin/bash</span><span class="token comment">#问题：1，linux命令少了。2，没有webapps。阿里云镜像的原因，默认是最下的镜像，所有不必要的都剔除掉。</span><span class="token comment">#保证最小可运行的环境。</span></code></pre><p>如何提交一个自己的镜像</p><h4 id="Commit镜像"><a href="#Commit镜像" class="headerlink" title="Commit镜像"></a>Commit镜像</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit 提交容器成为一个新的副本<span class="token comment">#命令和git原理类似</span><span class="token function">docker</span> commit -m<span class="token operator">=</span><span class="token string">"提交的描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span></code></pre><p>实战测试</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1，启动一个默认的tomcat</span><span class="token comment">#2，发现这个默认的tomcat是没有webapps应用的，镜像的原因，官方的镜像默认webapps下没有任何文件。</span><span class="token comment">#3，自己拷贝一些基本文件到webapps</span><span class="token comment">#4，将我们操作过的容器通过commit提交为一个镜像！我们以后可以使用我们修改过的镜像。</span></code></pre><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><h4 id="docker的理念回顾"><a href="#docker的理念回顾" class="headerlink" title="docker的理念回顾"></a>docker的理念回顾</h4><p>将应用和环境打包为一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！<font color='orange'>需求：数据可以持久化</font></p><p>MySQL，容器删了，删库跑路<font color='orange'>需求：MySQL数据可以存储在本地！</font></p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到linux上。</p><p><strong>总结：容器的持久化和同步操作</strong></p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote><p>方式一：直接使用命令挂载</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it -v 主机目录:容器内目录<span class="token comment">#测试</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it -v /home/test:/home centos /bin/bash</span><span class="token comment">#启动起来的时候，我们可以通过docker inspect 容器id</span></code></pre><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104136387.png" alt="image-20220525104136387"></p><p>测试文件的同步</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104142814.png" alt="image-20220525104142814"></p><p>再来测试</p><p>1，停止容器</p><p>2，宿主机上修改文件</p><p>3，启动容器</p><p>4，容器内的数据依旧是同步的！</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104153293.png" alt="image-20220525104153293"></p><p>好处：我们以后只需要在本地修改即可。容器内会自动同步。</p><h3 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h3><p>思考：MySQL的数据持久化问题！</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#获取镜像</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span class="token comment">#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！</span><span class="token comment">#官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><span class="token comment">#启动：</span>-d        后台运行-p        端口映射-v        卷挂载-e        环境配置--name    容器名字<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql0 mysql:5.6</span></code></pre><p>如果我们将容器删除，挂载到本地的数据卷依旧没有丢失。这就实现了容器数据持久化功能！</p><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#匿名挂载</span>-v  容器内路径！<span class="token function">docker</span> run -d -P --name nginx01 -v /etc/nginx nginx<span class="token comment">#查看所有的volume的情况</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     97ef64b1ed6c0d61254cdcca54a129b65b4836076dea05c051797c7fe83e9e02<span class="token comment">#这里发现，这种就是匿名挂载，我们在-v只写了容器内的路径，没有写容器外的路径！</span><span class="token comment">#具名挂载</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name nginx02 -v juming-nginx:/ect/nginx nginx</span>DRIVER    VOLUME NAME<span class="token builtin class-name">local</span>     juming-nginx<span class="token comment">#通过-v  卷名：容器内路径</span><span class="token comment">#查看这个卷</span></code></pre><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104200328.png" alt="image-20220525104200328"></p><p>所有docker容器内的卷，没有指定目录的情况下都是在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxxx&#x2F;_data</p><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况下使用<strong>具名挂载。</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span>-v   容器内路径                     <span class="token comment">#匿名挂载           </span>-v   卷名:容器内路径                 <span class="token comment">#具名挂载         </span>-v   /宿主机路径::容器内路径          <span class="token comment">#指定路径挂载</span></code></pre><p>拓展：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过 -v 容器内路径：ro  rw 改变读写权限</span>ro     <span class="token builtin class-name">readonly</span>      <span class="token comment">#只读</span>rw     readwrite     <span class="token comment">#可读可写</span><span class="token comment">#一旦设置了容器权限，容器对我们挂载出来的内容就有限定了。</span><span class="token function">docker</span> run -d -P --name nginx02 -v juming-ngingx:/etc/nginx:ro nginx<span class="token function">docker</span> run -d -P --name nginx02 -v juming-ngingx:/etc/nginx:rw nginx<span class="token comment">#ro 说明和这个路径只能通过宿主机来操作，容器内是无法操作的！</span></code></pre><h3 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h3><p>Dockerfile 就是用来构建docker镜像的构建文件！命令脚本！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层!</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建一个dockerfile文件，名字可以随机，建议dockerfile</span><span class="token comment">#文件中的内容，指令（大写） 参数</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"----end----"</span>CMD /bin/bash<span class="token comment">#这里的每个命令，就是镜像的一层。</span></code></pre><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104208981.png" alt="image-20220525104208981"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动自己写的容器</span></code></pre><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104213401.png" alt="image-20220525104213401"></p><p>这个卷和外部一定有一个同步的目录</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104219701.png" alt="image-20220525104219701"></p><p>查看一个卷挂载的路径</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104224206.png" alt="image-20220525104224206"></p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104229692.png" alt="image-20220525104229692"></p><p>结论：容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦持久化到了本地。这个时候，本地的数据是不会被删除的。</p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h3><p>dockerfile是用来构建docker镜像的文件。命令参数脚本！</p><p>构建步骤：</p><p>1，编写一个dockerfile文件。</p><p>2，docker build 构建成为一个镜像。</p><p>3，docker run 运行镜像。</p><p>4，docker push 发布镜像（DockerHub，阿里云镜像仓库）。</p><h3 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h3><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><p>1，每个保留关键字（指令）都必须是大写字母。</p><p>2，执行从上到下顺序执行。</p><p>3，#表示注释</p><p>4，每一个指令都会创建一个新的镜像层，并提交！</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104235376.png" alt="image-20220525104235376"></p><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成为企业交付的标准。</p><p>步骤：开发，部署，运维</p><p>DockerFile：构建文件，定义了一切的步骤，源代码。</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h3 id="Docker的基本指令"><a href="#Docker的基本指令" class="headerlink" title="Docker的基本指令"></a>Docker的基本指令</h3><pre class="language-bash" data-language="bash"><code class="language-bash">FROM            <span class="token comment">#基础镜像，一切从这里开始构建。</span>MAINTAINER      <span class="token comment">#镜像是谁写的，姓名+邮箱</span>RUN             <span class="token comment">#镜像构建的时候需要运行的命令</span>ADD             <span class="token comment">#步骤：tomcat镜像，这个tomcat压缩包！添加内容</span>WORKDIR         <span class="token comment">#镜像的工作目录</span>VOLUME          <span class="token comment">#挂载的目录</span>EXPOST          <span class="token comment">#保留端口配置</span>CMD             <span class="token comment">#指定这个容器启动的时候要运行的命令，只有一个会生效，可被替代。</span>ENTRYPOINT      <span class="token comment">#指定这个容器启动的时候要运行的命令，可以追加命令。</span>ONBUILD         <span class="token comment">#当构建一个被集成DockerFile这个时候就会运行ONBUILD的指令。触发指令。</span>COPY            <span class="token comment">#类似ADD，将我们文件拷贝到镜像中。</span>ENV             <span class="token comment">#构建的时候设置环境变量。</span></code></pre><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104241206.png" alt="image-20220525104241206"></p><h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104246419.png" alt="image-20220525104246419"></p><blockquote><p>创建一个自己的centos</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1,编写Dockerfile的文件</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># cat mydockerfile-centos </span>FROM centosMAINTAINER chengdashi<span class="token operator">&lt;</span><span class="token number">1847985602</span>@qq.com<span class="token operator">></span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum -y <span class="token function">install</span> <span class="token function">vim</span>RUN yum -y <span class="token function">install</span> net-toolsEXPOSE <span class="token number">80</span>CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"-----end-----"</span>CMD /bin/bash<span class="token comment">#2，通过这个文件构建镜像</span><span class="token comment">#命令  docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span>Successfully built 77f22c72c9ceSuccessfully tagged mycentos:0.1<span class="token comment">#3,测试运行</span></code></pre><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104252547.png" alt="image-20220525104252547"></p><p>对比：之前的原生的centos</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104257890.png" alt="image-20220525104257890"></p><p>我们增加之后的镜像。</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104302219.png" alt="image-20220525104302219"></p><p>我们可以列出本地镜像的变更历史。</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104306647.png" alt="image-20220525104306647"></p><blockquote><p>CMD和ENTRYPOINT 区别</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">CMD             <span class="token comment">#指定这个容器启动的时候要运行的命令，只有一个会生效，可被替代。</span>ENTRYPOINT      <span class="token comment">#指定这个容器启动的时候要运行的命令，可以追加命令。</span></code></pre><p>测试cmd</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编写dockerfile文件</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span>vim dockerfile-cmd-testFROM centosCMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment">#构建镜像</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker build -f dockerfile-cmd-test -t cmdtest .</span><span class="token comment">#run运行，发现我们的ls -a命令生效 </span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run 5d992cc604f3</span><span class="token builtin class-name">.</span><span class="token punctuation">..</span>.dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrunsbinsrvsystmpusrvar<span class="token comment">#想追加一个命令-l  ls -al</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run 5d992cc604f3 -l</span>docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: <span class="token string">"-l"</span><span class="token builtin class-name">:</span> executable <span class="token function">file</span> not found <span class="token keyword">in</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span> unknown.<span class="token comment">#cmd的清理下 -l 替换了 CMD ["ls","-a"] 命令，-l不是命令所以报错！。</span></code></pre><p>测试ENTRYPOINT</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-cmd-entrypoint</span>FROM centosENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker build -f dockerfile-cmd-entrypoint -t entrypointtest .</span>Sending build context to Docker daemon  <span class="token number">4</span>.096kBStep <span class="token number">1</span>/2 <span class="token builtin class-name">:</span> FROM centos ---<span class="token operator">></span> 5d0da3dc9764Step <span class="token number">2</span>/2 <span class="token builtin class-name">:</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 84e6d08564e6Removing intermediate container 84e6d08564e6 ---<span class="token operator">></span> 66bc3ba82b23Successfully built 66bc3ba82b23Successfully tagged entrypointtest:latest<span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># ls</span>dockerfile-cmd-entrypoint  dockerfile-cmd-test  mydockerfile-centos<span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run 66bc3ba82b23</span><span class="token builtin class-name">.</span><span class="token punctuation">..</span>.dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrunsbinsrvsystmpusrvar<span class="token comment">#我们追加命令，是直接拼接到我们ENTRYPOINT命令后面。</span><span class="token punctuation">[</span>root@localhost dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run 66bc3ba82b23 -l</span>total <span class="token number">0</span>drwxr-xr-x.   <span class="token number">1</span> root root   <span class="token number">6</span> Jan <span class="token number">14</span> <span class="token number">12</span>:37 <span class="token builtin class-name">.</span>drwxr-xr-x.   <span class="token number">1</span> root root   <span class="token number">6</span> Jan <span class="token number">14</span> <span class="token number">12</span>:37 <span class="token punctuation">..</span>-rwxr-xr-x.   <span class="token number">1</span> root root   <span class="token number">0</span> Jan <span class="token number">14</span> <span class="token number">12</span>:37 .dockerenvlrwxrwxrwx.   <span class="token number">1</span> root root   <span class="token number">7</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> bin -<span class="token operator">></span> usr/bindrwxr-xr-x.   <span class="token number">5</span> root root <span class="token number">340</span> Jan <span class="token number">14</span> <span class="token number">12</span>:37 devdrwxr-xr-x.   <span class="token number">1</span> root root  <span class="token number">66</span> Jan <span class="token number">14</span> <span class="token number">12</span>:37 etcdrwxr-xr-x.   <span class="token number">2</span> root root   <span class="token number">6</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> homelrwxrwxrwx.   <span class="token number">1</span> root root   <span class="token number">7</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> lib -<span class="token operator">></span> usr/liblrwxrwxrwx.   <span class="token number">1</span> root root   <span class="token number">9</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> lib64 -<span class="token operator">></span> usr/lib64drwx------.   <span class="token number">2</span> root root   <span class="token number">6</span> Sep <span class="token number">15</span> <span class="token number">14</span>:17 lost+founddrwxr-xr-x.   <span class="token number">2</span> root root   <span class="token number">6</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> mediadrwxr-xr-x.   <span class="token number">2</span> root root   <span class="token number">6</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> mntdrwxr-xr-x.   <span class="token number">2</span> root root   <span class="token number">6</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> optdr-xr-xr-x. <span class="token number">141</span> root root   <span class="token number">0</span> Jan <span class="token number">14</span> <span class="token number">12</span>:37 procdr-xr-x---.   <span class="token number">2</span> root root <span class="token number">162</span> Sep <span class="token number">15</span> <span class="token number">14</span>:17 rootdrwxr-xr-x.  <span class="token number">11</span> root root <span class="token number">163</span> Sep <span class="token number">15</span> <span class="token number">14</span>:17 runlrwxrwxrwx.   <span class="token number">1</span> root root   <span class="token number">8</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> sbin -<span class="token operator">></span> usr/sbindrwxr-xr-x.   <span class="token number">2</span> root root   <span class="token number">6</span> Nov  <span class="token number">3</span>  <span class="token number">2020</span> srvdr-xr-xr-x.  <span class="token number">13</span> root root   <span class="token number">0</span> Jan <span class="token number">14</span> 02:37 sysdrwxrwxrwt.   <span class="token number">7</span> root root <span class="token number">171</span> Sep <span class="token number">15</span> <span class="token number">14</span>:17 tmpdrwxr-xr-x.  <span class="token number">12</span> root root <span class="token number">144</span> Sep <span class="token number">15</span> <span class="token number">14</span>:17 usrdrwxr-xr-x.  <span class="token number">20</span> root root <span class="token number">262</span> Sep <span class="token number">15</span> <span class="token number">14</span>:17 var</code></pre><h3 id="实现：Tomcat-镜像"><a href="#实现：Tomcat-镜像" class="headerlink" title="实现：Tomcat 镜像"></a>实现：Tomcat 镜像</h3><p>1、准备镜像文件tomcat压缩包，jdk的压缩包。</p><p><img src="/2022/05/25/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220525104316547.png" alt="image-20220525104316547"></p><p>2、</p><h2 id="Springboot打包成docker镜像"><a href="#Springboot打包成docker镜像" class="headerlink" title="Springboot打包成docker镜像"></a>Springboot打包成docker镜像</h2><p>1，构建springboot项目</p><p>2，打包应用</p><p>3，编写dockerfile</p><p>4，构建镜像</p><p>5，发布</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch笔记</title>
      <link href="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>-</td><td><strong><a href="#1_Elasticsearch_33">第1章 Elasticsearch概述</a></strong></td><td>-</td></tr><tr><td><a href="#01_35">01-开篇</a></td><td><a href="#02_53">02-技术选型</a></td><td><a href="#03_94">03-教学大纲</a></td></tr><tr><td>-</td><td><strong><a href="#2_Elasticsearch_104">第2章 Elasticsearch入门</a></strong></td><td>-</td></tr><tr><td><a href="#04_106">04-入门-环境准备</a></td><td><a href="#05RESTful__JSON_152">05-入门-RESTful &amp; JSON</a></td><td><a href="#06Postman_163">06-入门-Postman客户端工具</a></td></tr><tr><td><a href="#07_172">07-入门-倒排索引</a></td><td><a href="#08HTTP_195">08-入门-HTTP-索引-创建</a></td><td><a href="#09HTTP___241">09-入门-HTTP-索引-查询 &amp; 删除</a></td></tr><tr><td><a href="#10HTTPPut__Post_316">10-入门-HTTP-文档-创建（Put &amp; Post）</a></td><td><a href="#11HTTP___392">11-入门-HTTP-查询-主键查询 &amp; 全查询</a></td><td><a href="#12HTTP_____485">12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除</a></td></tr><tr><td><a href="#13HTTP_____618">13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序</a></td><td><a href="#14HTTP___1264">14-入门-HTTP-多条件查询 &amp; 范围查询</a></td><td><a href="#15HTTP_____1522">15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询</a></td></tr><tr><td><a href="#16HTTP_1810">16-入门-HTTP-聚合查询</a></td><td><a href="#17HTTP_2049">17-入门-HTTP-映射关系</a></td><td><a href="#18JavaAPI_2369">18-入门-JavaAPI-环境准备</a></td></tr><tr><td><a href="#19JavaAPI_2441">19-入门-JavaAPI-索引-创建</a></td><td><a href="#20JavaAPI___2486">20-入门-JavaAPI-索引-查询 &amp; 删除</a></td><td><a href="#21JavaAPI___2569">21-入门-JavaAPI-文档-新增 &amp; 修改</a></td></tr><tr><td><a href="#22JavaAPI___2727">22-入门-JavaAPI-文档-查询 &amp; 删除</a></td><td><a href="#23JavaAPI___2799">23-入门-JavaAPI-文档-批量新增 &amp; 批量删除</a></td><td><a href="#24JavaAPI_2882">24-入门-JavaAPI-文档-高级查询-全量查询</a></td></tr><tr><td><a href="#25JavaAPI_____2982">25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</a></td><td><a href="#26JavaAPI___3173">26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</a></td><td><a href="#27JavaAPI___3317">27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</a></td></tr><tr><td><a href="#28JavaAPI___3477">28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#3_Elasticsearch_3587">第3章 Elasticsearch环境</a></strong></td><td>-</td></tr><tr><td><a href="#29_3589">29-环境-简介</a></td><td><a href="#30Windows_3622">30-环境-Windows集群部署</a></td><td><a href="#31Linux_3821">31-环境-Linux单节点部署</a></td></tr><tr><td><a href="#32Linux_3945">32-环境-Linux集群部署</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#4_Elasticsearch_4073">第4章 Elasticsearch进阶</a></strong></td><td>-</td></tr><tr><td><a href="#33_4075">33-进阶-核心概念</a></td><td><a href="#34_4156">34-进阶-系统架构-简介</a></td><td><a href="#35_4169">35-进阶-单节点集群</a></td></tr><tr><td><a href="#36_4209">36-进阶-故障转移</a></td><td><a href="#37_4228">37-进阶-水平扩容</a></td><td><a href="#38_4288">38-进阶-应对故障</a></td></tr><tr><td><a href="#39___4323">39-进阶-路由计算 &amp; 分片控制</a></td><td><a href="#40_4352">40-进阶-数据写流程</a></td><td><a href="#41_4372">41-进阶-数据读流程</a></td></tr><tr><td><a href="#42___4378">42-进阶-更新流程 &amp; 批量操作流程</a></td><td><a href="#43_4428">43-进阶-倒排索引</a></td><td><a href="#44_4501">44-进阶-文档搜索</a></td></tr><tr><td><a href="#45_____4557">45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并</a></td><td><a href="#46_4689">46-进阶-文档分析</a></td><td><a href="#47_5124">47-进阶-文档控制</a></td></tr><tr><td><a href="#48Kibana_5311">48-进阶-文档展示-Kibana</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#5_Elasticsearch_5340">第5章 Elasticsearch集成</a></strong></td><td>-</td></tr><tr><td><a href="#49SpringData_5342">49-框架集成-SpringData-整体介绍</a></td><td><a href="#50SpringData_5374">50-框架集成-SpringData-代码功能集成</a></td><td><a href="#51SpringData_5598">51-框架集成-SpringData-集成测试-索引操作</a></td></tr><tr><td><a href="#52SpringData_5639">52-框架集成-SpringData-集成测试-文档操作</a></td><td><a href="#53SpringData_5749">53-框架集成-SpringData-集成测试-文档搜索</a></td><td><a href="#54SparkStreaming_5800">54-框架集成-SparkStreaming-集成</a></td></tr><tr><td><a href="#55Flink_5931">55-框架集成-Flink-集成</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#6_Elasticsearch_6060">第6章 Elasticsearch优化</a></strong></td><td>-</td></tr><tr><td><a href="#56_6062">56-优化-硬件选择</a></td><td><a href="#57_6084">57-优化-分片策略</a></td><td><a href="#58_6119">58-优化-路由选择</a></td></tr><tr><td><a href="#59_6140">59-优化-写入速度优化</a></td><td><a href="#60_6191">60-优化-内存设置</a></td><td><a href="#61_6214">61-优化-重要配置</a></td></tr><tr><td>-</td><td><strong><a href="#7_Elasticsearch_6228">第7章 Elasticsearch面试题</a></strong></td><td>-</td></tr><tr><td><a href="#62_6230">62-面试题</a></td><td>-</td><td>-</td></tr></tbody></table><h1 id="第1章-Elasticsearch概述"><a href="#第1章-Elasticsearch概述" class="headerlink" title="第1章 Elasticsearch概述"></a>第1章 <a href="https://so.csdn.net/so/search?q=Elasticsearch&spm=1001.2101.3001.7020">Elasticsearch</a>概述</h1><h2 id="01-开篇"><a href="#01-开篇" class="headerlink" title="01-开篇"></a>01-开篇</h2><p><a href="https://www.bilibili.com/video/BV1hh411D7sb">教学视频</a></p><p>结构化数据</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a421a414ea8fb8e25c466add5b00d31f.png" alt="img"></p><p>非结构化数据</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/109d3c62c1f36b4f352170488b516709.png" alt="img"></p><p>半结构化数据</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/48742ba6bbdc47e0dae2754027f30a31.png" alt="img"></p><h2 id="02-技术选型"><a href="#02-技术选型" class="headerlink" title="02-技术选型"></a>02-技术选型</h2><h3 id="Elasticsearch-是什么"><a href="#Elasticsearch-是什么" class="headerlink" title="Elasticsearch 是什么"></a>Elasticsearch 是什么</h3><p>The Elastic Stack, 包括 Elasticsearch、 Kibana、 Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><p>Elaticsearch，简称为 ES， ES 是一个<strong>开源的高扩展的分布式全文搜索引擎</strong>， 是整个 ElasticStack 技术栈的核心。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><blockquote><p>elastic<br>英 [ɪˈlæstɪk] 美 [ɪˈlæstɪk]<br>n. 橡皮圈(或带);松紧带<br>adj. 橡皮圈(或带)的;有弹性的;有弹力的;灵活的;可改变的;可伸缩的</p></blockquote><h3 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h3><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万个甚至更多。</li><li>支持大量基于交互式文本的查询。</li><li>需求非常灵活的全文搜索查询。</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</li><li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。</li></ul><p><strong>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎</strong>。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><h3 id="Elasticsearch-应用案例"><a href="#Elasticsearch-应用案例" class="headerlink" title="Elasticsearch 应用案例"></a>Elasticsearch 应用案例</h3><ul><li>GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。</li><li>维基百科：启动以 Elasticsearch 为基础的核心搜索架构</li><li>百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。</li><li>新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。</li><li>阿里：使用 Elasticsearch 构建日志采集和分析体系。</li><li>Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。</li></ul><h2 id="03-教学大纲"><a href="#03-教学大纲" class="headerlink" title="03-教学大纲"></a>03-教学大纲</h2><ul><li>第1章 Elasticsearch概述</li><li>第2章 Elasticsearch入门</li><li>第3章 Elasticsearch环境</li><li>第4章 Elasticsearch进阶</li><li>第5章 Elasticsearch集成</li><li>第6章 Elasticsearch优化</li><li>第7章 Elasticsearch面试题</li></ul><h1 id="第2章-Elasticsearch入门"><a href="#第2章-Elasticsearch入门" class="headerlink" title="第2章 Elasticsearch入门"></a>第2章 Elasticsearch入门</h1><h2 id="04-入门-环境准备"><a href="#04-入门-环境准备" class="headerlink" title="04-入门-环境准备"></a>04-入门-环境准备</h2><p><a href="https://www.elastic.co/cn/">官方网址</a></p><p><a href="https://www.elastic.co/guide/index.html">官方文档</a></p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">Elasticsearch 7.8.0下载页面</a></p><p>Windows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：</p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置 JDK 目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table><p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p><p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 <a href="https://so.csdn.net/so/search?q=RESTful&spm=1001.2101.3001.7020">RESTful</a> 端口。</p><p>打开浏览器，输入地址： <a href="http://localhost:9200，测试返回结果，返回结果如下：">http://localhost:9200，测试返回结果，返回结果如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"DESKTOP-LNJQ0VF"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"nCZqBhfdT1-pw8Yas4QU9w"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"7.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"zip"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"757314695644ea9a1dc2fecd26d1a43856725e65"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2020-06-14T19:35:50.234439Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"8.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><h2 id="05-入门-RESTful-amp-JSON"><a href="#05-入门-RESTful-amp-JSON" class="headerlink" title="05-入门-RESTful &amp; JSON"></a>05-入门-RESTful &amp; JSON</h2><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p><p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI(Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、 PUT、 POST 和DELETE。</p><p>在 REST 样式的 Web 服务中，每个资源都有一个地址。资源本身都是方法调用的目<br>标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP GET、 POST、PUT、 DELETE，还可能包括 HEAD 和 OPTIONS。简单的理解就是，**如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径， 以及对资源进行的操作(增删改查)**。</p><p>REST 样式的 Web 服务若有返回结果，大多数以JSON字符串形式返回。</p><h2 id="06-入门-Postman客户端工具"><a href="#06-入门-Postman客户端工具" class="headerlink" title="06-入门-Postman客户端工具"></a>06-入门-<a href="https://so.csdn.net/so/search?q=Postman&spm=1001.2101.3001.7020">Postman</a>客户端工具</h2><p>如果直接通过浏览器向 Elasticsearch 服务器发请求，那么需要在发送的请求中包含<br>HTTP 标准的方法，而 HTTP 的大部分特性且仅支持 GET 和 POST 方法。所以为了能方便地进行客户端的访问，可以使用 Postman 软件Postman 是一款强大的网页调试工具，提供功能强大的 Web API 和 HTTP 请求调试。</p><p>软件功能强大，界面简洁明晰、操作方便快捷，设计得很人性化。 Postman 中文版能够发送任何类型的 HTTP 请求 (GET, HEAD, POST, PUT…)，不仅能够表单提交，且可以附带任意类型请求体。</p><p><a href="https://www.postman.com/downloads/">Postman下载页面</a></p><h2 id="07-入门-倒排索引"><a href="#07-入门-倒排索引" class="headerlink" title="07-入门-倒排索引"></a>07-入门-倒排索引</h2><p>正排索引（传统）</p><table><thead><tr><th>id</th><th>content</th></tr></thead><tbody><tr><td>1001</td><td>my name is zhang san</td></tr><tr><td>1002</td><td>my name is li si</td></tr></tbody></table><p>倒排索引</p><table><thead><tr><th>keyword</th><th>id</th></tr></thead><tbody><tr><td>name</td><td>1001, 1002</td></tr><tr><td>zhang</td><td>1001</td></tr></tbody></table><p>Elasticsearch 是<strong>面向文档型数据库</strong>，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/146a779da01f53e7f7a8d53132d3c7cf.png" alt="img"></p><p>ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。</p><h2 id="08-入门-HTTP-索引-创建"><a href="#08-入门-HTTP-索引-创建" class="headerlink" title="08-入门-HTTP-索引-创建"></a>08-入门-HTTP-索引-创建</h2><p>对比关系型数据库，创建索引就等同于创建数据库。</p><p>在 Postman 中，向 ES 服务器发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>请求后，服务器返回响应：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//响应结果</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//分片结果</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token comment">//索引名称</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>后台日志：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">[2021-04-08T13:57:06,954][INFO ][o.e.c.m.MetadataCreateIndexService] [DESKTOP-LNJQ0VF] [shopping] creating index, cause [api], templates [], shards [1]&#x2F;[1], mappings []1</code></pre><p>如果重复发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a> 添加索引，会返回错误信息 :</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"resource_already_exists_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists"</span><span class="token punctuation">,</span>                <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"J0WlEhh4R7aDrfIc3AkwWQ"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"resource_already_exists_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists"</span><span class="token punctuation">,</span>        <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"J0WlEhh4R7aDrfIc3AkwWQ"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><h2 id="09-入门-HTTP-索引-查询-amp-删除"><a href="#09-入门-HTTP-索引-查询-amp-删除" class="headerlink" title="09-入门-HTTP-索引-查询 &amp; 删除"></a>09-入门-HTTP-索引-查询 &amp; 删除</h2><h3 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></p><p>这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :</p><pre class="language-none"><code class="language-none">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b12</code></pre><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>health</td><td>当前服务器健康状态： green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td></tr><tr><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>index</td><td>索引名</td></tr><tr><td>uuid</td><td>索引统一编号</td></tr><tr><td>pri</td><td>主分片数量</td></tr><tr><td>rep</td><td>副本数量</td></tr><tr><td>docs.count</td><td>可用文档数量</td></tr><tr><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table><h3 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"shopping"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//索引名</span>        <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//别名</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//映射</span>        <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置</span>            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置 - 索引</span>                <span class="token property">"creation_date"</span><span class="token operator">:</span> <span class="token string">"1617861426847"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 创建时间</span>                <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token string">"J0WlEhh4R7aDrfIc3AkwWQ"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                <span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                    <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"7080099"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"provided_name"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token comment">//设置 - 索引 - 主分片数量</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token number">123</span></code></pre><p>再次查看所有索引，GET <a href="http://127.0.0.1:9200/_cat/indices?v%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/_cat/indices?v，返回结果如下：</a></p><pre class="language-none"><code class="language-none">health status index uuid pri rep docs.count docs.deleted store.size pri.store.size1</code></pre><p>成功删除。</p><h2 id="10-入门-HTTP-文档-创建（Put-amp-Post）"><a href="#10-入门-HTTP-文档-创建（Put-amp-Post）" class="headerlink" title="10-入门-HTTP-文档-创建（Put &amp; Post）"></a>10-入门-HTTP-文档-创建（Put &amp; Post）</h2><p>假设索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/20d54cba223bd9d70ea356d3e40a8161.png" alt="img"></p><p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。</p><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span><span class="token comment">//索引</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token comment">//类型-文档</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span><span class="token comment">//唯一标识，可以类比为 MySQL 中的主键，随机生成</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//版本</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span><span class="token comment">//结果，这里的 create 表示创建成功</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//分片 - 总数</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//分片 - 总数</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token comment">//分片 - 总数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。</p><p>如果想要自定义唯一性标识，需要在创建时指定： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token comment">//&lt;------------------自定义唯一性标识</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p><strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。</strong></p><h2 id="11-入门-HTTP-查询-主键查询-amp-全查询"><a href="#11-入门-HTTP-查询-主键查询-amp-全查询" class="headerlink" title="11-入门-HTTP-查询-主键查询 &amp; 全查询"></a>11-入门-HTTP-查询-<a href="https://so.csdn.net/so/search?q=%E4%B8%BB%E9%94%AE&spm=1001.2101.3001.7020">主键</a>查询 &amp; 全查询</h2><p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a> 。</p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>        <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>        <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>查找不存在的内容，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1001%E3%80%82">http://127.0.0.1:9200/shopping/_doc/1001。</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_search%E3%80%82">http://127.0.0.1:9200/shopping/_search。</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">133</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span></code></pre><h2 id="12-入门-HTTP-全量修改-amp-局部修改-amp-删除"><a href="#12-入门-HTTP-全量修改-amp-局部修改-amp-删除" class="headerlink" title="12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除"></a>12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除</h2><h3 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h3><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p><p>请求体JSON内容为:</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机"</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/hw.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">1999.00</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>修改成功后，服务器响应结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span><span class="token comment">//&lt;-----------updated 表示数据被更新</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><h3 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h3><p>修改数据时，也可以只修改某一给条数据的局部信息</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_update/1%E3%80%82">http://127.0.0.1:9200/shopping/_update/1。</a></p><p>请求体JSON内容为:</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span><span class="token comment">//&lt;-----------updated 表示数据被更新</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>        <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>        <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/hw.jpg"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"deleted"</span><span class="token punctuation">,</span><span class="token comment">//&lt;---删除成功</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%88%A0%E9%99%A4%E6%88%90%E5%8A%9F%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><h2 id="13-入门-HTTP-条件查询-amp-分页查询-amp-查询排序"><a href="#13-入门-HTTP-条件查询-amp-分页查询-amp-查询排序" class="headerlink" title="13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序"></a>13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>假设有以下文档内容，（在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%89%EF%BC%9A">http://127.0.0.1:9200/shopping/_search）：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h4 id="URL带参查询"><a href="#URL带参查询" class="headerlink" title="URL带参查询"></a>URL带参查询</h4><p><strong>查找category为小米的文档</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search?q=category:%E5%B0%8F%E7%B1%B3%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search?q=category:小米，返回结果如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">94</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><p>上述为URL带参数形式查询，这很容易让不善者心怀恶意，或者参数值出现中文会出现乱码情况。为了避免这些情况，我们可用使用带JSON请求体请求进行查询。</p><h4 id="请求体带参查询"><a href="#请求体带参查询" class="headerlink" title="请求体带参查询"></a>请求体带参查询</h4><p>接下带JSON请求体，还是<strong>查找category为小米的文档</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><h4 id="带请求体方式的查找所有内容"><a href="#带请求体方式的查找所有内容" class="headerlink" title="带请求体方式的查找所有内容"></a>带请求体方式的查找所有内容</h4><p><strong>查找所有文档内容</strong>，也可以这样，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>则返回所有文档内容：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h4 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h4><p><strong>如果你想查询指定字段</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"_source"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273</span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"from"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    <span class="token string">"took"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token string">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token string">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token string">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token string">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token string">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token string">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span></code></pre><h3 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h3><p>如果你想通过排序查出价格最高的手机，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"sort"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"order"</span><span class="token operator">:</span><span class="token string">"desc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">96</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">3999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109</span></code></pre><h2 id="14-入门-HTTP-多条件查询-amp-范围查询"><a href="#14-入门-HTTP-多条件查询-amp-范围查询" class="headerlink" title="14-入门-HTTP-多条件查询 &amp; 范围查询"></a>14-入门-HTTP-多条件查询 &amp; 范围查询</h2><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>假设想找出小米牌子，价格为3999元的。（must相当于数据库的&amp;&amp;）</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"must"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">134</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">2.3862944</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">2.3862944</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031</span></code></pre><p>假设想找出小米和华为的牌子。（should相当于数据库的||）</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"should"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"filter"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"range"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"gt"</span><span class="token operator">:</span><span class="token number">2000</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>假设想找出小米和华为的牌子，价格大于2000元的手机。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"should"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"filter"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"range"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"gt"</span><span class="token operator">:</span><span class="token number">2000</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">72</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031</span></code></pre><h2 id="15-入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询"><a href="#15-入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询" class="headerlink" title="15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询"></a>15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询</h2><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span> <span class="token operator">:</span> <span class="token string">"小华"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h3 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_phrase"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span> <span class="token operator">:</span> <span class="token string">"为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_phrase"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span> <span class="token operator">:</span> <span class="token string">"为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"highlight"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"category"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//&lt;----高亮这字段</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"华&lt;em>为&lt;/em>"</span><span class="token comment">//&lt;------高亮一个为字。</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"华&lt;em>为&lt;/em>"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"华&lt;em>为&lt;/em>"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970</span></code></pre><h2 id="16-入门-HTTP-聚合查询"><a href="#16-入门-HTTP-聚合查询" class="headerlink" title="16-入门-HTTP-聚合查询"></a>16-入门-HTTP-聚合查询</h2><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p><p>接下来按price字段进行分组：</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//聚合操作</span><span class="token property">"price_group"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//名称，随意起名</span><span class="token property">"terms"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//分组</span><span class="token property">"field"</span><span class="token operator">:</span><span class="token string">"price"</span><span class="token comment">//分组字段</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"price_group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"doc_count_error_upper_bound"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"sum_other_doc_count"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"buckets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">5</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">3999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107</span></code></pre><p>上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price_group"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"terms"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"field"</span><span class="token operator">:</span><span class="token string">"price"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"price_group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"doc_count_error_upper_bound"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"sum_other_doc_count"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"buckets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">5</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">3999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334</span></code></pre><p>若想对所有手机价格求<strong>平均值</strong>。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price_avg"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//名称，随意起名</span><span class="token property">"avg"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//求平均</span><span class="token property">"field"</span><span class="token operator">:</span><span class="token string">"price"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"price_avg"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2332.3333333333335</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223</span></code></pre><h2 id="17-入门-HTTP-映射关系"><a href="#17-入门-HTTP-映射关系" class="headerlink" title="17-入门-HTTP-映射关系"></a>17-入门-HTTP-映射关系</h2><p>有了索引库，等于有了数据库中的 database。</p><p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p><p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p><p>先创建一个索引：</p><pre class="language-json" data-language="json"><code class="language-json"># PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user</span><span class="token number">1</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p><strong>创建映射</strong></p><pre class="language-json" data-language="json"><code class="language-json"># PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_mapping</span><span class="token punctuation">&#123;</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"sex"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"tel"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token number">123</span></code></pre><p><strong>查询映射</strong></p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_mapping</span><span class="token number">1</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"tel"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>增加数据</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_create/1001</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span><span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男的"</span><span class="token punctuation">,</span><span class="token property">"tel"</span><span class="token operator">:</span><span class="token string">"1111"</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>查找name含有”小“数据：</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"小"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">495</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男的"</span><span class="token punctuation">,</span>                    <span class="token property">"tel"</span><span class="token operator">:</span> <span class="token string">"1111"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>查找sex含有”男“数据：</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>找不想要的结果，只因创建映射时”sex”的类型为”keyword”。</p><p>“sex”只能完全为”男的“，才能得出原数据。</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男的"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男的"</span><span class="token punctuation">,</span>                    <span class="token property">"tel"</span><span class="token operator">:</span> <span class="token string">"1111"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>查询电话</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"tel"</span><span class="token operator">:</span><span class="token string">"11"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"query_shard_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"failed to create query: Cannot search on field [tel] since it is not indexed."</span><span class="token punctuation">,</span>                <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"ivLnMfQKROS7Skb2MTFOew"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"search_phase_execution_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"all shards failed"</span><span class="token punctuation">,</span>        <span class="token property">"phase"</span><span class="token operator">:</span> <span class="token string">"query"</span><span class="token punctuation">,</span>        <span class="token property">"grouped"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"failed_shards"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"shard"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"4P7dIRfXSbezE5JTiuylew"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"query_shard_exception"</span><span class="token punctuation">,</span>                    <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"failed to create query: Cannot search on field [tel] since it is not indexed."</span><span class="token punctuation">,</span>                    <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"ivLnMfQKROS7Skb2MTFOew"</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                    <span class="token property">"caused_by"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"illegal_argument_exception"</span><span class="token punctuation">,</span>                        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Cannot search on field [tel] since it is not indexed."</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334</span></code></pre><p>报错只因创建映射时”tel”的”index”为false。</p><h2 id="18-入门-JavaAPI-环境准备"><a href="#18-入门-JavaAPI-环境准备" class="headerlink" title="18-入门-JavaAPI-环境准备"></a>18-入门-JavaAPI-环境准备</h2><p>新建Maven工程。</p><p>添加依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- elasticsearch 的客户端 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- elasticsearch 依赖 2.x 的 log4j --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- junit 单元测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>1234567891011121314151617181920212223242526272829303132333435</code></pre><p>HelloElasticsearch</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloElasticsearch</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建客户端对象</span><span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭客户端连接</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819</span></code></pre><h2 id="19-入门-JavaAPI-索引-创建"><a href="#19-入门-JavaAPI-索引-创建" class="headerlink" title="19-入门-JavaAPI-索引-创建"></a>19-入门-JavaAPI-索引-创建</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>create<span class="token punctuation">.</span></span><span class="token class-name">CreateIndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>create<span class="token punctuation">.</span></span><span class="token class-name">CreateIndexResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateIndex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建索引 - 请求对象</span>        <span class="token class-name">CreateIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送请求，获取响应</span>        <span class="token class-name">CreateIndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> acknowledged <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 响应状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作状态 = "</span> <span class="token operator">+</span> acknowledged<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭客户端连接</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>后台打印：</p><pre class="language-\" data-language="\"><code class="language-\">四月 09, 2021 2:12:08 下午 org.elasticsearch.client.RestClient logResponse警告: request [PUT http:&#x2F;&#x2F;localhost:9200&#x2F;user2?master_timeout&#x3D;30s&amp;include_type_name&#x3D;true&amp;timeout&#x3D;30s] returned 1 warnings: [299 Elasticsearch-7.8.0-757314695644ea9a1dc2fecd26d1a43856725e65 &quot;[types removal] Using include_type_name in create index requests is deprecated. The parameter will be removed in the next major version.&quot;]操作状态 &#x3D; trueProcess finished with exit code 012345</code></pre><h2 id="20-入门-JavaAPI-索引-查询-amp-删除"><a href="#20-入门-JavaAPI-索引-查询-amp-删除" class="headerlink" title="20-入门-JavaAPI-索引-查询 &amp; 删除"></a>20-入门-JavaAPI-索引-查询 &amp; 删除</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>indices<span class="token punctuation">.</span></span><span class="token class-name">GetIndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>indices<span class="token punctuation">.</span></span><span class="token class-name">GetIndexResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchIndex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询索引 - 请求对象</span>        <span class="token class-name">GetIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送请求，获取响应</span>        <span class="token class-name">GetIndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aliases:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mappings:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"settings:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">aliases:&#123;user2&#x3D;[]&#125;mappings:&#123;user2&#x3D;org.elasticsearch.cluster.metadata.MappingMetadata@ad700514&#125;settings:&#123;user2&#x3D;&#123;&quot;index.creation_date&quot;:&quot;1617948726976&quot;,&quot;index.number_of_replicas&quot;:&quot;1&quot;,&quot;index.number_of_shards&quot;:&quot;1&quot;,&quot;index.provided_name&quot;:&quot;user2&quot;,&quot;index.uuid&quot;:&quot;UGZ1ntcySnK6hWyP2qoVpQ&quot;,&quot;index.version.created&quot;:&quot;7080099&quot;&#125;&#125;Process finished with exit code 012345</code></pre><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteIndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>support<span class="token punctuation">.</span>master<span class="token punctuation">.</span></span><span class="token class-name">AcknowledgedResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteIndex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除索引 - 请求对象</span>        <span class="token class-name">DeleteIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送请求，获取响应</span>        <span class="token class-name">AcknowledgedResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作结果 ： "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">操作结果 ： trueProcess finished with exit code 0123</code></pre><h2 id="21-入门-JavaAPI-文档-新增-amp-修改"><a href="#21-入门-JavaAPI-文档-新增-amp-修改" class="headerlink" title="21-入门-JavaAPI-文档-新增 &amp; 修改"></a>21-入门-JavaAPI-文档-新增 &amp; 修改</h2><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是<strong>个人</strong>对它进行重构。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>重构后的代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ElasticsearchTask</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">ElasticsearchTask</span> task<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            task<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 关闭客户端连接</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">//do something</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789</span></code></pre><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span><span class="token class-name">XContentType</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 新增文档 - 请求对象</span>            <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置索引及唯一性标识</span>            request<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建数据对象</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> productJson <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 添加文档数据，数据格式为 JSON 格式</span>            request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>productJson<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 客户端发送请求，获取响应对象</span>            <span class="token class-name">IndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">3.</span>打印结果信息            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_result:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">_index:user_id:1001_result:UPDATEDProcess finished with exit code 012345</code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>update<span class="token punctuation">.</span></span><span class="token class-name">UpdateRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>update<span class="token punctuation">.</span></span><span class="token class-name">UpdateResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span><span class="token class-name">XContentType</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 修改文档 - 请求对象</span>            <span class="token class-name">UpdateRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 配置修改参数</span>            request<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置请求体，对数据进行修改</span>            request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 客户端发送请求，获取响应对象</span>            <span class="token class-name">UpdateResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_result:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">_index:user_id:1001_result:UPDATEDProcess finished with exit code 012345</code></pre><h2 id="22-入门-JavaAPI-文档-查询-amp-删除"><a href="#22-入门-JavaAPI-文档-查询-amp-删除" class="headerlink" title="22-入门-JavaAPI-文档-查询 &amp; 删除"></a>22-入门-JavaAPI-文档-查询 &amp; 删除</h2><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>get<span class="token punctuation">.</span></span><span class="token class-name">GetRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>get<span class="token punctuation">.</span></span><span class="token class-name">GetResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.创建请求对象</span>            <span class="token class-name">GetRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.客户端发送请求，获取响应对象</span>            <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">3.</span>打印结果信息            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_type:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"source:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">_index:user_type:_doc_id:1001source:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:30,&quot;sex&quot;:&quot;男&quot;&#125;Process finished with exit code 0123456</code></pre><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建请求对象</span>            <span class="token class-name">DeleteRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">DeleteResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">DeleteResponse[index&#x3D;user,type&#x3D;_doc,id&#x3D;1001,version&#x3D;16,result&#x3D;deleted,shards&#x3D;ShardInfo&#123;total&#x3D;2, successful&#x3D;1, failures&#x3D;[]&#125;]Process finished with exit code 0123</code></pre><h2 id="23-入门-JavaAPI-文档-批量新增-amp-批量删除"><a href="#23-入门-JavaAPI-文档-批量新增-amp-批量删除" class="headerlink" title="23-入门-JavaAPI-文档-批量新增 &amp; 批量删除"></a>23-入门-JavaAPI-文档-批量新增 &amp; 批量删除</h2><h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span><span class="token class-name">XContentType</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchInsertDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建批量新增请求对象</span>            <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                    <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                            <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                    <span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">BulkResponse</span> responses <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"items:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:294msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ffProcess finished with exit code 01234</code></pre><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchDeleteDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建批量删除请求对象</span>            <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">BulkResponse</span> responses <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"items:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:108msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@7b02881eProcess finished with exit code 012345</code></pre><h2 id="24-入门-JavaAPI-文档-高级查询-全量查询"><a href="#24-入门-JavaAPI-文档-高级查询-全量查询" class="headerlink" title="24-入门-JavaAPI-文档-高级查询-全量查询"></a>24-入门-JavaAPI-文档-高级查询-全量查询</h2><p>先批量增加数据</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchInsertDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建批量新增请求对象</span>            <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu1"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1004"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu2"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1005"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu3"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"50"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1006"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu4"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">BulkResponse</span> responses <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"items:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:168msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ffProcess finished with exit code 01234</code></pre><p><strong>查询所有索引数据</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建搜索请求对象</span>            <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 构建查询的请求体</span>            <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 查询所有数据</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 查询匹配</span>            <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:2mstimeout:falsetotal:6 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 01234567891011121314</code></pre><h2 id="25-入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序"><a href="#25-入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序" class="headerlink" title="25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序"></a>25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</h2><h3 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_CONDITION <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:1 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1234567</code></pre><h3 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_PAGING <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分页查询</span>        <span class="token comment">// 当前页其实索引(第一条数据的顺序号)， from</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 每页显示多少条 size</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:6 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;12345678</code></pre><h3 id="查询排序-1"><a href="#查询排序-1" class="headerlink" title="查询排序"></a>查询排序</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_ORDER <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 排序</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token class-name">SortOrder</span><span class="token punctuation">.</span>ASC<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:6 hitsMaxScore:NaNhits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;123456789101112</code></pre><h2 id="26-入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询"><a href="#26-入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询" class="headerlink" title="26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询"></a>26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</h2><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_BOOL_CONDITION <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BoolQueryBuilder</span> boolQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 必须包含</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 一定不含</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">mustNot</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可能包含</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_BOOL_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:28mstimeout:falsetotal:1 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 0123456789</code></pre><h3 id="范围查询-1"><a href="#范围查询-1" class="headerlink" title="范围查询"></a>范围查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_RANGE <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RangeQueryBuilder</span> rangeQuery <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 大于等于</span>        <span class="token comment">//rangeQuery.gte("30");</span>        <span class="token comment">// 小于等于</span>        rangeQuery<span class="token punctuation">.</span><span class="token function">lte</span><span class="token punctuation">(</span><span class="token string">"40"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>rangeQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_RANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:5 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 012345678910111213</code></pre><h2 id="27-入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询"><a href="#27-入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询" class="headerlink" title="27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询"></a>27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_FUZZY_CONDITION <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">fuzzyQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fuzziness</span><span class="token punctuation">(</span><span class="token class-name">Fuzziness</span><span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_ALL);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_FUZZY_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:152mstimeout:falsetotal:4 hitsMaxScore:1.2837042hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 0123456789101112</code></pre><h3 id="高亮查询-1"><a href="#高亮查询-1" class="headerlink" title="高亮查询"></a>高亮查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermsQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_HIGHLIGHT <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 高亮查询</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建查询请求体构建器</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建查询方式：高亮查询</span>        <span class="token class-name">TermsQueryBuilder</span> termsQueryBuilder <span class="token operator">=</span>                <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termsQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置查询方式</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>termsQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建高亮字段</span>        <span class="token class-name">HighlightBuilder</span> highlightBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">preTags</span><span class="token punctuation">(</span><span class="token string">"&lt;font color='red'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置标签前缀</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">postTags</span><span class="token punctuation">(</span><span class="token string">"&lt;/font>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置标签后缀</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置高亮字段</span>        <span class="token comment">//设置高亮构建对象</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span>highlightBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求体</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.客户端发送请求，获取响应对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.打印响应结果</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took::"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time_out::"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total::"</span><span class="token operator">+</span>hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max_score::"</span><span class="token operator">+</span>hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits::::>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sourceAsString <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印高亮结果</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HighlightField</span><span class="token punctuation">></span></span> highlightFields <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>highlightFields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;::::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_HIGHLIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took::672mstime_out::falsetotal::1 hitsmax_score::1.0hits::::&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;name&#x3D;[name], fragments[[&lt;font color&#x3D;&#39;red&#39;&gt;zhangsan&lt;&#x2F;font&gt;]]&#125;&lt;&lt;::::Process finished with exit code 012345678910</code></pre><h2 id="28-入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询"><a href="#28-入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询" class="headerlink" title="28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询"></a>28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</h2><h3 id="最大值查询"><a href="#最大值查询" class="headerlink" title="最大值查询"></a>最大值查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermsQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span></span><span class="token class-name">AggregationBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_MAX <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 高亮查询</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span><span class="token class-name">AggregationBuilders</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">"maxAge"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求体</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.客户端发送请求，获取响应对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.打印响应结果</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">&#123;&quot;took&quot;:16,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;max#maxAge&quot;:&#123;&quot;value&quot;:50.0&#125;&#125;&#125;Process finished with exit code 0123</code></pre><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermsQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span></span><span class="token class-name">AggregationBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_GROUP <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span><span class="token class-name">AggregationBuilders</span><span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span><span class="token string">"age_groupby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求体</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.客户端发送请求，获取响应对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.打印响应结果</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_GROUP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">&#123;&quot;took&quot;:10,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;lterms#age_groupby&quot;:&#123;&quot;doc_count_error_upper_bound&quot;:0,&quot;sum_other_doc_count&quot;:0,&quot;buckets&quot;:[&#123;&quot;key&quot;:20,&quot;doc_count&quot;:2&#125;,&#123;&quot;key&quot;:10,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:30,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:40,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:50,&quot;doc_count&quot;:1&#125;]&#125;&#125;&#125;Process finished with exit code 0123</code></pre><h1 id="第3章-Elasticsearch环境"><a href="#第3章-Elasticsearch环境" class="headerlink" title="第3章 Elasticsearch环境"></a>第3章 Elasticsearch环境</h1><h2 id="29-环境-简介"><a href="#29-环境-简介" class="headerlink" title="29-环境-简介"></a>29-环境-简介</h2><h3 id="单机-amp-集群"><a href="#单机-amp-集群" class="headerlink" title="单机 &amp; 集群"></a>单机 &amp; 集群</h3><p>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br>性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br>除了负载能力，单点服务器也存在其他问题：</p><ul><li>单台机器存储容量有限</li><li>单服务器容易出现单点故障，无法实现高可用</li><li>单服务的并发处理能力有限</li></ul><p>配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br>般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</p><p>总之，集群能提高性能，增加容错。</p><h3 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群 Cluster"></a>集群 Cluster</h3><p><strong>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</strong>一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p><h3 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h3><p>集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p><p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br>行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br>集群。</p><h2 id="30-环境-Windows集群部署"><a href="#30-环境-Windows集群部署" class="headerlink" title="30-环境-Windows集群部署"></a>30-环境-Windows集群部署</h2><h3 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h3><p>一、创建 elasticsearch-cluster 文件夹</p><p>创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/6d6022b6d30a9e2c1a4e18092d5f130f.png" alt="img"></p><p>二、修改集群文件目录中每个节点的 config&#x2F;elasticsearch.yml 配置文件</p><p><strong>node-1001 节点</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点 1 的配置信息：</span><span class="token comment">#集群名称，节点之间要保持一致</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，集群内要唯一</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1001</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#ip 地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> localhost<span class="token comment">#http 端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">1001</span><span class="token comment">#tcp 监听端口</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9301</span><span class="token comment">#discovery.seed_hosts: ["localhost:9301", "localhost:9302","localhost:9303"]</span><span class="token comment">#discovery.zen.fd.ping_timeout: 1m</span><span class="token comment">#discovery.zen.fd.ping_retries: 5</span><span class="token comment">#集群内的可以被选为主节点的节点列表</span><span class="token comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span><span class="token comment">#跨域配置</span><span class="token comment">#action.destructive_requires_name: true</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>12345678910111213141516171819202122</code></pre><p><strong>node-1002 节点</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点 2 的配置信息：</span><span class="token comment">#集群名称，节点之间要保持一致</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，集群内要唯一</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1002</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#ip 地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> localhost<span class="token comment">#http 端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">1002</span><span class="token comment">#tcp 监听端口</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9302</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9301"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.zen.fd.ping_timeout</span><span class="token punctuation">:</span> 1m<span class="token key atrule">discovery.zen.fd.ping_retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token comment">#集群内的可以被选为主节点的节点列表</span><span class="token comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span><span class="token comment">#跨域配置</span><span class="token comment">#action.destructive_requires_name: true</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>12345678910111213141516171819202122</code></pre><p><strong>node-1003 节点</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点 3 的配置信息：</span><span class="token comment">#集群名称，节点之间要保持一致</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，集群内要唯一</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1003</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#ip 地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> localhost<span class="token comment">#http 端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">1003</span><span class="token comment">#tcp 监听端口</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9303</span><span class="token comment">#候选主节点的地址，在开启服务后可以被选为主节点</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9301"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9302"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.zen.fd.ping_timeout</span><span class="token punctuation">:</span> 1m<span class="token key atrule">discovery.zen.fd.ping_retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token comment">#集群内的可以被选为主节点的节点列表</span><span class="token comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span><span class="token comment">#跨域配置</span><span class="token comment">#action.destructive_requires_name: true</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>1234567891011121314151617181920212223</code></pre><p>三、如果有必要，删除每个节点中的 data 目录中所有内容 。</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>分别依次双击执行节点的bin&#x2F;elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。</p><h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><p>一、用Postman，查看集群状态</p><ol><li><code>GET http://127.0.0.1:1001/_cluster/health</code></li><li><code>GET http://127.0.0.1:1002/_cluster/health</code></li><li><code>GET http://127.0.0.1:1003/_cluster/health</code></li></ol><p>返回结果皆为如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"cluster_name"</span><span class="token operator">:</span> <span class="token string">"my-application"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"number_of_nodes"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"number_of_data_nodes"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"active_primary_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"active_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"relocating_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"initializing_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"unassigned_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"delayed_unassigned_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"number_of_pending_tasks"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"number_of_in_flight_fetch"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"task_max_waiting_in_queue_millis"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"active_shards_percent_as_number"</span><span class="token operator">:</span> <span class="token number">100.0</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><p><strong>status字段</strong>指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p><ol><li>green：所有的主分片和副本分片都正常运行。</li><li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li><li>red：有主分片没能正常运行。</li></ol><p>二、用Postman，在一节点增加索引，另一节点获取索引</p><p>向集群中的node-1001节点增加索引：</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1001/user</span><span class="token number">1</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>向集群中的node-1003节点获取索引：</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1003/user</span><span class="token number">1</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"creation_date"</span><span class="token operator">:</span> <span class="token string">"1617993035885"</span><span class="token punctuation">,</span>                <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token string">"XJKERwQlSJ6aUxZEN2EV0w"</span><span class="token punctuation">,</span>                <span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"7080099"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"provided_name"</span><span class="token operator">:</span> <span class="token string">"user"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力。</p><h2 id="31-环境-Linux单节点部署"><a href="#31-环境-Linux单节点部署" class="headerlink" title="31-环境-Linux单节点部署"></a>31-环境-Linux单节点部署</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>一、下载软件</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p><p>二、解压软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压缩</span><span class="token function">tar</span> -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module<span class="token comment"># 改名</span><span class="token function">mv</span> elasticsearch-7.8.0 es<span class="token number">1234</span></code></pre><p>三、创建用户</p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> es <span class="token comment">#新增 es 用户</span><span class="token function">passwd</span> es <span class="token comment">#为 es 用户设置密码</span><span class="token function">userdel</span> -r es <span class="token comment">#如果错了，可以删除再加</span><span class="token function">chown</span> -R es:es /opt/module/es <span class="token comment">#文件夹所有者</span><span class="token number">1234</span></code></pre><p>四、修改配置文件</p><p>修改&#x2F;opt&#x2F;module&#x2F;es&#x2F;config&#x2F;elasticsearch.yml文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 加入如下配置</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> elasticsearch<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span>123456</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.conf</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容# 每个进程可以打开的文件数的限制es soft nofile 65536es hard nofile 655361234</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容# 每个进程可以打开的文件数的限制es soft nofile 65536es hard nofile 65536# 操作系统级别对每个用户创建的进程数的限制* hard nproc 4096# 注： * 带表 Linux 所有用户名称1234567</code></pre><p>修改&#x2F;etc&#x2F;sysctl.conf</p><pre class="language-none"><code class="language-none"># 在文件中增加下面内容# 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536vm.max_map_count&#x3D;655360123</code></pre><p>重新加载</p><pre class="language-none"><code class="language-none">sysctl -p1</code></pre><h3 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h3><p>使用 ES 用户启动</p><pre class="language-none"><code class="language-none">cd &#x2F;opt&#x2F;module&#x2F;es&#x2F;#启动bin&#x2F;elasticsearch#后台启动bin&#x2F;elasticsearch -d  12345</code></pre><p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/75e24cd1fbc430577681bb4f8a0d3e2b.png" alt="img"></p><p>关闭防火墙</p><pre class="language-none"><code class="language-none">#暂时关闭防火墙systemctl stop firewalld#永久关闭防火墙systemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原12345</code></pre><h3 id="测试软件"><a href="#测试软件" class="headerlink" title="测试软件"></a>测试软件</h3><p>浏览器中输入地址： <a href="http://linux1:9200/">http://linux1:9200/</a></p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/477065a2cb499a32871549c21e2fc487.png" alt="img"></p><h2 id="32-环境-Linux集群部署"><a href="#32-环境-Linux集群部署" class="headerlink" title="32-环境-Linux集群部署"></a>32-环境-Linux集群部署</h2><h3 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h3><p>一、下载软件</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p><p>二、解压软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压缩</span><span class="token function">tar</span> -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module<span class="token comment"># 改名</span><span class="token function">mv</span> elasticsearch-7.8.0 es-cluster<span class="token number">1234</span></code></pre><p>将软件分发到其他节点： linux2, linux3</p><p>三、创建用户</p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> es <span class="token comment">#新增 es 用户</span><span class="token function">passwd</span> es <span class="token comment">#为 es 用户设置密码</span><span class="token function">userdel</span> -r es <span class="token comment">#如果错了，可以删除再加</span><span class="token function">chown</span> -R es:es /opt/module/es <span class="token comment">#文件夹所有者</span><span class="token number">1234</span></code></pre><p>四、修改配置文件</p><p>修改&#x2F;opt&#x2F;module&#x2F;es&#x2F;config&#x2F;elasticsearch.yml 文件，分发文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 加入如下配置</span><span class="token comment">#集群名称</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>es<span class="token comment">#节点名称， 每个节点的名称不能重复</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span><span class="token comment">#ip 地址， 每个节点的地址不能重复</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> linux1<span class="token comment">#是不是有资格主节点</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment"># head 插件需要这打开这两个配置</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.max_content_length</span><span class="token punctuation">:</span> 200mb<span class="token comment">#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 master</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span><span class="token comment">#es7.x 之后新增的配置，节点发现</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux1:9300"</span><span class="token punctuation">,</span><span class="token string">"linux2:9300"</span><span class="token punctuation">,</span><span class="token string">"linux3:9300"</span><span class="token punctuation">]</span><span class="token key atrule">gateway.recover_after_nodes</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">network.tcp.keep_alive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">network.tcp.no_delay</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">transport.tcp.compress</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#集群内同时启动的数据任务个数，默认是 2 个</span><span class="token key atrule">cluster.routing.allocation.cluster_concurrent_rebalance</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token comment">#添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个</span><span class="token key atrule">cluster.routing.allocation.node_concurrent_recoveries</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token comment">#初始化数据恢复时，并发恢复线程的个数，默认 4 个</span><span class="token key atrule">cluster.routing.allocation.node_initial_primaries_recoveries</span><span class="token punctuation">:</span> <span class="token number">16</span>1234567891011121314151617181920212223242526272829</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.conf ，分发文件</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容es soft nofile 65536es hard nofile 65536123</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf，分发文件</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容es soft nofile 65536es hard nofile 65536\* hard nproc 4096\# 注： * 带表 Linux 所有用户名称12345</code></pre><p>修改&#x2F;etc&#x2F;sysctl.conf</p><pre class="language-none"><code class="language-none"># 在文件中增加下面内容vm.max_map_count&#x3D;65536012</code></pre><p>重新加载</p><pre class="language-none"><code class="language-none">sysctl -p1</code></pre><h3 id="启动软件-1"><a href="#启动软件-1" class="headerlink" title="启动软件"></a>启动软件</h3><p>分别在不同节点上启动 ES 软件</p><pre class="language-none"><code class="language-none">cd &#x2F;opt&#x2F;module&#x2F;es-cluster#启动bin&#x2F;elasticsearch#后台启动bin&#x2F;elasticsearch -d12345</code></pre><h3 id="测试集群-1"><a href="#测试集群-1" class="headerlink" title="测试集群"></a>测试集群</h3><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/0412e37cb5249d1ff0e813ee87f49a50.png" alt="img"></p><h1 id="第4章-Elasticsearch进阶"><a href="#第4章-Elasticsearch进阶" class="headerlink" title="第4章 Elasticsearch进阶"></a>第4章 Elasticsearch进阶</h1><h2 id="33-进阶-核心概念"><a href="#33-进阶-核心概念" class="headerlink" title="33-进阶-核心概念"></a>33-进阶-核心概念</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/146a779da01f53e7f7a8d53132d3c7cf.png" alt="img"></p><h3 id="索引Index"><a href="#索引Index" class="headerlink" title="索引Index"></a>索引Index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除（CRUD）的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p><p><strong>Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能。</strong></p><h3 id="类型Type"><a href="#类型Type" class="headerlink" title="类型Type"></a>类型Type</h3><p>在一个索引中，你可以定义一种或多种类型。</p><p>一个类型是你的索引的一个逻辑上的分类&#x2F;分区，其语义完全由你来定。通常，会为具<br>有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化。</p><table><thead><tr><th>版本</th><th>Type</th></tr></thead><tbody><tr><td>5.x</td><td>支持多种 type</td></tr><tr><td>6.x</td><td>只能有一种 type</td></tr><tr><td>7.x</td><td>默认不再支持自定义索引类型（默认类型为： _doc）</td></tr></tbody></table><h3 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h3><p>一个文档是一个可被索引的基础信息单元，也就是一条数据。</p><p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而 JSON 是一个到处存在的互联网数据交互格式。</p><p>在一个 index&#x2F;type 里面，你可以存储任意多的文档。</p><h3 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p><h3 id="映射Mapping"><a href="#映射Mapping" class="headerlink" title="映射Mapping"></a>映射Mapping</h3><p>mapping 是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES 里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h3 id="分片Shards"><a href="#分片Shards" class="headerlink" title="分片Shards"></a>分片Shards</h3><p>一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10 亿文档数据<br>的索引占据 1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。 或者单个节点处理搜索请求，响应太慢。为了解决这个问题，<strong>Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。</strong>当你创建一个索引的时候，你可以指定你想要的分片的数量。<strong>每个分片本身也是一个功能完善并且独立的“索引”</strong>，这个“索引”可以被放置到集群中的任何节点上。</p><p>分片很重要，主要有两方面的原因：</p><ol><li>允许你水平分割 &#x2F; 扩展你的内容容量。</li><li>允许你在分片之上进行分布式的、并行的操作，进而提高性能&#x2F;吞吐量。</li></ol><p>至于一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch 管理的，对于作为用户的你来说，这些都是透明的，无需过分关心。</p><p>被混淆的概念是，一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片（Lucene 索引），然后合并每个分片的结果到一个全局的结果集。</p><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言， Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款： Elasticsearch 和 Solr,这两款都是基于 Lucene 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><h3 id="副本Replicas"><a href="#副本Replicas" class="headerlink" title="副本Replicas"></a>副本Replicas</h3><p>在一个网络 &#x2F; 云的环境里，失败随时都可能发生，在某个分片&#x2F;节点不知怎么的就处于<br>离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的， Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)。</p><p>复制分片之所以重要，有两个主要原因：</p><ul><li>在分片&#x2F;节点失败的情况下，<strong>提供了高可用性</strong>。因为这个原因，注意到复制分片从不与原&#x2F;主要（original&#x2F;primary）分片置于同一节点上是非常重要的。</li><li>扩展你的搜索量&#x2F;吞吐量，因为搜索可以在所有的副本上并行运行。</li></ul><p>总之，每个索引可以被分成多个分片。一个索引也可以被复制 0 次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。</p><p>分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch 中的每个索引被分片 1 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2 个分片， 我们需要根据索引需要确定分片个数。</p><h3 id="分配Allocation"><a href="#分配Allocation" class="headerlink" title="分配Allocation"></a>分配Allocation</h3><p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p><h2 id="34-进阶-系统架构-简介"><a href="#34-进阶-系统架构-简介" class="headerlink" title="34-进阶-系统架构-简介"></a>34-进阶-系统架构-简介</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e4d13427545dc174eb9ccface85c1f0c.png" alt="img"></p><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同<br>cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p><p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、<br>删除索引，或者增加、删除节点等。 而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p><p>作为用户，我们可以将请求发送到集群中的任何节点 ，包括主节点。 每个节点都知道<br>任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p><h2 id="35-进阶-单节点集群"><a href="#35-进阶-单节点集群" class="headerlink" title="35-进阶-单节点集群"></a>35-进阶-单节点集群</h2><p>我们在包含一个空节点的集群内创建名为 users 的索引，为了演示目的，我们将分配 3个主分片和一份副本（每个主分片拥有一个副本分片）。</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1001/users</span><span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"number_of_shards"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>集群现在是拥有一个索引的单节点集群。所有 3 个主分片都被分配在 node-1 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/54ee6753be248cc7d345b38a0eae7d96.png" alt="img"></p><p>通过 elasticsearch-head 插件（一个Chrome插件）查看集群情况 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e8b15d0b243d486e91f478a220da63bf.png" alt="img"></p><ul><li>集群健康值:yellow( 3 of 6 )：表示当前集群的全部主分片都正常运行，但是副本分片没有全部处在正常状态。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/489b6de480112879a00067b793bde685.png" alt="img">：3 个主分片正常。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/3ce9a78d26ee762f0a7a8abf7817a58e.png" alt="img">：3 个副本分片都是 Unassigned，它们都没有被分配到任何节点。 在同 一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点 上的所有副本数据。</li></ul><p>当前集群是正常运行的，但存在丢失数据的风险。</p><hr><p><strong>elasticsearch-head chrome插件安装</strong></p><p><a href="https://github.com/mobz/elasticsearch-head">插件获取网址</a>，下载压缩包，解压后将内容放入自定义命名为elasticsearch-head文件夹。</p><p>接着点击Chrome右上角选项-&gt;工具-&gt;管理扩展（或则地址栏输入chrome:&#x2F;&#x2F;extensions&#x2F;），选择打开“开发者模式”，让后点击“加载已解压得扩展程序”，选择elasticsearch-head&#x2F;_site，即可完成chrome插件安装。</p><h2 id="36-进阶-故障转移"><a href="#36-进阶-故障转移" class="headerlink" title="36-进阶-故障转移"></a>36-进阶-故障转移</h2><p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 幸运的是，我们只需再启动一个节点即可防止数据丢失。当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上<br>运行的节点才会自动组成集群。</p><p>如果启动了第二个节点，集群将会拥有两个节点 : 所有主分片和副本分片都已被分配 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/bf76cb1bfbdf07555918d9055817ab44.png" alt="img"></p><p>通过 elasticsearch-head 插件查看集群情况</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/18db400822b83e727d6206f486b7b2ea.png" alt="img"></p><ul><li>集群健康值:green( 3 of 6 )：表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e485d8263a4aa3a94af0be951bd5a241.png" alt="img">：3 个主分片正常。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e485d8263a4aa3a94af0be951bd5a241.png" alt="img">：第二个节点加入到集群后， 3 个副本分片将会分配到这个节点上——每 个主分片对应一个副本分片。这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。所 有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们 既可以从主分片又可以从副本分片上获得文档。</li></ul><h2 id="37-进阶-水平扩容"><a href="#37-进阶-水平扩容" class="headerlink" title="37-进阶-水平扩容"></a>37-进阶-水平扩容</h2><p>怎样为我们的正在增长中的应用程序按需扩容呢？当启动了第三个节点，我们的集群将会拥有三个节点的集群 : 为了分散负载而对分片进行重新分配 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/d527e26aa2bccdf54b11410024eadc92.png" alt="img"></p><p>通过 elasticsearch-head 插件查看集群情况。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/6985fe14454c1269204478320d089bd7.png" alt="img"></p><ul><li>集群健康值:green( 3 of 6 )：表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9494419153adb44bedb395ac5d7bc488.png" alt="img">Node 1 和 Node 2 上各有一个分片被迁移到了新的 Node 3 节点，现在每个节点上都拥有 2 个分片， 而不是之前的 3 个。 这表示每个节点的硬件资源（CPU, RAM, I&#x2F;O）将被更少的分片所共享，每个分片 的性能将会得到提升。</li></ul><p>分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有 6 个分 片（3 个主分片和 3 个副本分片）的索引可以最大扩容到 6 个节点，每个节点上存在一个分片，并且每个 分片拥有所在节点的全部资源。</p><p><strong>但是如果我们想要扩容超过 6 个节点怎么办呢？</strong></p><p>主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够<br>存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——<br>搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片<br>时，也将拥有越高的吞吐量。</p><p>在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群。让我们把<br>副本数从默认的 1 增加到 2。</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1001/users/_settings</span><span class="token punctuation">&#123;</span>    <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>users 索引现在拥有 9 个分片： 3 个主分片和 6 个副本分片。 这意味着我们可以将集群<br>扩容到 9 个节点，每个节点上一个分片。相比原来 3 个节点时，集群搜索性能可以提升 3 倍。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/97fd01e34e5d8df23d226c4fef157801.png" alt="img"></p><p>通过 elasticsearch-head 插件查看集群情况：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/8bf9dbf0cec5b7875bf8aa9d17a9a67c.png" alt="img"></p><p>当然，如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每<br>个分片从节点上获得的资源会变少。 你需要增加更多的硬件资源来提升吞吐量。</p><p>但是更多的副本分片数提高了数据冗余量：按照上面的节点配置，我们可以在失去 2 个节点<br>的情况下不丢失任何数据。</p><h2 id="38-进阶-应对故障"><a href="#38-进阶-应对故障" class="headerlink" title="38-进阶-应对故障"></a>38-进阶-应对故障</h2><p>我们关闭第一个节点，这时集群的状态为:关闭了一个节点后的集群。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/44e841004be934e6bce08187ca3852bb.png" alt="img"></p><p>我们关闭的节点是一个主节点。而集群必须拥有一个主节点来保证正常工作，所以发生<br>的第一件事情就是选举一个新的主节点： Node 2 。在我们关闭 Node 1 的同时也失去了主<br>分片 1 和 2 ，并且在缺失主分片的时候索引也不能正常工作。 如果此时来检查集群的状况，我们看到的状态将会为 red ：不是所有主分片都在正常工作。</p><p>幸运的是，在其它节点上存在着这两个主分片的完整副本， 所以新的主节点立即将这些分片在 Node 2 和 Node 3 上对应的副本分片提升为主分片， 此时集群的状态将会为yellow。这个提升主分片的过程是瞬间发生的，如同按下一个开关一般。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e956bda7e0d005699e27760d4193d101.png" alt="img"></p><p><strong>为什么我们集群状态是 yellow 而不是 green 呢？</strong></p><p>虽然我们拥有所有的三个主分片，但是同时设置了每个主分片需要对应 2 份副本分片，而此<br>时只存在一份副本分片。 所以集群不能为 green 的状态，不过我们不必过于担心：如果我<br>们同样关闭了 Node 2 ，我们的程序 依然 可以保持在不丢任何数据的情况下运行，因为<br>Node 3 为每一个分片都保留着一份副本。</p><p>如果想回复原来的样子，要确保Node-1的配置文件有如下配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9302"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9303"</span><span class="token punctuation">]</span>1</code></pre><p>集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。 如果 Node 1 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/37eea6a8dae7ba908312f2ebf0eced11.png" alt="img"></p><h2 id="39-进阶-路由计算-amp-分片控制"><a href="#39-进阶-路由计算-amp-分片控制" class="headerlink" title="39-进阶-路由计算 &amp; 分片控制"></a>39-进阶-路由计算 &amp; 分片控制</h2><h3 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h3><p>当索引一个文档的时候，文档会被存储到一个主分片中。 Elasticsearch 如何知道一个<br>文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片 1 还是分片 2 中呢？首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。实际上，这个过程是根据下面这个公式决定的：</p><pre class="language-none"><code class="language-none">shard &#x3D; hash(routing) % number_of_primary_shards1</code></pre><p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9c34e8603887c2bed475416e3b67cd9a.png" alt="img"></p><p>这就解释了为什么我们要在创建索引的时候就确定好主分片的数量并且永远不会改变这个数量:因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</p><p>所有的文档API ( get . index . delete 、 bulk , update以及 mget ）都接受一个叫做routing 的路由参数，通过这个参数我们可以自定义文档到分片的映射。一个自定义的路由参数可以用来确保所有相关的文档—一例如所有属于同一个用户的文档——都被存储到同一个分片中。</p><h3 id="分片控制"><a href="#分片控制" class="headerlink" title="分片控制"></a>分片控制</h3><p>我们可以发送请求到集群中的任一节点。每个节点都有能力处理任意请求。每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。在下面的例子中，如果将所有的请求发送到Node 1001，我们将其称为协调节点<strong>coordinating node</strong>。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/3940d6cdb197259368542b86384911a4.png" alt="img"></p><p>当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。</p><h2 id="40-进阶-数据写流程"><a href="#40-进阶-数据写流程" class="headerlink" title="40-进阶-数据写流程"></a>40-进阶-数据写流程</h2><p>新建、索引和删除请求都是写操作， 必须在主分片上面完成之后才能被复制到相关的副本分片。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/418356a32516c222a8d366df021276c2.png" alt="img"></p><p>在客户端收到成功响应时，文档变更已经在主分片和所有副本分片执行完成，变更是安全的。有一些可选的<strong>请求参数</strong>允许您影响这个过程，可能以数据安全为代价提升性能。这些选项很少使用，因为 Elasticsearch 已经很快，但是为了完整起见， 请参考下文：</p><ol><li>consistency</li></ol><ul><li>即一致性。在默认设置下，即使仅仅是在试图执行一个写操作之前，主分片都会要求必须要有规定数量quorum（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行写操作（其中分片副本 可以是主分片或者副本分片）。这是为了避免在发生网络分区故障（network partition）的时候进行写操作，进而导致数据不一致。 规定数量即： <strong>int((primary + number_of_replicas) &#x2F; 2 ) + 1</strong></li><li>consistency 参数的值可以设为：<ul><li>one ：只要主分片状态 ok 就允许执行写操作。</li><li>all：必须要主分片和所有副本分片的状态没问题才允许执行写操作。</li><li>quorum：默认值为quorum , 即大多数的分片副本状态没问题就允许执行写操作。</li></ul></li><li>注意，规定数量的计算公式中number_of_replicas指的是在索引设置中的设定副本分片数，而不是指当前处理活动状态的副本分片数。如果你的索引设置中指定了当前索引拥有3个副本分片，那规定数量的计算结果即：<strong>int((1 primary + 3 replicas) &#x2F; 2) + 1 &#x3D; 3</strong>，如果此时你只启动两个节点，那么处于活跃状态的分片副本数量就达不到规定数量，也因此您将无法索引和删除任何文档。</li></ul><ol><li>timeout<ul><li>如果没有足够的副本分片会发生什么？Elasticsearch 会等待，希望更多的分片出现。默认情况下，它最多等待 1 分钟。 如果你需要，你可以使用timeout参数使它更早终止：100是100 毫秒，30s是30秒。</li></ul></li></ol><p>新索引默认有1个副本分片，这意味着为满足规定数量应该需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当number_of_replicas 大于1的时候，规定数量才会执行。</p><h2 id="41-进阶-数据读流程"><a href="#41-进阶-数据读流程" class="headerlink" title="41-进阶-数据读流程"></a>41-进阶-数据读流程</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/7139df83ee6f7a59c5d3252d34cc8762.png" alt="img"></p><p>在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。</p><h2 id="42-进阶-更新流程-amp-批量操作流程"><a href="#42-进阶-更新流程-amp-批量操作流程" class="headerlink" title="42-进阶-更新流程 &amp; 批量操作流程"></a>42-进阶-更新流程 &amp; 批量操作流程</h2><h3 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h3><p>部分更新一个文档结合了先前说明的读取和写入流程：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/ca41993144aee98311671278725437cd.png" alt="img"></p><p>部分更新一个文档的步骤如下：</p><ol><li>客户端向Node 1发送更新请求。</li><li>它将请求转发到主分片所在的Node 3 。</li><li>Node 3从主分片检索文档，修改_source字段中的JSON，并且尝试重新索引主分片的文档。如果文档已经被另一个进程修改,它会重试步骤3 ,超过retry_on_conflict次后放弃。</li><li>如果 Node 3成功地更新文档，它将新版本的文档并行转发到Node 1和 Node 2上的副本分片，重新建立索引。一旦所有副本分片都返回成功，Node 3向协调节点也返回成功，协调节点向客户端返回成功。</li></ol><p>当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果 Elasticsearch 仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</p><h3 id="批量操作流程"><a href="#批量操作流程" class="headerlink" title="批量操作流程"></a>批量操作流程</h3><p><strong>mget和 bulk API的模式类似于单文档模式。</strong>区别在于协调节点知道每个文档存在于哪个分片中。它将整个多文档请求分解成每个分片的多文档请求，并且将这些请求并行转发到每个参与节点。</p><p>协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返回给客户端。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/b90ea9c79138d8361ca339cff205fdb0.png" alt="img"></p><p><strong>用单个 mget 请求取回多个文档所需的步骤顺序:</strong></p><ol><li>客户端向 Node 1 发送 mget 请求。</li><li>Node 1为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复，Node 1 构建响应并将其返回给客户端。</li></ol><p>可以对docs数组中每个文档设置routing参数。</p><p>bulk API， 允许在单个批量请求中执行多个创建、索引、删除和更新请求。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/83499315a7b8ab81471a88f3e142f0a8.png" alt="img"></p><p><strong>bulk API 按如下步骤顺序执行：</strong></p><ol><li>客户端向Node 1 发送 bulk请求。</li><li>Node 1为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。</li><li>主分片一个接一个按顺序执行每个操作。当每个操作成功时,主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。</li></ol><h2 id="43-进阶-倒排索引"><a href="#43-进阶-倒排索引" class="headerlink" title="43-进阶-倒排索引"></a>43-进阶-倒排索引</h2><p>分片是Elasticsearch最小的工作单元。但是究竟什么是一个分片，它是如何工作的？</p><p>传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值需求的数据结构是<strong>倒排索引</strong>。</p><h3 id="倒排索引原理"><a href="#倒排索引原理" class="headerlink" title="倒排索引原理"></a>倒排索引原理</h3><p>Elasticsearch使用一种称为倒排索引的结构，它适用于快速的全文搜索。</p><p>见其名，知其意，有倒排索引，肯定会对应有正向索引。正向索引（forward index），反向索引（inverted index）更熟悉的名字是<strong>倒排索引</strong>。</p><p>所谓的<strong>正向索引</strong>，就是搜索引擎会将待搜索的文件都对应一个文件ID，搜索时将这个ID和搜索关键字进行对应，形成K-V对，然后对关键字进行统计计数。（统计？？下文有解释）</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/cba02cc6d7c5f054dfe5d58fafac9a6a.png" alt="img"></p><p>但是互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a1f52e96e0ac218b5024d708202afba4.png" alt="img"></p><h3 id="倒排索引的例子"><a href="#倒排索引的例子" class="headerlink" title="倒排索引的例子"></a>倒排索引的例子</h3><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。例如，假设我们有两个文档，每个文档的content域包含如下内容：</p><ul><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ul><p>为了创建倒排索引，我们首先将每个文档的content域拆分成单独的词（我们称它为词条或tokens )，创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/3cc642e9bae776c3e617f9d117d41e21.png" alt="img"></p><p>现在，如果我们想搜索 <code>quick</code> <code>brown</code> ，我们只需要查找包含每个词条的文档：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/f26aaa01e011edfa68736956b2f1ddea.png" alt="img"></p><p>两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单相似性算法，那么我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。</p><p>但是，我们目前的倒排索引有一些问题：</p><ul><li><code>Quick</code>和<code>quick</code>以独立的词条出现，然而用户可能认为它们是相同的词。</li><li><code>fox</code>和<code>foxes</code>非常相似，就像<code>dog</code>和<code>dogs</code>；他们有相同的词根。</li><li><code>jumped</code>和<code>leap</code>，尽管没有相同的词根，但他们的意思很相近。他们是同义词。</li></ul><p>使用前面的索引搜索<code>+Quick</code> <code>+fox</code>不会得到任何匹配文档。(记住，＋前缀表明这个词必须存在）。</p><p>只有同时出现<code>Quick</code>和<code>fox</code> 的文档才满足这个查询条件，但是第一个文档包含<code>quick</code> <code>fox</code> ，第二个文档包含<code>Quick</code> <code>foxes</code> 。</p><p>我们的用户可以合理的期望两个文档与查询匹配。我们可以做的更好。</p><p>如果我们将词条规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。例如：</p><ul><li><code>Quick</code>可以小写化为<code>quick</code>。</li><li><code>foxes</code>可以词干提取变为词根的格式为<code>fox</code>。类似的，<code>dogs</code>可以为提取为<code>dog</code>。</li><li><code>jumped</code>和<code>leap</code>是同义词，可以索引为相同的单词<code>jump</code> 。</li></ul><p>现在索引看上去像这样：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/19813d1918c89461303377444cf85c8c.png" alt="img"></p><p>这还远远不够。我们搜索<code>+Quick</code> <code>+fox</code> 仍然会失败，因为在我们的索引中，已经没有<code>Quick</code>了。但是，如果我们对搜索的字符串使用与content域相同的标准化规则，会变成查询<code>+quick</code> <code>+fox</code>，这样两个文档都会匹配！分词和标准化的过程称为<strong>分析</strong>，这非常重要。你只能搜索在索引中出现的词条，所以索引文本和查询字符串必须标准化为相同的格式。</p><h2 id="44-进阶-文档搜索"><a href="#44-进阶-文档搜索" class="headerlink" title="44-进阶-文档搜索"></a>44-进阶-文档搜索</h2><h3 id="不可改变的倒排索引"><a href="#不可改变的倒排索引" class="headerlink" title="不可改变的倒排索引"></a>不可改变的倒排索引</h3><p>早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。 一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。</p><p>倒排索引被写入磁盘后是不可改变的：它永远不会修改。</p><ul><li>不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</li><li>一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</li><li>其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。</li><li>写入单个大的倒排索引允许数据被压缩，减少磁盘IO和需要被缓存到内存的索引的使用量。</li></ul><p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p><h3 id="动态更新索引"><a href="#动态更新索引" class="headerlink" title="动态更新索引"></a>动态更新索引</h3><p>如何在保留不变性的前提下实现倒排索引的更新？</p><p>答案是：用更多的索引。通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到,从最早的开始查询完后再对结果进行合并。</p><p>Elasticsearch基于Lucene，这个java库引入了<strong>按段搜索</strong>的概念。每一段本身都是一个倒排索引，但索引在 Lucene 中除表示所有段的集合外，还增加了提交点的概念—一个列出了所有已知段的文件。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9ee1adbb2d55e710257e01b812a6d8cf.png" alt="img"></p><p>按段搜索会以如下流程执行：</p><p>一、新文档被收集到内存索引缓存。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9d499fde966ee9825fa5a424d8357489.png" alt="img"></p><p>二、不时地, 缓存被提交。</p><ol><li>一个新的段，一个追加的倒排索引，被写入磁盘。</li><li>一个新的包含新段名字的提交点被写入磁盘。</li><li>磁盘进行同步，所有在文件系统缓存中等待的写入都刷新到磁盘，以确保它们被写入物理文件</li></ol><p>三、新的段被开启，让它包含的文档可见以被搜索。</p><p>四、内存缓存被清空，等待接收新的文档。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/f74828ff58cc4635a97e88706a221e50.png" alt="img"></p><p>当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。这种方式可以用相对较低的成本将新文档添加到索引。</p><p>段是不可改变的，所以既不能从把文档从旧的段中移除，也不能修改旧的段来进行反映文档的更新。取而代之的是，每个提交点会包含一个.del 文件，文件中会列出这些被删除文档的段信息。</p><p>当一个<strong>文档被“删除”</strong>时，它实际上只是在 .del 文件中被标记删除。一个被标记删除的文档仍然可以被查询匹配到，但它会在最终结果被返回前从结果集中移除。</p><p><strong>文档更新</strong>也是类似的操作方式:当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</p><h2 id="45-进阶-文档刷新-amp-文档刷写-amp-文档合并"><a href="#45-进阶-文档刷新-amp-文档刷写-amp-文档合并" class="headerlink" title="45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并"></a>45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/b3b31c1e592d5aa794e7c9fcb259c924.png" alt="img"></p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/521c25f0f16247240234d1b8eb3c5f25.png" alt="img"></p><h3 id="近实时搜索"><a href="#近实时搜索" class="headerlink" title="近实时搜索"></a>近实时搜索</h3><p>随着按段（per-segment）搜索的发展，一个新的文档从索引到可被搜索的延迟显著降低了。新文档在几分钟之内即可被检索，但这样还是不够快。磁盘在这里成为了瓶颈。<strong>提交（Commiting）一个新的段到磁盘需要一个fsync来确保段被物理性地写入磁盘</strong>，这样在断电的时候就不会丢失数据。但是fsync操作代价很大；如果每次索引一个文档都去执行一次的话会造成很大的性能问题。</p><p>我们需要的是一个更轻量的方式来使一个文档可被搜索，这意味着fsync要从整个过程中被移除。在Elasticsearch和磁盘之间是<strong>文件系统缓存</strong>。像之前描述的一样，在内存索引缓冲区中的文档会被写入到一个新的段中。但是这里新段会被先写入到文件系统缓存—这一步代价会比较低，稍后再被刷新到磁盘—这一步代价比较高。不过只要文件已经在缓存中，就可以像其它文件一样被打开和读取了。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a679d4f5f4bfa6913a53316251beef2a.png" alt="img"></p><p>Lucene允许新段被写入和打开，使其包含的文档在未进行一次完整提交时便对搜索可见。这种方式比进行一次提交代价要小得多，并且在不影响性能的前提下可以被频繁地执行。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/673d3a77e254fa3a5a6f5293ffb125ab.png" alt="img"></p><p>在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做refresh。默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch是近实时搜索：文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。</p><p>这些行为可能会对新用户造成困惑：他们索引了一个文档然后尝试搜索它，但却没有搜到。这个问题的解决办法是用refresh API执行一次手动刷新：&#x2F;usersl_refresh</p><p>尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候，手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。相反，你的应用需要意识到Elasticsearch 的近实时的性质，并接受它的不足。</p><p>并不是所有的情况都需要每秒刷新。可能你正在使用Elasticsearch索引大量的日志文件，你可能想优化索引速度而不是近实时搜索，可以通过设置refresh_interval ，降低每个索引的刷新频率</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"refresh_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>refresh_interval可以在既存索引上进行动态更新。在生产环境中，当你正在建立一个大的新索引时，可以先关闭自动刷新，待开始使用该索引时，再把它们调回来。</p><pre class="language-none"><code class="language-none"># 关闭自动刷新PUT &#x2F;users&#x2F;_settings&#123; &quot;refresh_interval&quot;: -1 &#125;# 每一秒刷新PUT &#x2F;users&#x2F;_settings&#123; &quot;refresh_interval&quot;: &quot;1s&quot; &#125;1234567</code></pre><h3 id="持久化变更"><a href="#持久化变更" class="headerlink" title="持久化变更"></a>持久化变更</h3><p>如果没有用fsync把数据从文件系统缓存刷（flush）到硬盘，我们不能保证数据在断电甚至是程序正常退出之后依然存在。为了保证Elasticsearch 的可靠性，需要确保数据变化被持久化到磁盘。在动态更新索引，我们说一次完整的提交会将段刷到磁盘，并写入一个包含所有段列表的提交点。Elasticsearch 在启动或重新打开一个索引的过程中使用这个提交点来判断哪些段隶属于当前分片。</p><p>即使通过每秒刷新(refresh）实现了近实时搜索，我们仍然需要经常进行完整提交来确保能从失败中恢复。但在两次提交之间发生变化的文档怎么办?我们也不希望丢失掉这些数据。Elasticsearch 增加了一个translog ，或者叫事务日志，在每一次对Elasticsearch进行操作时均进行了日志记录。</p><p>整个流程如下:</p><p>一、一个文档被索引之后，就会被添加到内存缓冲区，并且追加到了 translog</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/baeab48c8d6b87660ac4fb954e9c9731.png" alt="img"></p><p>二、刷新（refresh）使分片每秒被刷新（refresh）一次：</p><ul><li>这些在内存缓冲区的文档被写入到一个新的段中，且没有进行fsync操作。</li><li>这个段被打开，使其可被搜索。</li><li>内存缓冲区被清空。</li></ul><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/17be4247e6b23f31b1e589c70d61e817.png" alt="img"></p><p>三、这个进程继续工作，更多的文档被添加到内存缓冲区和追加到事务日志。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/4b5c4a3a3ffb4c84625bb283f6a67018.png" alt="img"></p><p>四、每隔一段时间—例如translog变得越来越大，索引被刷新（flush）；一个新的translog被创建，并且一个全量提交被执行。</p><ul><li>所有在内存缓冲区的文档都被写入一个新的段。</li><li>缓冲区被清空。</li><li>一个提交点被写入硬盘。</li><li>文件系统缓存通过fsync被刷新（flush） 。</li><li>老的translog被删除。</li></ul><p>translog 提供所有还没有被刷到磁盘的操作的一个持久化纪录。当Elasticsearch启动的时候，它会从磁盘中使用最后一个提交点去恢复己知的段，并且会重放translog 中所有在最后一次提交后发生的变更操作。</p><p>translog 也被用来提供实时CRUD。当你试着通过ID查询、更新、删除一个文档，它会在尝试从相应的段中检索之前，首先检查 translog任何最近的变更。这意味着它总是能够实时地获取到文档的最新版本。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/11c7d2cc05244e669eb8402dd8049de9.png" alt="img"></p><p>执行一个提交并且截断translog 的行为在 Elasticsearch被称作一次flush。分片每30分钟被自动刷新（flush)，或者在 translog 太大的时候也会刷新。</p><p>你很少需要自己手动执行flush操作，通常情况下，自动刷新就足够了。这就是说，在重启节点或关闭索引之前执行 flush有益于你的索引。当Elasticsearch尝试恢复或重新打开一个索引，它需要重放translog中所有的操作，所以如果日志越短，恢复越快。</p><p>translog 的目的是保证操作不会丢失，在文件被fsync到磁盘前，被写入的文件在重启之后就会丢失。默认translog是每5秒被fsync刷新到硬盘，或者在每次写请求完成之后执行（e.g. index, delete, update, bulk）。这个过程在主分片和复制分片都会发生。最终，基本上，这意味着在整个请求被fsync到主分片和复制分片的translog之前，你的客户端不会得到一个200 OK响应。</p><p>在每次请求后都执行一个fsync会带来一些性能损失，尽管实践表明这种损失相对较小（特别是 bulk 导入，它在一次请求中平摊了大量文档的开销）。</p><p>但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。如果你决定使用异步translog 的话，你需要保证在发生 crash 时，丢失掉 sync_interval时间段的数据也无所谓。请在决定前知晓这个特性。如果你不确定这个行为的后果，最好是使用默认的参数{“index.translog.durability”: “request”}来避免数据丢失。</p><h3 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h3><p>由于自动刷新流程每秒会创建一个新的段，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。每一个段都会消耗文件句柄、内存和 cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。</p><p>Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。</p><p>段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。</p><p>启动段合并不需要你做任何事。进行索引和搜索时会自动进行。</p><p>一、当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。</p><p>二、合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/c907ca35bd7c0393d46aec2c7038af19.png" alt="img"></p><p>三、一旦合并结束，老的段被删除</p><ul><li>新的段被刷新(flush)到了磁盘。</li><li>写入一个包含新段且排除旧的和较小的段的新提交点。</li><li>新的段被打开用来搜索。老的段被删除。</li></ul><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a00cc1c19652c47fcfb663aaf337a41b.png" alt="img"></p><p>合并大的段需要消耗大量的 I&#x2F;O 和 CPU 资源，如果任其发展会影响搜索性能。 Elasticsearch在默认情况下会对合并流程进行资源限制，所以搜索仍然有足够的资源很好地执行。</p><h2 id="46-进阶-文档分析"><a href="#46-进阶-文档分析" class="headerlink" title="46-进阶-文档分析"></a>46-进阶-文档分析</h2><p>分析包含下面的过程：</p><ul><li>将一块文本分成适合于倒排索引的独立的词条。</li><li>将这些词条统一化为标准格式以提高它们的“可搜索性”，或者recall。</li></ul><p>分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里：</p><ul><li>字符过滤器：首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 &amp; 转化成 and。</li><li>分词器：其次，字符串被分词器分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</li><li>Token 过滤器：最后，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像jump和leap这种同义词）</li></ul><h3 id="内置分析器"><a href="#内置分析器" class="headerlink" title="内置分析器"></a>内置分析器</h3><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><pre class="language-none"><code class="language-none">&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;1</code></pre><ul><li>标准分析器</li></ul><p>标准分析器是Elasticsearch 默认使用的分析器。它是分析各种语言文本最常用的选择。它根据Unicode 联盟定义的单词边界划分文本。删除绝大部分标点。最后，将词条小写。它会产生：</p><pre class="language-none"><code class="language-none">set, the, shape, to, semi, transparent, by, calling, set_trans, 51</code></pre><ul><li>简单分析器</li></ul><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生：</p><pre class="language-none"><code class="language-none">set, the, shape, to, semi, transparent, by, calling, set, trans1</code></pre><ul><li>空格分析器</li></ul><p>空格分析器在空格的地方划分文本。它会产生:</p><pre class="language-none"><code class="language-none">Set, the, shape, to, semi-transparent, by, calling, set_trans(5)1</code></pre><ul><li>语言分析器</li></ul><p>特定语言分析器可用于很多语言。它们可以考虑指定语言的特点。例如，英语分析器附带了一组英语无用词（常用单词，例如and或者the ,它们对相关性没有多少影响），它们会被删除。由于理解英语语法的规则，这个分词器可以提取英语单词的词干。</p><p>英语分词器会产生下面的词条：</p><pre class="language-none"><code class="language-none">set, shape, semi, transpar, call, set_tran, 51</code></pre><p>注意看transparent、calling和 set_trans已经变为词根格式。</p><h3 id="分析器使用场景"><a href="#分析器使用场景" class="headerlink" title="分析器使用场景"></a>分析器使用场景</h3><p>当我们索引一个文档，它的全文域被分析成词条以用来创建倒排索引。但是，当我们在全文域搜索的时候，我们需要将查询字符串通过相同的分析过程，以保证我们搜索的词条格式与索引中的词条格式一致。</p><p>全文查询，理解每个域是如何定义的，因此它们可以做正确的事：</p><ul><li>当你查询一个全文域时，会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</li><li>当你查询一个精确值域时，不会分析查询字符串，而是搜索你指定的精确值。</li></ul><h3 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h3><p>有些时候很难理解分词的过程和实际被存储到索引中的词条，特别是你刚接触Elasticsearch。为了理解发生了什么，你可以使用analyze API来看文本是如何被分析的。在消息体里，指定分析器和要分析的文本。</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Text to analyze"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>结果中每个元素代表一个单独的词条：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"to"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"analyze"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425</span></code></pre><ul><li>token是实际存储到索引中的词条。</li><li>start_ offset 和end_ offset指明字符在原始字符串中的位置。</li><li>position指明词条在原始文本中出现的位置。</li></ul><h3 id="指定分析器"><a href="#指定分析器" class="headerlink" title="指定分析器"></a>指定分析器</h3><p>当Elasticsearch在你的文档中检测到一个新的字符串域，它会自动设置其为一个全文字符串域，使用 标准 分析器对它进行分析。你不希望总是这样。可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域，不使用分析，直接索引你传入的精确值，例如用户 ID 或者一个内部的状态域或标签。要做到这一点，我们必须手动指定这些域的映射。</p><p>（细粒度指定分析器）</p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>首先通过 Postman 发送 GET 请求查询分词效果</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"测试单词"</span><span class="token punctuation">&#125;</span><span class="token number">1234</span></code></pre><p>ES 的默认分词器无法识别中文中测试、 单词这样的词汇，而是简单的将每个字拆完分为一个词。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"测"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"试"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"单"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"词"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132</span></code></pre><p>这样的结果显然不符合我们的使用要求，所以我们需要下载 ES 对应版本的中文分词器。</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0">IK 中文分词器下载网址</a></p><p>将解压后的后的文件夹放入 ES 根目录下的 plugins 目录下，重启 ES 即可使用。</p><p>我们这次加入新的查询参数”analyzer”:“ik_max_word”。</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"测试单词"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><ul><li>ik_max_word：会将文本做最细粒度的拆分。</li><li>ik_smart：会将文本做最粗粒度的拆分。</li></ul><p>使用中文分词后的结果为：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"测试"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"单词"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>ES 中也可以进行扩展词汇，首先查询</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"弗雷尔卓德"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>仅仅可以得到每个字的分词结果，我们需要做的就是使分词器识别到弗雷尔卓德也是一个词语。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"弗"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"雷"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"尔"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"卓"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"德"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">4</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839</span></code></pre><ol><li>首先进入 ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config 目录，创建 custom.dic文件，写入“弗雷尔卓德”。</li><li>同时打开 IKAnalyzer.cfg.xml 文件，将新建的 custom.dic 配置其中。</li><li>重启 ES 服务器 。</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">"http://java.sun.com/dtd/properties.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用户可以在这里配置自己的扩展字典 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用户可以在这里配置远程扩展字典 --></span><span class="token comment">&lt;!-- &lt;entry key="remote_ext_dict">words_location&lt;/entry> --></span><span class="token comment">&lt;!--用户可以在这里配置远程扩展停止词字典--></span><span class="token comment">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>12345678910111213</code></pre><p>扩展后再次查询</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"测试单词"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"弗雷尔卓德"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011</span></code></pre><h3 id="自定义分析器"><a href="#自定义分析器" class="headerlink" title="自定义分析器"></a>自定义分析器</h3><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。在分析与分析器我们说过，一个分析器就是在一个包里面组合了三种函数的一个包装器，三种函数按照顺序被执行：</p><h4 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h4><p>字符过滤器用来整理一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像<code>&lt;p&gt;</code>或者<code>&lt;div&gt;</code>这样的HTML标签，这些标签是我们不想索引的。我们可以使用html清除字符过滤器来移除掉所有的HTML标签，并且像把<code>Á</code>转换为相对应的Unicode字符Á 这样，转换HTML实体。一个分析器可能有0个或者多个字符过滤器。</p><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><p>一个分析器必须有一个唯一的分词器。分词器把字符串分解成单个词条或者词汇单元。标准分析器里使用的标准分词器把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p><p>例如，关键词分词器完整地输出接收到的同样的字符串，并不做任何分词。空格分词器只根据空格分割文本。正则分词器根据匹配正则表达式来分割文本。</p><h4 id="词单元过滤器"><a href="#词单元过滤器" class="headerlink" title="词单元过滤器"></a>词单元过滤器</h4><p>经过分词，作为结果的词单元流会按照指定的顺序通过指定的词单元过滤器。词单元过滤器可以修改、添加或者移除词单元。我们已经提到过lowercase和stop词过滤器，但是在Elasticsearch 里面还有很多可供选择的词单元过滤器。词干过滤器把单词遏制为词干。ascii_folding过滤器移除变音符，把一个像”très”这样的词转换为“tres”。</p><p>ngram和 edge_ngram词单元过滤器可以产生适合用于部分匹配或者自动补全的词单元。</p><h4 id="自定义分析器例子"><a href="#自定义分析器例子" class="headerlink" title="自定义分析器例子"></a>自定义分析器例子</h4><p>接下来，我们看看如何创建自定义的分析器：</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//localhost:9200/my_index</span><span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"analysis"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"char_filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"&amp;_to_and"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"mapping"</span><span class="token punctuation">,</span>                     <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"&amp;=> and "</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"my_stopwords"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"stop"</span><span class="token punctuation">,</span>                     <span class="token property">"stopwords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"the"</span><span class="token punctuation">,</span>                         <span class="token string">"a"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"my_analyzer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"custom"</span><span class="token punctuation">,</span>                     <span class="token property">"char_filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"html_strip"</span><span class="token punctuation">,</span>                         <span class="token string">"&amp;_to_and"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                     <span class="token property">"tokenizer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>                     <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"lowercase"</span><span class="token punctuation">,</span>                         <span class="token string">"my_stopwords"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839</span></code></pre><p>索引被创建以后，使用 analyze API 来 测试这个新的分析器：</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/my_index/_analyze</span><span class="token punctuation">&#123;</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"The quick &amp; brown fox"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"my_analyzer"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>返回结果为：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"quick"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"and"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"brown"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"fox"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">4</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132</span></code></pre><h2 id="47-进阶-文档控制"><a href="#47-进阶-文档控制" class="headerlink" title="47-进阶-文档控制"></a>47-进阶-文档控制</h2><h3 id="文档冲突"><a href="#文档冲突" class="headerlink" title="文档冲突"></a>文档冲突</h3><p>当我们使用index API更新文档，可以一次性读取原始文档，做我们的修改，然后重新索引整个文档。最近的索引请求将获胜：无论最后哪一个文档被索引，都将被唯一存储在 Elasticsearch 中。如果其他人同时更改这个文档，他们的更改将丢失。</p><p>很多时候这是没有问题的。也许我们的主数据存储是一个关系型数据库，我们只是将数据复制到Elasticsearch中并使其可被搜索。也许两个人同时更改相同的文档的几率很小。或者对于我们的业务来说偶尔丢失更改并不是很严重的问题。</p><p>但有时丢失了一个变更就是非常严重的。试想我们使用Elasticsearch 存储我们网上商城商品库存的数量，每次我们卖一个商品的时候，我们在 Elasticsearch 中将库存数量减少。有一天，管理层决定做一次促销。突然地，我们一秒要卖好几个商品。假设有两个web程序并行运行，每一个都同时处理所有商品的销售。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/49ca2ec50db3ddd0fcd1f364ac600b96.png" alt="img"></p><p>web_1 对stock_count所做的更改已经丢失，因为 web_2不知道它的 stock_count的拷贝已经过期。结果我们会认为有超过商品的实际数量的库存，因为卖给顾客的库存商品并不存在，我们将让他们非常失望。</p><p>变更越频繁，读数据和更新数据的间隙越长，也就越可能丢失变更。在数据库领域中，有两种方法通常被用来确保并发更新时变更不会丢失：</p><ul><li>悲观并发控制：这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</li><li>乐观并发控制：Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</li></ul><h3 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h3><p>Elasticsearch是分布式的。当文档创建、更新或删除时，新版本的文档必须复制到集群中的其他节点。Elasticsearch也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许顺序是乱的。Elasticsearch需要一种方法确保文档的旧版本不会覆盖新的版本。</p><p>当我们之前讨论index , GET和DELETE请求时，我们指出每个文档都有一个_version（版本号），当文档被修改时版本号递增。Elasticsearch使用这个version号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</p><p>我们可以利用version号来确保应用中相互冲突的变更不会导致数据丢失。我们通过指定想要修改文档的 version号来达到这个目的。如果该版本不是当前版本号，我们的请求将会失败。</p><p>老的版本es使用version，但是新版本不支持了，会报下面的错误，提示我们用if_seq _no和if _primary_term</p><p>创建索引</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_create/1001</span><span class="token number">1</span></code></pre><p>返回结果</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>更新数据</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_update/1001</span><span class="token punctuation">&#123;</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>旧版本使用的防止冲突更新方法：</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_update/1001?version=1</span><span class="token punctuation">&#123;</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机2"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"action_request_validation_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"action_request_validation_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213</span></code></pre><p>新版本使用的防止冲突更新方法：</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_update/1001?if_seq_no=11&amp;if_primary_term=15</span><span class="token punctuation">&#123;</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机2"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><h3 id="外部系统版本控制"><a href="#外部系统版本控制" class="headerlink" title="外部系统版本控制"></a>外部系统版本控制</h3><p>一个常见的设置是使用其它数据库作为主要的数据存储，使用Elasticsearch做数据检索，这意味着主数据库的所有更改发生时都需要被复制到Elasticsearch，如果多个进程负责这一数据同步，你可能遇到类似于之前描述的并发问题。</p><p>如果你的主数据库已经有了版本号，或一个能作为版本号的字段值比如timestamp，那么你就可以在 Elasticsearch 中通过增加 version_type&#x3D;extermal到查询字符串的方式重用这些相同的版本号，版本号必须是大于零的整数，且小于9.2E+18，一个Java中 long类型的正值。</p><p>外部版本号的处理方式和我们之前讨论的内部版本号的处理方式有些不同，Elasticsearch不是检查当前_version和请求中指定的版本号是否相同，而是检查当前_version是否小于指定的版本号。如果请求成功，外部的版本号作为文档的新_version进行存储。</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_doc/1001?version=300&amp;version_type=external</span><span class="token punctuation">&#123;</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机2"</span><span class="token punctuation">&#125;</span><span class="token number">1234</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><h2 id="48-进阶-文档展示-Kibana"><a href="#48-进阶-文档展示-Kibana" class="headerlink" title="48-进阶-文档展示-Kibana"></a>48-进阶-文档展示-Kibana</h2><p>Kibana是一个免费且开放的用户界面，能够让你对Elasticsearch 数据进行可视化，并让你在Elastic Stack 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如何流经你的整个应用，都能轻松完成。</p><p><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip">Kibana下载网址</a></p><p>一、解压缩下载的 zip 文件。</p><p>二、修改 config&#x2F;kibana.yml 文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 默认端口</span><span class="token key atrule">server.port</span><span class="token punctuation">:</span> <span class="token number">5601</span><span class="token comment"># ES 服务器的地址</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://localhost:9200"</span><span class="token punctuation">]</span><span class="token comment"># 索引名</span><span class="token key atrule">kibana.index</span><span class="token punctuation">:</span> <span class="token string">".kibana"</span><span class="token comment"># 支持中文</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span>12345678</code></pre><p>三、Windows 环境下执行 bin&#x2F;kibana.bat 文件。（首次启动有点耗时）</p><p>四、通过浏览器访问：<a href="http://localhost:5601。">http://localhost:5601。</a></p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/d066ba5e26916624b5d056d04c5580ac.png" alt="img"></p><h1 id="第5章-Elasticsearch集成"><a href="#第5章-Elasticsearch集成" class="headerlink" title="第5章 Elasticsearch集成"></a>第5章 Elasticsearch集成</h1><h2 id="49-框架集成-SpringData-整体介绍"><a href="#49-框架集成-SpringData-整体介绍" class="headerlink" title="49-框架集成-SpringData-整体介绍"></a>49-框架集成-SpringData-整体介绍</h2><p>Spring Data是一个用于简化数据库、非关系型数据库、索引库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持 map-reduce框架和云计算数据服务。Spring Data可以极大的简化JPA(Elasticsearch…)的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD 外，还包括如分页、排序等一些常用的功能。</p><p><a href="https://spring.io/projects/spring-data">Spring Data 的官网</a></p><p>Spring Data 常用的功能模块如下：</p><ul><li>Spring Data JDBC</li><li>Spring Data JPA</li><li>Spring Data LDAP</li><li>Spring Data MongoDB</li><li>Spring Data Redis</li><li>Spring Data R2DBC</li><li>Spring Data REST</li><li>Spring Data for Apache Cassandra</li><li>Spring Data for Apache Geode</li><li>Spring Data for Apache Solr</li><li>Spring Data for Pivotal GemFire</li><li>Spring Data Couchbase</li><li>Spring Data Elasticsearch</li><li>Spring Data Envers</li><li>Spring Data Neo4j</li><li>Spring Data JDBC Extensions</li><li>Spring for Apache Hadoop</li></ul><h3 id="Spring-Data-Elasticsearch-介绍"><a href="#Spring-Data-Elasticsearch-介绍" class="headerlink" title="Spring Data Elasticsearch 介绍"></a>Spring Data Elasticsearch 介绍</h3><p>Spring Data Elasticsearch基于Spring Data API简化 Elasticsearch 操作，将原始操作Elasticsearch 的客户端API进行封装。Spring Data为Elasticsearch 项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储索引库数据访问层。</p><p><a href="https://spring.io/projects/spring-data-elasticsearch">Spring Data Elasticsearch 官网</a></p><h2 id="50-框架集成-SpringData-代码功能集成"><a href="#50-框架集成-SpringData-代码功能集成" class="headerlink" title="50-框架集成-SpringData-代码功能集成"></a>50-框架集成-SpringData-代码功能集成</h2><p>一、创建Maven项目。</p><p>二、修改pom文件，增加依赖关系。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringDataWithES<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</code></pre><p>三、增加配置文件。</p><p>在 resources 目录中增加application.properties文件</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># es 服务地址</span><span class="token key attr-name">elasticsearch.host</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span class="token comment"># es 服务端口</span><span class="token key attr-name">elasticsearch.port</span><span class="token punctuation">=</span><span class="token value attr-value">9200</span><span class="token comment"># 配置日志级别,开启 debug 日志</span><span class="token key attr-name">logging.level.com.atguigu.es</span><span class="token punctuation">=</span><span class="token value attr-value">debug</span>123456</code></pre><p>四、Spring Boot 主程序。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789</span></code></pre><p>五、数据实体类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">FieldType</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span> shards <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> replicas <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//必须有 id,这里的 id 是全局唯一的标识，等同于 es 中的"_id"</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span class="token comment">//商品唯一标识</span>    <span class="token comment">/**     * type : 字段数据类型     * analyzer : 分词器类型     * index : 是否索引(默认:true)     * Keyword : 短语,不进行分词     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Text</span><span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token comment">//商品名称</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Keyword</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span><span class="token comment">//分类名称</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Double</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span><span class="token comment">//商品价格</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Keyword</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> images<span class="token punctuation">;</span><span class="token comment">//图片地址</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637</span></code></pre><p>六、配置类</p><ul><li>ElasticsearchRestTemplate是spring-data-elasticsearch项目中的一个类,和其他spring项目中的 template类似。</li><li>在新版的spring-data-elasticsearch 中，ElasticsearchRestTemplate 代替了原来的ElasticsearchTemplate。</li><li>原因是ElasticsearchTemplate基于TransportClient，TransportClient即将在8.x 以后的版本中移除。所以，我们推荐使用ElasticsearchRestTemplate。</li><li>ElasticsearchRestTemplate基于RestHighLevelClient客户端的。需要自定义配置类，继承AbstractElasticsearchConfiguration，并实现elasticsearchClient()抽象方法，创建RestHighLevelClient对象。</li></ul><p>AbstractElasticsearchConfiguration源码：</p><pre class="language-json" data-language="json"><code class="language-json">package org.springframework.data.elasticsearch.config;import org.elasticsearch.client.RestHighLevelClient;import org.springframework.context.annotation.Bean;import org.springframework.data.elasticsearch.core.ElasticsearchOperations;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;<span class="token comment">/** * @author Christoph Strobl * @author Peter-Josef Meisch * @since 3.2 * @see ElasticsearchConfigurationSupport */</span>public abstract class AbstractElasticsearchConfiguration extends ElasticsearchConfigurationSupport <span class="token punctuation">&#123;</span><span class="token comment">//需重写本方法</span>public abstract RestHighLevelClient elasticsearchClient();@Bean(name = <span class="token punctuation">&#123;</span> <span class="token string">"elasticsearchOperations"</span><span class="token punctuation">,</span> <span class="token string">"elasticsearchTemplate"</span> <span class="token punctuation">&#125;</span>)public ElasticsearchOperations elasticsearchOperations(ElasticsearchConverter elasticsearchConverter) <span class="token punctuation">&#123;</span>return new ElasticsearchRestTemplate(elasticsearchClient()<span class="token punctuation">,</span> elasticsearchConverter);<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324</span></code></pre><p>需要自定义配置类，继承AbstractElasticsearchConfiguration，并实现elasticsearchClient()抽象方法，创建RestHighLevelClient对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClientBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">AbstractElasticsearchConfiguration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticsearchConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractElasticsearchConfiguration</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port <span class="token punctuation">;</span>    <span class="token comment">//重写父类方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RestHighLevelClient</span> <span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestClientBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestHighLevelClient</span> restHighLevelClient <span class="token operator">=</span> <span class="token keyword">new</span>                <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425</span></code></pre><p>七、DAO 数据访问对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductDao</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><h2 id="51-框架集成-SpringData-集成测试-索引操作"><a href="#51-框架集成-SpringData-集成测试-索引操作" class="headerlink" title="51-框架集成-SpringData-集成测试-索引操作"></a>51-框架集成-SpringData-集成测试-索引操作</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRestTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESIndexTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注入 ElasticsearchRestTemplate</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchRestTemplate</span> elasticsearchRestTemplate<span class="token punctuation">;</span>    <span class="token comment">//创建索引并增加映射配置</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建索引，系统初始化会自动创建索引</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建索引"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建索引，系统初始化会自动创建索引</span>        <span class="token keyword">boolean</span> flg <span class="token operator">=</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除索引 = "</span> <span class="token operator">+</span> flg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728</span></code></pre><p>用Postman 检测有没有创建和删除。</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_cat/indices?v </span><span class="token number">1</span></code></pre><h2 id="52-框架集成-SpringData-集成测试-文档操作"><a href="#52-框架集成-SpringData-集成测试-文档操作" class="headerlink" title="52-框架集成-SpringData-集成测试-文档操作"></a>52-框架集成-SpringData-集成测试-文档操作</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ProductDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Sort</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESProductDaoTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductDao</span> productDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 新增     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">2999.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setImages</span><span class="token punctuation">(</span><span class="token string">"http://www.atguigu/hw.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//POSTMAN, GET http://localhost:9200/product/_doc/2</span>    <span class="token comment">//修改</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"小米 2 手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">9999.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setImages</span><span class="token punctuation">(</span><span class="token string">"http://www.atguigu/xm.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//POSTMAN, GET http://localhost:9200/product/_doc/2</span>    <span class="token comment">//根据 id 查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> products <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productDao<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//POSTMAN, GET http://localhost:9200/product/_doc/2</span>    <span class="token comment">//批量新增</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> productList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]小米手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1999.0</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setImages</span><span class="token punctuation">(</span><span class="token string">"http://www.atguigu/xm.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            productList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        productDao<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>productList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//分页查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByPageable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//设置排序(排序方式，正序还是倒序，排序的 id)</span>        <span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span>DESC<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentPage<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前页，第一页从 0 开始， 1 表示第二页</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//每页显示多少条</span>        <span class="token comment">//设置查询分页</span>        <span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分页查询</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> productPage <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> <span class="token class-name">Product</span> <span class="token operator">:</span> productPage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105</span></code></pre><h2 id="53-框架集成-SpringData-集成测试-文档搜索"><a href="#53-框架集成-SpringData-集成测试-文档搜索" class="headerlink" title="53-框架集成-SpringData-集成测试-文档搜索"></a>53-框架集成-SpringData-集成测试-文档搜索</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ProductDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESSearchTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductDao</span> productDao<span class="token punctuation">;</span>    <span class="token comment">/**     * term 查询     * search(termQueryBuilder) 调用搜索方法，参数查询构建器对象     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TermQueryBuilder</span> termQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"小米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> products <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>termQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * term 查询加分页     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">termQueryByPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> currentPage<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment">//设置查询分页</span>        <span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TermQueryBuilder</span> termQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"小米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> products <span class="token operator">=</span>                        productDao<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>termQueryBuilder<span class="token punctuation">,</span>pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span></code></pre><h2 id="54-框架集成-SparkStreaming-集成"><a href="#54-框架集成-SparkStreaming-集成" class="headerlink" title="54-框架集成-SparkStreaming-集成"></a>54-框架集成-SparkStreaming-集成</h2><p>Spark Streaming 是Spark core API的扩展，支持实时数据流的处理，并且具有可扩展，高吞吐量，容错的特点。数据可以从许多来源获取,如Kafka， Flume，Kinesis或TCP sockets，并且可以使用复杂的算法进行处理，这些算法使用诸如 map，reduce，join和 window等高级函数表示。最后，处理后的数据可以推送到文件系统，数据库等。实际上，您可以将Spark的机器学习和图形处理算法应用于数据流。</p><p>一、创建Maven项目。</p><p>二、修改 pom 文件，增加依赖关系。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lun.es<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sparkstreaming-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- elasticsearch 的客户端 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- elasticsearch 依赖 2.x 的 log4j --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;dependency>--></span>        <span class="token comment">&lt;!-- &lt;groupId>com.fasterxml.jackson.core&lt;/groupId>--></span>        <span class="token comment">&lt;!-- &lt;artifactId>jackson-databind&lt;/artifactId>--></span>        <span class="token comment">&lt;!-- &lt;version>2.11.1&lt;/version>--></span>        <span class="token comment">&lt;!-- &lt;/dependency>--></span>        <span class="token comment">&lt;!-- &amp;lt;!&amp;ndash; junit 单元测试 &amp;ndash;&amp;gt;--></span>        <span class="token comment">&lt;!-- &lt;dependency>--></span>        <span class="token comment">&lt;!-- &lt;groupId>junit&lt;/groupId>--></span>        <span class="token comment">&lt;!-- &lt;artifactId>junit&lt;/artifactId>--></span>        <span class="token comment">&lt;!-- &lt;version>4.12&lt;/version>--></span>        <span class="token comment">&lt;!-- &lt;/dependency>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758</code></pre><p>三、功能实现</p><pre class="language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpHost<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span>SparkConf<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>dstream<span class="token punctuation">.</span></span>ReceiverInputDStream<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span>IndexRequest<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>indices<span class="token punctuation">.</span></span>CreateIndexRequest<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>RequestOptions<span class="token punctuation">,</span> RestClient<span class="token punctuation">,</span> RestHighLevelClient<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span>XContentType<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date<span class="token keyword">object</span> SparkStreamingESTest <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"ESTest"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> ds<span class="token operator">:</span> ReceiverInputDStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>        ds<span class="token punctuation">.</span>foreachRDD<span class="token punctuation">(</span>            rdd <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>                println<span class="token punctuation">(</span><span class="token string">"*************** "</span> <span class="token operator">+</span> <span class="token keyword">new</span> Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>                    data <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token keyword">new</span> RestHighLevelClient<span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token keyword">new</span> HttpHost<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 新增文档 - 请求对象</span>                        <span class="token keyword">val</span> request <span class="token operator">=</span> <span class="token keyword">new</span> IndexRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">// 设置索引及唯一性标识</span>                        <span class="token keyword">val</span> ss <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>                        println<span class="token punctuation">(</span><span class="token string">"ss = "</span> <span class="token operator">+</span> ss<span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        request<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"sparkstreaming"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">(</span>ss<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token keyword">val</span> productJson <span class="token operator">=</span>                            <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"""                            | &#123; "data":"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">ss<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">" &#125;                            |"""</span></span><span class="token punctuation">.</span>stripMargin<span class="token punctuation">;</span>                                                <span class="token comment">// 添加文档数据，数据格式为 JSON 格式</span>                        request<span class="token punctuation">.</span>source<span class="token punctuation">(</span>productJson<span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">// 客户端发送请求，获取响应对象</span>                        <span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span>index<span class="token punctuation">(</span>request<span class="token punctuation">,</span>                        RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>getIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>getId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"_result:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>getResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253</span></code></pre><h2 id="55-框架集成-Flink-集成"><a href="#55-框架集成-Flink-集成" class="headerlink" title="55-框架集成-Flink-集成"></a>55-框架集成-Flink-集成</h2><p>Apache Spark是一-种基于内存的快速、通用、可扩展的大数据分析计算引擎。Apache Spark掀开了内存计算的先河，以内存作为赌注，贏得了内存计算的飞速发展。但是在其火热的同时，开发人员发现，在Spark中，计算框架普遍存在的缺点和不足依然没有完全解决，而这些问题随着5G时代的来临以及决策者对实时数据分析结果的迫切需要而凸显的更加明显：</p><ul><li>乱序数据，迟到数据</li><li>低延迟，高吞吐，准确性</li><li>容错性</li><li>数据精准一次性处理（Exactly-Once）</li></ul><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。在Spark火热的同时，也默默地发展自己，并尝试着解决其他计算框架的问题。慢慢地，随着这些问题的解决，Flink 慢慢被绝大数程序员所熟知并进行大力推广，阿里公司在2015年改进Flink，并创建了内部分支Blink，目前服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。</p><p>一、创建Maven项目。</p><p>二、修改 pom 文件，增加相关依赖类库。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lun.es<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-scala_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-streaming-scala_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-clients_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-elasticsearch7_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- jackson --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>12345678910111213141516171819202122232425262728293031323334353637383940414243</code></pre><p>三、功能实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">RuntimeContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchSinkFunction</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span></span><span class="token class-name">RequestIndexer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>elasticsearch7<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchSink</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Requests</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlinkElasticsearchSinkTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpHost</span><span class="token punctuation">></span></span> httpHosts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpHosts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//httpHosts.add(new HttpHost("10.2.3.1", 9200, "http"));</span><span class="token comment">// use a ElasticsearchSink.Builder to create an ElasticsearchSink</span><span class="token class-name">ElasticsearchSink<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> esSinkBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchSink<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>httpHosts<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchSinkFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">IndexRequest</span> <span class="token function">createIndexRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Requests</span><span class="token punctuation">.</span><span class="token function">indexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"my-index"</span><span class="token punctuation">)</span><span class="token comment">//.type("my-type")</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token punctuation">,</span> <span class="token class-name">RuntimeContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RequestIndexer</span> indexer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>indexer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createIndexRequest</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// configuration for the bulk requests; this instructs the sink to emit after every element, otherwise they would be buffered</span>esSinkBuilder<span class="token punctuation">.</span><span class="token function">setBulkFlushMaxActions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// provide a RestClientFactory for custom configuration on the internally createdREST client</span><span class="token comment">// esSinkBuilder.setRestClientFactory(</span><span class="token comment">// restClientBuilder -> &#123;</span><span class="token comment">// restClientBuilder.setDefaultHeaders(...)</span><span class="token comment">// restClientBuilder.setMaxRetryTimeoutMillis(...)</span><span class="token comment">// restClientBuilder.setPathPrefix(...)</span><span class="token comment">// restClientBuilder.setHttpClientConfigCallback(...)</span><span class="token comment">// &#125;</span><span class="token comment">// );</span>source<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>esSinkBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"flink-es"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859</span></code></pre><h1 id="第6章-Elasticsearch优化"><a href="#第6章-Elasticsearch优化" class="headerlink" title="第6章 Elasticsearch优化"></a>第6章 Elasticsearch优化</h1><h2 id="56-优化-硬件选择"><a href="#56-优化-硬件选择" class="headerlink" title="56-优化-硬件选择"></a>56-优化-硬件选择</h2><p>Elasticsearch 的基础是 Lucene，所有的索引和文档数据是存储在本地的磁盘中，具体的路径可在 ES 的配置文件…&#x2F;config&#x2F;elasticsearch.yml中配置，如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#</span><span class="token comment"># Path to directory where to store the data (separate multiple locations by comma):</span><span class="token comment">#</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /path/to/data<span class="token comment">#</span><span class="token comment"># Path to log files:</span><span class="token comment">#</span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /path/to/logs12345678</code></pre><p>磁盘在现代服务器上通常都是瓶颈。Elasticsearch重度使用磁盘，你的磁盘能处理的吞吐量越大，你的节点就越稳定。这里有一些优化磁盘I&#x2F;O的技巧：</p><ul><li>使用SSD就像其他地方提过的，他们比机械磁盘优秀多了。</li><li>使用RAID0。条带化RAID会提高磁盘IO，代价显然就是当一块硬盘故障时整个就故障了。不要使用镜像或者奇偶校验RAID，因为副本已经提供了这个功能。</li><li>另外，使用多块硬盘，并允许Elasticsearch 通过多个path data目录配置把数据条带化分配到它们上面。</li><li>不要使用远程挂载的存储，比如NFS或者SMB&#x2F;CIFS。这个引入的延迟对性能来说完全是背道而驰的。</li></ul><h2 id="57-优化-分片策略"><a href="#57-优化-分片策略" class="headerlink" title="57-优化-分片策略"></a>57-优化-分片策略</h2><h3 id="合理设置分片数"><a href="#合理设置分片数" class="headerlink" title="合理设置分片数"></a>合理设置分片数</h3><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后由于索引的路由机制，我们是不能重新修改分片数的。</p><p>可能有人会说，我不知道这个索引将来会变得多大，并且过后我也不能更改索引的大小，所以为了保险起见，还是给它设为 1000 个分片吧。但是需要知道的是，一个分片并不是没有代价的。需要了解：</p><ul><li>一个分片的底层即为一个 Lucene 索引，会消耗一定文件句柄、内存、以及 CPU运转。</li><li>每一个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好， 但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</li><li>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据会导致很低的相关度。</li></ul><p>一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断，横向扩展应当分阶段进行。为下一阶段准备好足够的资源。 只有当你进入到下一个阶段，你才有时间思考需要作出哪些改变来达到这个阶段。一般来说，我们遵循一些原则：</p><ul><li>控制每个分片占用的硬盘容量不超过 ES 的最大 JVM 的堆空间设置（一般设置不超过 32G，参考下文的 JVM 设置原则），因此，如果索引的总容量在 500G 左右，那分片大小在 16 个左右即可；当然，最好同时考虑原则 2。</li><li>考虑一下 node 数量，一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1 个以上的副本，同样有可能会导致数据丢失，集群无法恢复。所以， 一般都设置分片数不超过节点数的 3 倍。</li><li>主分片，副本和节点最大数之间数量，我们分配的时候可以参考以下关系：<br><code>节点数&lt;=主分片数 *（副本数+1）</code></li></ul><h3 id="推迟分片分配"><a href="#推迟分片分配" class="headerlink" title="推迟分片分配"></a>推迟分片分配</h3><p>对于节点瞬时中断的问题，默认情况，集群会等待一分钟来查看节点是否会重新加入，如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。这样就可以减少 ES 在自动再平衡可用分片时所带来的极大开销。</p><p>通过修改参数 delayed_timeout ，可以延长再均衡的时间，可以全局设置也可以在索引级别进行修改：</p><pre class="language-json" data-language="json"><code class="language-json">#PUT /_all/_settings<span class="token punctuation">&#123;</span><span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"index.unassigned.node_left.delayed_timeout"</span><span class="token operator">:</span> <span class="token string">"5m"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><h2 id="58-优化-路由选择"><a href="#58-优化-路由选择" class="headerlink" title="58-优化-路由选择"></a>58-优化-路由选择</h2><p>当我们查询文档的时候， Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？它其实是通过下面这个公式来计算出来：</p><pre class="language-none"><code class="language-none">shard &#x3D; hash(routing) % number_of_primary_shards1</code></pre><p>routing 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p><h3 id="不带routing查询"><a href="#不带routing查询" class="headerlink" title="不带routing查询"></a>不带routing查询</h3><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为2个步骤</p><ul><li>分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</li><li>聚合：协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</li></ul><h3 id="带routing查询"><a href="#带routing查询" class="headerlink" title="带routing查询"></a>带routing查询</h3><p>查询的时候，可以直接根据routing 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。向上面自定义的用户查询，如果routing 设置为userid 的话，就可以直接查询出数据来，效率提升很多。</p><h2 id="59-优化-写入速度优化"><a href="#59-优化-写入速度优化" class="headerlink" title="59-优化-写入速度优化"></a>59-优化-写入速度优化</h2><p>ES 的默认配置，是综合了数据可靠性、写入速度、搜索实时性等因素。实际使用时，我们需要根据公司要求，进行偏向性的优化。</p><p>针对于搜索性能要求不高，但是对写入要求较高的场景，我们需要尽可能的选择恰当写优化策略。综合来说，可以考虑以下几个方面来提升写索引的性能：</p><ul><li>加大Translog Flush，目的是降低Iops、Writeblock。</li><li>增加Index Refesh间隔，目的是减少Segment Merge的次数。</li><li>调整Bulk 线程池和队列。</li><li>优化节点间的任务分布。</li><li>优化Lucene层的索引建立，目的是降低CPU及IO。</li></ul><h3 id="优化存储设备"><a href="#优化存储设备" class="headerlink" title="优化存储设备"></a>优化存储设备</h3><p>ES 是一种密集使用磁盘的应用，在段合并的时候会频繁操作磁盘，所以对磁盘要求较高，当磁盘速度提升之后，集群的整体性能会大幅度提高。</p><h3 id="合理使用合并"><a href="#合理使用合并" class="headerlink" title="合理使用合并"></a>合理使用合并</h3><p>Lucene 以段的形式存储数据。当有新的数据写入索引时， Lucene 就会自动创建一个新的段。</p><p>随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU 就越多，查询效率就会下降。</p><p>由于 Lucene 段合并的计算量庞大，会消耗大量的 I&#x2F;O，所以 ES 默认采用较保守的策略，让后台定期进行段合并。</p><h3 id="减少-Refresh-的次数"><a href="#减少-Refresh-的次数" class="headerlink" title="减少 Refresh 的次数"></a>减少 Refresh 的次数</h3><p>Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的refresh_interval 为1 秒。</p><p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次 Refresh，然后 Refresh 会把内存中的的数据刷新到操作系统的文件缓存系统中。</p><p>如果我们对搜索的实效性要求不高，可以将 Refresh 周期延长，例如 30 秒。</p><p>这样还可以有效地减少段刷新次数，但这同时意味着需要消耗更多的 Heap 内存。</p><h3 id="加大-Flush-设置"><a href="#加大-Flush-设置" class="headerlink" title="加大 Flush 设置"></a>加大 Flush 设置</h3><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p><p>index.translog.flush_threshold_size 参数的默认值是 512MB，我们进行修改。</p><p>增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以我们需要为操作系统的文件缓存系统留下足够的空间。</p><h3 id="减少副本的数量"><a href="#减少副本的数量" class="headerlink" title="减少副本的数量"></a>减少副本的数量</h3><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以 Replicas 的数量会严重影响写索引的效率。</p><p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p><p>如果我们需要大批量进行写入操作，可以先禁止Replica复制，设置<br>index.number_of_replicas: 0 关闭副本。在写入完成后， Replica 修改回正常的状态。</p><h2 id="60-优化-内存设置"><a href="#60-优化-内存设置" class="headerlink" title="60-优化-内存设置"></a>60-优化-内存设置</h2><p>ES 默认安装后设置的内存是 1GB，对于任何一个现实业务来说，这个设置都太小了。如果是通过解压安装的 ES，则在 ES 安装文件中包含一个 jvm.option 文件，添加如下命令来设置 ES 的堆大小， Xms 表示堆的初始大小， Xmx 表示可分配的最大内存，都是 1GB。</p><p>确保 Xmx 和 Xms 的大小是相同的，其目的是为了能够在 Java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源，可以减轻伸缩堆大小带来的压力。</p><p>假设你有一个 64G 内存的机器，按照正常思维思考，你可能会认为把 64G 内存都给ES 比较好，但现实是这样吗， 越大越好？虽然内存对 ES 来说是非常重要的，但是答案是否定的！</p><p>因为 ES 堆内存的分配需要满足以下两个原则：</p><ul><li>不要超过物理内存的 50%： Lucene 的设计目的是把底层 OS 里的数据缓存到内存中。Lucene 的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问。如果我们设置的堆内存过大， Lucene 可用的内存将会减少，就会严重影响降低 Lucene 的全文本查询性能。</li><li>堆内存的大小最好不要超过 32GB：在 Java 中，所有对象都分配在堆上，然后有一个 Klass Pointer 指针指向它的类元数据。这个指针在 64 位的操作系统上为 64 位， 64 位的操作系统可以使用更多的内存（2^64）。在 32 位<br>的系统上为 32 位， 32 位的操作系统的最大寻址空间为 4GB（2^32）。<br>但是 64 位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的指针在主内存和缓存器（例如 LLC, L1 等）之间移动数据的时候，会占用更多的带宽。</li></ul><p>最终我们都会采用 31 G 设置</p><ul><li>-Xms 31g</li><li>-Xmx 31g</li></ul><p>假设你有个机器有 128 GB 的内存，你可以创建两个节点，每个节点内存分配不超过 32 GB。也就是说不超过 64 GB 内存给 ES 的堆内存，剩下的超过 64 GB 的内存给 Lucene。</p><h2 id="61-优化-重要配置"><a href="#61-优化-重要配置" class="headerlink" title="61-优化-重要配置"></a>61-优化-重要配置</h2><table><thead><tr><th>参数名</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>elasticsearch</td><td>配置 ES 的集群名称，默认值是 ES，建议改成与所存数据相关的名称， ES 会自动发现在同一网段下的 集群名称相同的节点。</td></tr><tr><td>node.name</td><td>node-1</td><td>集群中的节点名，在同一个集群中不能重复。节点 的名称一旦设置，就不能再改变了。当然，也可以 设 置 成 服 务 器 的 主 机 名 称 ， 例 如 node.name:${HOSTNAME}。</td></tr><tr><td>node.master</td><td>true</td><td>指定该节点是否有资格被选举成为 Master 节点，默 认是 True，如果被设置为 True，则只是有资格成为 Master 节点，具体能否成为 Master 节点，需要通 过选举产生。</td></tr><tr><td>node.data</td><td>true</td><td>指定该节点是否存储索引数据，默认为 True。数据 的增、删、改、查都是在 Data 节点完成的。</td></tr><tr><td>index.number_of_shards</td><td>1</td><td>设置都索引分片个数，默认是 1 片。也可以在创建 索引时设置该值，具体设置为多大都值要根据数据 量的大小来定。如果数据量不大，则设置成 1 时效 率最高</td></tr><tr><td>index.number_of_replicas</td><td>1</td><td>设置默认的索引副本个数，默认为 1 个。副本数越 多，集群的可用性越好，但是写索引时需要同步的 数据越多。</td></tr><tr><td>transport.tcp.compress</td><td>true</td><td>设置在节点间传输数据时是否压缩，默认为 False， 不压缩</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>1</td><td>设置在选举 Master 节点时需要参与的最少的候选 主节点数，默认为 1。如果使用默认值，则当网络 不稳定时有可能会出现脑裂。 合 理 的 数 值 为 (master_eligible_nodes&#x2F;2)+1 ， 其 中 master_eligible_nodes 表示集群中的候选主节点数</td></tr><tr><td>discovery.zen.ping.timeout</td><td>3s</td><td>设置在集群中自动发现其他节点时 Ping 连接的超 时时间，默认为 3 秒。 在较差的网络环境下需要设置得大一点，防止因误 判该节点的存活状态而导致分片的转移</td></tr></tbody></table><h1 id="第7章-Elasticsearch面试题"><a href="#第7章-Elasticsearch面试题" class="headerlink" title="第7章 Elasticsearch面试题"></a>第7章 Elasticsearch面试题</h1><h2 id="62-面试题"><a href="#62-面试题" class="headerlink" title="62-面试题"></a>62-面试题</h2><h3 id="为什么要使用-Elasticsearch？"><a href="#为什么要使用-Elasticsearch？" class="headerlink" title="为什么要使用 Elasticsearch？"></a>为什么要使用 Elasticsearch？</h3><p>系统中的数据， 随着业务的发展，时间的推移， 将会非常多， 而业务中往往采用模糊查询进行数据的搜索， 而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据库中，查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p><h3 id="Elasticsearch-的-master-选举流程？"><a href="#Elasticsearch-的-master-选举流程？" class="headerlink" title="Elasticsearch 的 master 选举流程？"></a>Elasticsearch 的 master 选举流程？</h3><ul><li>Elasticsearch的选主是ZenDiscovery模块负责的，主要包含Ping（节点之间通过这个RPC来发现彼此）<br>和Unicast（单播模块包含-一个主机列表以控制哪些节点需要ping通）这两部分。</li><li>对所有可以成为master的节点（node master: true）根据nodeId字典排序，每次选举每个节点都把自<br>己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是master节点。</li><li>如果对某个节点的投票数达到一定的值（可以成为master节点数n&#x2F;2+1）并且该节点自己也选举自己，<br>那这个节点就是master。否则重新选举一直到满足上述条件。</li><li>master节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data节点可以关闭http<br>功能。</li></ul><h3 id="Elasticsearch-集群脑裂问题？"><a href="#Elasticsearch-集群脑裂问题？" class="headerlink" title="Elasticsearch 集群脑裂问题？"></a>Elasticsearch 集群脑裂问题？</h3><p>“脑裂”问题可能的成因：</p><ul><li>网络问题：集群间的网络延迟导致一些节点访问不到master, 认为master 挂掉了从而选举出新的master,并对master上的分片和副本标红，分配新的主分片。</li><li>节点负载：主节点的角色既为master又为data,访问量较大时可能会导致ES停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</li><li>内存回收：data 节点上的ES进程占用的内存较大，引发JVM的大规模内存回收，造成ES进程失去响应。</li></ul><p>脑裂问题解决方案：</p><ul><li>减少误判：discovery.zen ping_ timeout 节点状态的响应时间，默认为3s，可以适当调大，如果master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如6s，discovery.zen.ping_timeout:6），可适当减少误判。</li><li>选举触发：discovery.zen.minimum. <em>master</em> nodes:1，该参數是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个數大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为(n &#x2F; 2) +1, n为主节点个数（即有资格成为主节点的节点个数）。</li><li>角色分离：即master节点与data节点分离，限制角色<ul><li>主节点配置为：node master: true，node data: false</li><li>从节点配置为：node master: false，node data: true</li></ul></li></ul><h3 id="Elasticsearch-索引文档的流程？"><a href="#Elasticsearch-索引文档的流程？" class="headerlink" title="Elasticsearch 索引文档的流程？"></a>Elasticsearch 索引文档的流程？</h3><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/1bdc6c30d1be9b1bff83a683c64d2ac7.png" alt="img"></p><ul><li>协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片：shard &#x3D; hash(document_id) % (num_of_primary_shards)</li><li>当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory Buffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 Memory Buffer 到 Filesystem Cache 的过程就叫做 refresh；</li><li>当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失， ES 是通过 translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystemcache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</li><li>在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync 将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。</li><li>flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；</li></ul><h3 id="Elasticsearch-更新和删除文档的流程？"><a href="#Elasticsearch-更新和删除文档的流程？" class="headerlink" title="Elasticsearch 更新和删除文档的流程？"></a>Elasticsearch 更新和删除文档的流程？</h3><ul><li>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</li><li>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</li><li>在新的文档被创建时， Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</li></ul><h3 id="Elasticsearch-搜索的流程？"><a href="#Elasticsearch-搜索的流程？" class="headerlink" title="Elasticsearch 搜索的流程？"></a>Elasticsearch 搜索的流程？</h3><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/053a14eee04ace7b4e5aec0ce53a5284.png" alt="img"></p><ul><li>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</li><li>在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。 PS：在搜索的时候是会查询Filesystem Cache 的，但是有部分数据还在 Memory Buffer，所以搜索是近实时的。</li><li>每个分片返回各自优先队列中 所有文档的 ID 和排序值 给协调节点，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li><li>接下来就是取回阶段， 协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并丰富文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。</li><li>Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少的时候可能不够准确， DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和 Document frequency，这个评分更准确，但是性能会变差。</li></ul><h3 id="Elasticsearch-在部署时，对-Linux-的设置有哪些优化方法？"><a href="#Elasticsearch-在部署时，对-Linux-的设置有哪些优化方法？" class="headerlink" title="Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？"></a>Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</h3><ul><li>64 GB 内存的机器是非常理想的， 但是 32 GB 和 16 GB 机器也是很常见的。少于 8 GB 会适得其反。</li><li>如果你要在更快的 CPUs 和更多的核心之间选择，选择更多的核心更好。多个内核提供的额外并发远胜过稍微快一点点的时钟频率。</li><li>如果你负担得起 SSD，它将远远超出任何旋转介质。 基于 SSD 的节点，查询和索引性能都有提升。如果你负担得起， SSD 是一个好的选择。</li><li>即使数据中心们近在咫尺，也要避免集群跨越多个数据中心。绝对要避免集群跨越大的地理距离。</li><li>请确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在 Elasticsearch 的几个地方，使用 Java 的本地序列化。</li><li>通过设置 gateway.recover_after_nodes、 gateway.expected_nodes、 gateway.recover_after_time 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟。</li><li>Elasticsearch 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。最好使用单播代替组播。</li><li>不要随意修改垃圾回收器（CMS）和各个线程池的大小。</li><li>把你的内存的（少于）一半给 Lucene（但不要超过 32 GB！），通过 ES_HEAP_SIZE 环境变量设置。</li><li>内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个 100 微秒的操作可能变成 10 毫秒。 再想想那么多 10 微秒的操作时延累加起来。 不难看出 swapping 对于性能是多么可怕。</li><li>Lucene 使用了大量的文件。同时， Elasticsearch 在节点和 HTTP 客户端之间进行通信也使用了大量的套接字。 所有这一切都需要足够的文件描述符。你应该增加你的文件描述符，设置一个很大的值，如 64,000。</li></ul><h3 id="GC-方面，在使用-Elasticsearch-时要注意什么？"><a href="#GC-方面，在使用-Elasticsearch-时要注意什么？" class="headerlink" title="GC 方面，在使用 Elasticsearch 时要注意什么？"></a>GC 方面，在使用 Elasticsearch 时要注意什么？</h3><p>倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segment memory 增长趋势。</p><p>各类缓存， field cache, filter cache, indexing cache, bulk queue 等等，要设置合理的大小，并且要应该根据最坏的情况来看 heap 是否够用，也就是各类缓存全部占满的时候，还有 heap 空间可以分配给其他任务吗？避免采用 clear cache 等“自欺欺人”的方式来释放内存。</p><p>避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用 scan &amp; scroll api 来实现。</p><p>cluster stats 驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过 tribe node 连接。</p><p>想知道 heap 够不够，必须结合实际应用场景，并对集群的 heap 使用情况做持续的监控。</p><h3 id="Elasticsearch-对于大数据量（上亿量级）的聚合如何实现？"><a href="#Elasticsearch-对于大数据量（上亿量级）的聚合如何实现？" class="headerlink" title="Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？"></a>Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？</h3><p>Elasticsearch 提供的首个近似聚合是 cardinality 度量。它提供一个字段的基数，即该字段的 distinct或者 unique 值的数目。它是基于 HLL 算法的。 HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</p><h3 id="在并发情况下，-Elasticsearch-如果保证读写一致？"><a href="#在并发情况下，-Elasticsearch-如果保证读写一致？" class="headerlink" title="在并发情况下， Elasticsearch 如果保证读写一致？"></a>在并发情况下， Elasticsearch 如果保证读写一致？</h3><ul><li>可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</li><li>另外对于写操作，一致性级别支持 quorum&#x2F;one&#x2F;all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。</li><li>对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片，确保文档是最新版本。</li></ul><h3 id="如何监控-Elasticsearch-集群状态？"><a href="#如何监控-Elasticsearch-集群状态？" class="headerlink" title="如何监控 Elasticsearch 集群状态？"></a>如何监控 Elasticsearch 集群状态？</h3><ol><li>elasticsearch-head 插件。</li><li>通过 Kibana 监控 Elasticsearch。你可以实时查看你的集群健康状态和性能，也可以分析过去的集群、索引和节点指标</li></ol><h3 id="是否了解字典树？"><a href="#是否了解字典树？" class="headerlink" title="是否了解字典树？"></a>是否了解字典树？</h3><p>字典树又称单词查找树， Trie 树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p><p>Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。它有 3 个基本性质：</p><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ul><p>对于中文的字典树，每个节点的子节点用一个哈希表存储，这样就不用浪费太大的空间，而且查询速度上可以保留哈希的复杂度 O(1)。</p><h3 id="Elasticsearch-中的集群、节点、索引、文档、类型是什么？"><a href="#Elasticsearch-中的集群、节点、索引、文档、类型是什么？" class="headerlink" title="Elasticsearch 中的集群、节点、索引、文档、类型是什么？"></a>Elasticsearch 中的集群、节点、索引、文档、类型是什么？</h3><ul><li>集群是一个或多个节点（服务器）的集合，它们共同保存您的整个数据，并提供跨所有节点的联合索引和搜索功能。群集由唯一名 称标识，默认情况下为”elasticsearch”。此名称很重要，因为如果节点设置为按名称加入群集，则该节点只能是群集的一部分。</li><li>节点是属于集群一部分的单个服务器。它存储数据并参与群集索引和搜索功能。</li><li>索引就像关系数据库中的“数据库”。它有一个定义多种类型的映射。索引是逻辑名称空间，映射到一个或多个主分片，并且可以有零个或多个副本分片。MySQL &#x3D;&gt;数据库，Elasticsearch&#x3D;&gt;索引。</li><li>文档类似于关系数据库中的一行。不同之处在于索引中的每个文档可以具有不同的结构(字段)，但是对于通用字段应该具有相同的数据类型。MySQL &#x3D;&gt; Databases &#x3D;&gt; Tables &#x3D;&gt; Columns &#x2F; Rows，Elasticsearch&#x3D;&gt; Indices &#x3D;&gt; Types &#x3D;&gt;具有属性的文档Doc。</li><li>类型是索引的逻辑类别&#x2F;分区，其语义完全取决于用户。</li></ul><h3 id="Elasticsearch-中的倒排索引是什么？"><a href="#Elasticsearch-中的倒排索引是什么？" class="headerlink" title="Elasticsearch 中的倒排索引是什么？"></a>Elasticsearch 中的倒排索引是什么？</h3><p>倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。ES中的倒排索引其实就是 lucene 的倒排索引，区别于传统的正向索引， 倒排索引会再存储数据时将关键词和数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker安装的mysql来安装hive</title>
      <link href="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/"/>
      <url>/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/</url>
      
        <content type="html"><![CDATA[<h1 id="首先安装mysql"><a href="#首先安装mysql" class="headerlink" title="首先安装mysql"></a>首先安装mysql</h1><h2 id="用mysql-5-7举例"><a href="#用mysql-5-7举例" class="headerlink" title="用mysql:5.7举例"></a>用mysql:5.7举例</h2><h3 id="1可以先在docker-hub上查找mysql的镜像"><a href="#1可以先在docker-hub上查找mysql的镜像" class="headerlink" title="1可以先在docker hub上查找mysql的镜像"></a>1可以先在docker hub上查找mysql的镜像</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">docker search mysql</code></pre><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190015919.png" alt="image-20220524190015919"></p><h3 id="2，我这次安装的mysql-5-7"><a href="#2，我这次安装的mysql-5-7" class="headerlink" title="2，我这次安装的mysql:5.7"></a>2，我这次安装的mysql:5.7</h3><p>所以直接从docker hub上拉取mysql:5.7</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7</code></pre><h3 id="3-运行mysql"><a href="#3-运行mysql" class="headerlink" title="3,运行mysql"></a>3,运行mysql</h3><blockquote><p>#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！<br>#官方测试：docker run –name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag<br>#启动：<br>-d        后台运行<br>-p        端口映射<br>-v        卷挂载<br>-e        环境配置<br>–name    容器名字</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql0 mysql:5.7</code></pre><h3 id="4-查看容器是否创建成功"><a href="#4-查看容器是否创建成功" class="headerlink" title="4,查看容器是否创建成功"></a>4,查看容器是否创建成功</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token function">docker</span> <span class="token function">ps</span></code></pre><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190023030.png" alt="image-20220524190023030"><br>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器的id /bin/bash</code></pre><h3 id="5，使用navicat连接服务器或虚拟机上的mysql"><a href="#5，使用navicat连接服务器或虚拟机上的mysql" class="headerlink" title="5，使用navicat连接服务器或虚拟机上的mysql"></a>5，使用navicat连接服务器或虚拟机上的mysql</h3><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190032705.png" alt="image-20220524190032705"></p><h2 id="开始安装hive"><a href="#开始安装hive" class="headerlink" title="开始安装hive"></a>开始安装hive</h2><p>前提条件：</p><blockquote><p>在虚拟机或是服务器上安装好hadoop 2.7.3的环境<br>安装好mysql5：7<br>在mysql中创建一个名为hive的数据库</p></blockquote><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190037826.png" alt="image-20220524190037826"></p><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><p>1，去官网下载hive安装文件，下载地址 ：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">hive 下载地址</a>apache-hive-2.3.9-bin.tar.gz<br>2，将hive安装文件上传到虚拟机或是服务器的~&#x2F;soft目录下，解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/soft$ <span class="token function">tar</span> -zxvf apache-hive-2.3.9-bin.tar.gz</code></pre><p>3，创建软连接：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s apache-hive-2.3.9-bin hive</code></pre><p>4，配置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc</code></pre><p>文件添加以下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意：一定不要打错！ 可以在操作之前拍个快照。</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=~</span>/soft/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HIVE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p>使配置文件生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>5，配置hive-site.xml(没有这个文件直接vim就可以创建)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hive/conf<span class="token function">vim</span> hive-site.xml</code></pre><p>将以下内容添加到xml文件中</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--数据库驱动  如果你使用的是8.x  驱动是：com.mysql.cj.jdbc.Driver--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--数据库的用户名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--数据库的密码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>6，将mysql的驱动文件拷贝到hive&#x2F;lib目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql-connection-java-5.1.46.jar ~/soft/hive/lib</code></pre><p>7，初始化Mysql</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name schematool/root/soft/apache-hive-2.3.9-bin/bin/schematool -dbType mysql -initSchema</code></pre><p>可以看到已经正确完成初始化了。<br><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190045119.png" alt="image-20220524190045119"></p><p>如果初始化不成功，可能是hadoop的版本问题。hadoop3.  * 和hive 3 .*会出现</p><pre class="language-bash" data-language="bash"><code class="language-bash">Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument<span class="token punctuation">(</span>ZLjava/lang/String<span class="token punctuation">;</span>Ljava/lang/Object<span class="token punctuation">;</span><span class="token punctuation">)</span>V    at org.apache.hadoop.conf.Configuration.set<span class="token punctuation">(</span>Configuration.java:1357<span class="token punctuation">)</span>    at org.apache.hadoop.conf.Configuration.set<span class="token punctuation">(</span>Configuration.java:1338<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.setJar<span class="token punctuation">(</span>JobConf.java:536<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.setJarByClass<span class="token punctuation">(</span>JobConf.java:554<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>JobConf.java:448<span class="token punctuation">)</span>    at org.apache.hadoop.hive.conf.HiveConf.initialize<span class="token punctuation">(</span>HiveConf.java:5141<span class="token punctuation">)</span>    at org.apache.hadoop.hive.conf.HiveConf.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveConf.java:5099<span class="token punctuation">)</span>    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4jCommon<span class="token punctuation">(</span>LogUtils.java:97<span class="token punctuation">)</span>    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4j<span class="token punctuation">(</span>LogUtils.java:81<span class="token punctuation">)</span>    at org.apache.hadoop.hive.cli.CliDriver.run<span class="token punctuation">(</span>CliDriver.java:699<span class="token punctuation">)</span>    at org.apache.hadoop.hive.cli.CliDriver.main<span class="token punctuation">(</span>CliDriver.java:683<span class="token punctuation">)</span>    at sun.reflect.NativeMethodAccessorImpl.invoke0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun.reflect.NativeMethodAccessorImpl.invoke<span class="token punctuation">(</span>NativeMethodAccessorImpl.java:62<span class="token punctuation">)</span>    at sun.reflect.DelegatingMethodAccessorImpl.invoke<span class="token punctuation">(</span>DelegatingMethodAccessorImpl.java:43<span class="token punctuation">)</span>    at java.lang.reflect.Method.invoke<span class="token punctuation">(</span>Method.java:483<span class="token punctuation">)</span>    at org.apache.hadoop.util.RunJar.run<span class="token punctuation">(</span>RunJar.java:323<span class="token punctuation">)</span>    at org.apache.hadoop.util.RunJar.main<span class="token punctuation">(</span>RunJar.java:236<span class="token punctuation">)</span></code></pre><p>错误原因：系统找不到这个类所在的jar包或者jar包的版本不一样系统不知道使用哪个。hive启动报错的原因是后者</p><p>解决办法：</p><p>1、com.google.common.base.Preconditions.checkArgument这个类所在的jar包为：guava.jar</p><p>2、hadoop-3.2.1（路径：hadoop\share\hadoop\common\lib）中该jar包为 guava-27.0-jre.jar；而hive-3.1.2(路径：hive&#x2F;lib)中该jar包为guava-19.0.1.jar</p><p>3、将jar包变成一致的版本：删除hive中低版本jar包，将hadoop中高版本的复制到hive的lib中。</p><p>再次启动问题得到解决！</p><p>可以测试hive是否安装成功，开启hive之前要先开启hadoop</p><p>可以测试hive是否安装成功，开启hive之前要先开启hadoop</p><pre class="language-bash" data-language="bash"><code class="language-bash">start-all.shhive</code></pre><p>可以看到安装成功了。<br><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190049670.png" alt="image-20220524190049670"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> mysql </category>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> mysql </tag>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Springboot项目</title>
      <link href="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>首先：我是参考着几篇博客：</p><blockquote><p><a href="https://blog.csdn.net/hangao233/article/details/104395693">https://blog.csdn.net/hangao233/article/details/104395693</a><br><a href="https://www.jianshu.com/p/397929dbc27d">https://www.jianshu.com/p/397929dbc27d</a></p></blockquote><h2 id="第一步：先在虚拟机或服务器上安装docker服务"><a href="#第一步：先在虚拟机或服务器上安装docker服务" class="headerlink" title="第一步：先在虚拟机或服务器上安装docker服务"></a>第一步：先在虚拟机或服务器上安装docker服务</h2><blockquote><p>要安装Docker Engine，您需要CentOS 7或8的维护版本。不支持或未测试存档版本。</p></blockquote><h3 id="1，卸载旧版本"><a href="#1，卸载旧版本" class="headerlink" title="1，卸载旧版本"></a>1，卸载旧版本</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>yum报告没有安装这些软件包就可以了。</p><h3 id="2，安装docker软件包"><a href="#2，安装docker软件包" class="headerlink" title="2，安装docker软件包"></a>2，安装docker软件包</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum install <span class="token operator">-</span>y yum-utils</code></pre><h3 id="3-设置镜像仓库地址"><a href="#3-设置镜像仓库地址" class="headerlink" title="3,设置镜像仓库地址"></a>3,设置镜像仓库地址</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 默认是国外的</span>sudo yum-config-manager \    <span class="token operator">--</span><span class="token function">add-repo</span> \    https:<span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com/linux/centos/docker-ce<span class="token punctuation">.</span>repo    <span class="token comment"># 换成阿里云镜像地址</span>sudo yum-config-manager \    <span class="token operator">--</span><span class="token function">add-repo</span> \    http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/docker-ce/linux/centos/docker-ce<span class="token punctuation">.</span>repo</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391191.png" alt="在这里插入图片描述"></p><h3 id="4-安装最新版Docker-Engine容器"><a href="#4-安装最新版Docker-Engine容器" class="headerlink" title="4,安装最新版Docker Engine容器"></a>4,安装最新版Docker Engine容器</h3><p>安装前建议先将将服务器上的软件包信息现在本地缓存,以提高安装软件的速度</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum makecache fast</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391202.png" alt="在这里插入图片描述"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker-ce社区版(docker-ee企业版)</span>sudo yum install docker-ce docker-ce-<span class="token function">cli</span> containerd<span class="token punctuation">.</span>io</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391203.png" alt="在这里插入图片描述">安装完成后，Docker只安装但并未启动</p><h3 id="5，启动Docker"><a href="#5，启动Docker" class="headerlink" title="5，启动Docker"></a>5，启动Docker</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo systemctl <span class="token function">start</span> docker</code></pre><p>然后可用docker version命令测试Docker是否安装成功，并查看Docker的版本信息<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391204.png" alt="在这里插入图片描述"></p><h2 id="第二步：使用Docker安装mysql：5-7"><a href="#第二步：使用Docker安装mysql：5-7" class="headerlink" title="第二步：使用Docker安装mysql：5.7"></a>第二步：使用Docker安装mysql：5.7</h2><h3 id="1可以先在docker-hub上查找mysql的镜像"><a href="#1可以先在docker-hub上查找mysql的镜像" class="headerlink" title="1可以先在docker hub上查找mysql的镜像"></a>1可以先在docker hub上查找mysql的镜像</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">docker search mysql</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391205.png" alt="在这里插入图片描述"></p><h3 id="2，我这次安装的mysql-5-7"><a href="#2，我这次安装的mysql-5-7" class="headerlink" title="2，我这次安装的mysql:5.7"></a>2，我这次安装的mysql:5.7</h3><p>所以直接从docker hub上拉取mysql:5.7</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7</code></pre><h3 id="3-运行mysql"><a href="#3-运行mysql" class="headerlink" title="3,运行mysql"></a>3,运行mysql</h3><blockquote><p>#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！<br>#官方测试：docker run –name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag<br>#启动：<br>-d        后台运行<br>-p        端口映射<br>-v        卷挂载<br>-e        环境配置<br>–name    容器名字</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql0 mysql:5.7</code></pre><h3 id="4-查看容器是否创建成功"><a href="#4-查看容器是否创建成功" class="headerlink" title="4,查看容器是否创建成功"></a>4,查看容器是否创建成功</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token function">docker</span> <span class="token function">ps</span></code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/79fbe2e581464313ac4e2e16a5881de6.png" alt="在这里插入图片描述"><br>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器的id /bin/bash</code></pre><h3 id="5，使用navicat连接服务器或虚拟机上的mysql"><a href="#5，使用navicat连接服务器或虚拟机上的mysql" class="headerlink" title="5，使用navicat连接服务器或虚拟机上的mysql"></a>5，使用navicat连接服务器或虚拟机上的mysql</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_16,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h3 id="6，可以使用navicat提供的工具进行数据的传输"><a href="#6，可以使用navicat提供的工具进行数据的传输" class="headerlink" title="6，可以使用navicat提供的工具进行数据的传输"></a>6，可以使用navicat提供的工具进行数据的传输</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391206.png" alt="在这里插入图片描述"><br>然后可以看到数据已经传输成功：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_7,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h2 id="第三步：将springboot项目打包"><a href="#第三步：将springboot项目打包" class="headerlink" title="第三步：将springboot项目打包"></a>第三步：将springboot项目打包</h2><h3 id="1-准备springboot项目并进行打包"><a href="#1-准备springboot项目并进行打包" class="headerlink" title="1.准备springboot项目并进行打包"></a>1.准备springboot项目并进行打包</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/f53c09f8ac344b67a7bf12cc9523be51.png" alt="在这里插入图片描述"><br>打包成功会看到出现一个target的目录，里面的jar包就是我们刚刚打包好的<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_12,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>然后对yml文件进行编辑：<br><img src="https://img-blog.csdnimg.cn/00ff466ca3a44d45a72ef9bb31436eff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="2-编写DockerFile文件"><a href="#2-编写DockerFile文件" class="headerlink" title="2.编写DockerFile文件"></a>2.编写DockerFile文件</h3><p>在idea的插件市场搜索docker，并安装<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391218.png" alt="在这里插入图片描述"><br>然后在根目录下新建一个Dockerfile的文件：<br><img src="https://img-blog.csdnimg.cn/2ba3235b3d7447769b88c024bc970b91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>如果显示是这样的说明docker那个插件下载安装成功，然后编写Dockerfile文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">FROM            <span class="token comment">#基础镜像，一切从这里开始构建。</span>MAINTAINER      <span class="token comment">#镜像是谁写的，姓名+邮箱</span>RUN             <span class="token comment">#镜像构建的时候需要运行的命令</span>ADD             <span class="token comment">#步骤：tomcat镜像，这个tomcat压缩包！添加内容</span>WORKDIR         <span class="token comment">#镜像的工作目录</span>VOLUME          <span class="token comment">#挂载的目录</span>EXPOST          <span class="token comment">#保留端口配置</span>CMD             <span class="token comment">#指定这个容器启动的时候要运行的命令，只有一个会生效，可被替代。</span>ENTRYPOINT      <span class="token comment">#指定这个容器启动的时候要运行的命令，可以追加命令。</span>ONBUILD         <span class="token comment">#当构建一个被集成DockerFile这个时候就会运行ONBUILD的指令。触发指令。</span>COPY            <span class="token comment">#类似ADD，将我们文件拷贝到镜像中。</span>ENV             <span class="token comment">#构建的时候设置环境变量。</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0a3908d1f29d4d9da5ebb9ba5a575133.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/38da9bf783b040aebe4d99acac03e73e.png" alt="在这里插入图片描述"></p><h3 id="3-构建镜像"><a href="#3-构建镜像" class="headerlink" title="3.构建镜像"></a>3.构建镜像</h3><p>使用xftp将刚才打包的jar包还有编写的Dockerfile文件上传到虚拟机或是服务器</p><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-165328623912110.png" alt="在这里插入图片描述"><br>然后使用命令构建镜像：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment"># ls</span>Dockerfile  onlineExam-0.0.1-SNAPSHOT.jar<span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment"># docker build -t onlineexam .</span>Sending build context to Docker daemon  <span class="token number">16</span>.55MBStep <span class="token number">1</span>/5 <span class="token builtin class-name">:</span> FROM java:8<span class="token number">8</span>: Pulling from library/java5040bd298390: Pull complete fce5728aad85: Pull complete 76610ec20bf5: Pull complete 60170fec2151: Pull complete e98f73de8f0d: Pull complete 11f7af24ed9c: Pull complete 49e2d6393f32: Pull complete bb9cdec9c7f3: Pull complete Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9dStatus: Downloaded newer image <span class="token keyword">for</span> java:8 ---<span class="token operator">></span> d23bdf5b1b1bStep <span class="token number">2</span>/5 <span class="token builtin class-name">:</span> COPY *.jar /app.jar ---<span class="token operator">></span> 63fda5bdcb6dStep <span class="token number">3</span>/5 <span class="token builtin class-name">:</span> CMD <span class="token punctuation">[</span><span class="token string">"--server.port=8888"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 5e94d333492dRemoving intermediate container 5e94d333492d ---<span class="token operator">></span> 59bd2f4e0120Step <span class="token number">4</span>/5 <span class="token builtin class-name">:</span> EXPOSE <span class="token number">8888</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 99c4427313deRemoving intermediate container 99c4427313de ---<span class="token operator">></span> d4792bf4f884Step <span class="token number">5</span>/5 <span class="token builtin class-name">:</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> da3be5f92a55Removing intermediate container da3be5f92a55 ---<span class="token operator">></span> 2df101d6382cSuccessfully built a42985afa2f3Successfully tagged onlineexam:latest</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_18,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>然后可以使用docker images 展示刚刚构建好的镜像<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/cc0a3049f0aa4b72bd8c0e3d285bb031.png" alt="在这里插入图片描述"></p><h3 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment">#  docker run -d -p 8888:8888 onlineexam</span>-d参数是让容器后台运行 -p 是做端口映射，此时将服务器中的8888端口映射到容器中的8888<span class="token punctuation">(</span>项目中端口配置的是8888<span class="token punctuation">)</span>端口</code></pre><p>然后使用docker ps查看一下：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/21d51a487203489280b5bdbd1863d600.png" alt="在这里插入图片描述"><br>ok，到此启动成功了！<br>由于我此此的springboot项目使用了redis。你们可以选择使用docker安装，还可以参考一下我的这个<a href="https://blog.csdn.net/m0_49683806/article/details/123359905?spm=1001.2014.3001.5501">centos 7安装redis</a></p><h2 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h2><p>因为我springboot使用了swagger（现在是knife4j），所以我在浏览器测试是否可以打开：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-165328623912211.png" alt="在这里插入图片描述"><br>ok，测试一下功能都ok了。<br>到此就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ELK</title>
      <link href="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/"/>
      <url>/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装ElasticSearch"><a href="#Docker-安装ElasticSearch" class="headerlink" title="Docker 安装ElasticSearch"></a>Docker 安装ElasticSearch</h1><h2 id="我是参考这几篇博客。"><a href="#我是参考这几篇博客。" class="headerlink" title="我是参考这几篇博客。"></a>我是参考这几篇博客。</h2><p>参考这几篇博客，然后自己成功后，做一个记录。大家都可以去看看</p><blockquote><p><a href="https://blog.csdn.net/qq_40942490/article/details/111594267">https://blog.csdn.net/qq_40942490/article/details/111594267</a><br><a href="https://zhuanlan.zhihu.com/p/257867352">https://zhuanlan.zhihu.com/p/257867352</a><br><a href="https://www.cnblogs.com/fkaka/p/15205675.html">https://www.cnblogs.com/fkaka/p/15205675.html</a></p></blockquote><h2 id="第一步：确保你的虚拟机或者是服务器已经安装了Docker"><a href="#第一步：确保你的虚拟机或者是服务器已经安装了Docker" class="headerlink" title="第一步：确保你的虚拟机或者是服务器已经安装了Docker"></a>第一步：确保你的虚拟机或者是服务器已经安装了Docker</h2><p>没有安装的可以参考这个<a href="https://blog.csdn.net/m0_49683806/article/details/123687886">docker安装</a></p><h2 id="第二步：安装ElasticSearch"><a href="#第二步：安装ElasticSearch" class="headerlink" title="第二步：安装ElasticSearch"></a>第二步：安装ElasticSearch</h2><blockquote><p>这次安转的7.7.0的版本</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用docker 直接获取es的镜像</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull elasticsearch:7.7.0</code></pre><p>命令执行完后，使用docker images查看镜像是否拉取成功<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/31f368eec7704b16b146300b2e8c982c.png" alt="在这里插入图片描述"><br>ok，下载成功了！</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>镜像下载成功，使用镜像创建容器。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mydata/elasticsearch/config<span class="token function">mkdir</span> -p /mydata/elasticsearch/data/<span class="token function">mkdir</span> -p /mydata/elasticsearch/plugins<span class="token builtin class-name">echo</span> <span class="token string">"http.host: 0.0.0.0"</span> <span class="token operator">>></span> /mydata/elasticsearch/config/elasticsearch.yml<span class="token function">chmod</span> -R <span class="token number">777</span> <span class="token function">file</span></code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>注意：启动前需要在服务器新建下列文件夹，并且文件夹的权限要改成使用chmod -R 777 file修改文件读写权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 <span class="token punctuation">\</span>-e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span>  <span class="token punctuation">\</span>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\</span>-v /mydata/elasticsearch/data/:/usr/share/elasticsearch/data <span class="token punctuation">\</span>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span>-d elasticsearch:7.7.0</code></pre><p>参数说明：</p><pre class="language-bash" data-language="bash"><code class="language-bash">--name表示镜像启动后的容器名称  -d: 后台运行容器，并返回容器ID；-e: 指定容器内的环境变量-p: 指定端口映射，格式为：主机<span class="token punctuation">(</span>宿主<span class="token punctuation">)</span>端口:容器端口discovery.type<span class="token operator">=</span>single-node：单机运行如果启动不了，可以加大内存设置：-e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span></code></pre><p>使用<strong>docker ps</strong>查看一下：<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/bb814aac15b34062874942e5c796c697.png" alt="在这里插入图片描述"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>es默认端口为9200，只用ip地址+端口号直接访问，所以在浏览器中输入<strong>ip:9200</strong>，如果出现以下界面就是安装成功了！<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>ok！到此。ElasticSearch：7.7.0安装成功了！</p><h2 id="安装ElasticSeach的一些工具"><a href="#安装ElasticSeach的一些工具" class="headerlink" title="安装ElasticSeach的一些工具"></a>安装ElasticSeach的一些工具</h2><h3 id="安装ElasticSeach-head"><a href="#安装ElasticSeach-head" class="headerlink" title="安装ElasticSeach-head"></a>安装ElasticSeach-head</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>同样使用docker进行安装。先拉取镜像，使用下面的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拉取镜像</span><span class="token function">docker</span> pull mobz/elasticsearch-head:5</code></pre><p>使用docker images，查看镜像是否拉取成功<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/a91b2bdb91354507b28856d4294daa0b.png" alt="在这里插入图片描述"></p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建容器</span><span class="token function">docker</span> create --name elasticsearch-head -p <span class="token number">9100</span>:9100 mobz/elasticsearch-head:5<span class="token comment">#启动容器</span><span class="token function">docker</span> start elasticsearch-head</code></pre><ul><li>安装ElasticSearch时是容器创建成功后直接在后台就运行了，但在安装ElasticSearch-Head时并没有保持一致。</li><li>而是指定容器名，端口号就直接执行了，这样执行完成后是创建了一个容器，并没有运行。</li><li>所以还需要一个操作，那就是启动容器docker start 容器id。</li><li>安装完成直接使用域名加端口9100即可访问。<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532235677981.png" alt="在这里插入图片描述"><h4 id="处理跨域"><a href="#处理跨域" class="headerlink" title="处理跨域"></a>处理跨域</h4>在连接ElasticSearch会发现无法连接，由于时前后端分离开发，所以会存在跨域问题，需要在服务端做跨域处理。<br>执行命令<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it elasticsearch<span class="token punctuation">(</span>或者容器id<span class="token punctuation">)</span> /bin/bash</code></pre><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/dd291e0bc4404904a4de8a5be65fa5d2.png" alt="在这里插入图片描述"></li></ul><p>进入到第一步创建的ElasticSearch容器中，修改配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">vi/vim config/elasticsearch.yml</code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/f78978fb19f648c2b22c12f86a1d78e7.png" alt="在这里插入图片描述"><br>把这两行写进配置文件中(注意是yml配置文件)：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/2670d425cb5d4d3588300c71a10ffeb3.png" alt="在这里插入图片描述"><br>配置修改完后需执行命令exit退出容器，接着执行docker restart 容器ID重启容器即可。</p><h4 id="处理406和es-head不显示数据的问题"><a href="#处理406和es-head不显示数据的问题" class="headerlink" title="处理406和es-head不显示数据的问题"></a>处理406和es-head不显示数据的问题</h4><p>此时通过&#x3D;&#x3D; ElasticSearch-Head &#x3D;&#x3D;可以成功连接ElasticSearch了，但进行数据操作时会报406错误。</p><p>只需要修改&#x3D;&#x3D; ElasticSearch-Head &#x3D;&#x3D;容器中的配置即可，将配置文件复制到宿主机进行修改。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制vendor.js到外部</span><span class="token function">docker</span> <span class="token function">cp</span> 容器id:/usr/src/app/_site/vendor.js /usr/local/<span class="token comment">#修改vendor.js</span><span class="token function">vim</span> vendor.js</code></pre><p>进入到&#x2F;usr&#x2F;local即可看到从容器中复制出来的文件vendor.js。</p><p>修改文件第6886、7574行，将”application&#x2F;x-www-from-urlencodes”修改为”application&#x2F;json;charset&#x3D;UTF-8”即可<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532235677992.png" alt="在这里插入图片描述"></p><p>修改后再将文件复制到容器中，从容器复制文件到宿主机命令已经使用过了，那么现在只不过是把俩个目录反过来即可执行docker cp &#x2F;usr&#x2F;local&#x2F;vendor.js 容器ID:&#x2F;usr&#x2F;src&#x2F;app&#x2F;_site</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> /usr/local/vendor.js  容器id:/usr/src/app/_site</code></pre><p>最后一步重启ElasticSearch-Head容器就结束了。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart 容器id</code></pre><h3 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h3><blockquote><p>首先问一个问题，ElasticSearch中自带的有分词器为什么还要使用IK分词器？<br>在ElasticSearch中的分词器会把中文分为一个一个的字，例如”今天是周五”，会被分成“今”、“天”、“是”，“周”、“五”，这里很明显是不合适的，在大多数场景下需要的是词而不是字。<br>所以就需要安装中文分词器IK来解决这个问题。<br>IK提供了两个分词算法：ik_smart和ik_max_word，其中ik_smart为最少切分，ik_max_word为最细力度。<br>这里需要注意安装的版本需要跟ElasticSearch版本一致。</p></blockquote><h4 id="第一种离线安装"><a href="#第一种离线安装" class="headerlink" title="第一种离线安装"></a>第一种离线安装</h4><p>下载ik分词器压缩包：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip">ik分词器:7.7.0</a><br>使用xftp将分词器上传到服务器或者虚拟机中的&#x2F;tmp中</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将压缩包移动到容器中</span><span class="token function">docker</span> <span class="token function">cp</span> /tmp/elasticsearch-analysis-ik-7.7.0.zip elasticsearch:/usr/share/elasticsearch/plugins<span class="token comment">#进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it elasticsearch /bin/bash  <span class="token comment">#创建目录</span><span class="token function">mkdir</span> /usr/share/elasticsearch/plugins/ik<span class="token comment">#将文件压缩包移动到ik中</span><span class="token function">mv</span> /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-7.7.0.zip /usr/share/elasticsearch/plugins/ik<span class="token comment">#进入目录</span><span class="token builtin class-name">cd</span> /usr/share/elasticsearch/plugins/ik<span class="token comment">#解压</span><span class="token function">unzip</span> elasticsearch-analysis-ik-7.7.0.zip<span class="token comment">#删除压缩包</span><span class="token function">rm</span> -rf elasticsearch-analysis-ik-7.7.0.zip</code></pre><p>退出并重启镜像</p><h4 id="第二种使用wget进行安装"><a href="#第二种使用wget进行安装" class="headerlink" title="第二种使用wget进行安装"></a>第二种使用wget进行安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip</code></pre><p>当你使用wget安装出现Unable to establish SSL connection时执行以下俩个命令即可。</p><p>yum install opensslls</p><p>yum install openssl-devel</p><p>执行cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins来到插件目录创建一个IK目录。</p><p>将压缩包移动到IK目录中，执行解压指令elasticsearch-analysis-ik-7.7.0.zip</p><p>接着删除压缩包即可，此时你可以看到一个config包和几个jar包</p><p>最后退出容器，重启重启容器即可。</p><h3 id="安装拼音分词器"><a href="#安装拼音分词器" class="headerlink" title="安装拼音分词器"></a>安装拼音分词器</h3><h1 id="Docker安装Kibana"><a href="#Docker安装Kibana" class="headerlink" title="Docker安装Kibana"></a>Docker安装Kibana</h1><h2 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h2><p>一定要确保kibana的版本和你安装的ES的版本是一致的。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull kibana:7.7.0</code></pre><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mydata/kibana/config/<span class="token function">vi</span> /mydata/kibana/config/kibana.yml</code></pre><p>将以下内容写进去</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span><span class="token comment"># ** THIS IS AN AUTO-GENERATED FILE **</span><span class="token comment">#</span><span class="token comment"># Default Kibana configuration for docker target</span>server.name: kibanaserver.host: <span class="token string">"0"</span><span class="token comment"># ip 改成自己的</span>elasticsearch.hosts: <span class="token punctuation">[</span> <span class="token string">"http://10.111.43.55:9200"</span> <span class="token punctuation">]</span>xpack.monitoring.ui.container.elasticsearch.enabled: <span class="token boolean">true</span></code></pre><p><strong>注意：请根据实际情况，修改elasticsearch地址。</strong></p><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>  --name<span class="token operator">=</span>kibana <span class="token punctuation">\</span>  --restart<span class="token operator">=</span>always <span class="token punctuation">\</span>  -p <span class="token number">5601</span>:5601 <span class="token punctuation">\</span>  -v /mydata/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml <span class="token punctuation">\</span>  kibana:7.7.0</code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs -f kibana</code></pre><p>如果出现以下信息、说明启动成功了。</p><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210327307.png" alt="image-20220522210327307"></p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;10.111.43.55:5601</code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210416546.png" alt="image-20220522210416546"></p><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210443222.png" alt="image-20220522210443222"></p><p>ok 安装成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> ElasticSearch </category>
          
          <category> Kibana </category>
          
          <category> Docker </category>
          
          <category> Logstash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> Kibana </tag>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思想汇报</title>
      <link href="/2022/05/20/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/"/>
      <url>/2022/05/20/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>​        公元2021年，对于中国共产党和中国人民来说，是极度不平凡的一年。因为今年是中国共产党成立的一百周年。一百年前，浙江嘉兴南湖的一条小船上，先进的中国共产党应运而生，将中国这头沉睡已久的东方巨龙唤醒，犹如黑夜中的一道闪电在东方闪烁，照亮了当时黑暗的中国社会，同时也照亮了中国通向未来的繁荣大道的方向。自此，中国迎来了新的征程。</p><p>​        近代的中国可谓是受尽屈辱，从第一次鸦片战争开始，外国侵略者使用坚船利炮轰开中国的大门，迫使我们签署屈辱的不平等合约。我们这个国家，我们这个民族就一直在压迫和屈辱中度过。当然，我们不会坐以待毙，民族的很多有志之士进行了许许多多的自救行动，“洋务运动”、“戊戌变法”、“辛亥革命”、“新文化运动”等等。在经历了一个又一个的军阀想要复辟的情况下，中国正处于历史上最混乱，最黑暗的一段时期，人民的生活苦不堪言。随着俄国十月革命的一声炮响，        李大钊同志在研究了俄国历史后深受马克思主义的影响，在南下的逃亡中看到了无数苦难深重的人民，这些底层人民的暗无天日的生活，让李大钊痛心疾首。立志想要建立一个全国性质的能够拯救中国，能够让中国人民摆脱压迫，走出这种水深火热生活的政党。他将自己的所看到的，所思考的同自己的亲密“战友”陈独秀同志交流，两人一拍即合。而陈独秀在这么多年苦苦寻求能够拯救中国的药方的过程中，也逐渐确立了，只有马克思主义能够救中国，只有效仿俄国十月革命，才能使破旧不堪的救中国重获新生，在这样的情况下，南陈北李相约建党。</p><p>​        回顾党的百年历史。我们不仅要了解中国共产党的历史，更要从这百年历史中学习到很多宝贵的东西。要明白中国共产党这一路走来并不都是一帆风顺的，更多的是艰难险阻。而当遇到这些困难的时候，靠的就是那些不屈不挠的坚定的信念。</p><p>​        前段时间热播的电视剧《觉醒年代》，让我看的热泪盈眶，那些历史书上原本厚重的名字，现在一个个活灵活现的出现在我的面前。跟随着先辈们，一同在那些混乱黑暗的社会中经历。有一幕我记得特别清楚，李大钊和陈独秀去散发《北京市民宣言》，陈独秀自己则爬上顶楼，将传单奋力抛散并大声演说。呼吁同胞们团结起来，坚决抵制无耻的《巴黎和约》。不怕被警察逮捕，宁愿牺牲自己。也想让当时的人们觉醒。他们的信念是多么的坚定。</p><p>​        我们新时代的年轻人，要推崇这样的坚定的信念。我们应该在以后生活中不断的完善自己的信念，将自己和国家，和人民紧密的联系在一起。可以先从简单的做起，比如坚持，就拿我自己来说，好多时候都是三分钟热度。有些虽然也能坚持下去，但是到了后期就是会很乏力，虽然对自己这个方面有了解，但还是会放纵自己。所以一定要坚持。再比如担当，不能过分计较自己的那些小小的得失，大的方面应该是，将民族，国家时刻放在心中的第一位，要相信我们能成为中国社会主义的接班人。简单来说，就是在班级和宿舍生活中，为同学服务啊。当然最重要的还是要做好自己的本职工作，现在的身份是学生，当然是要学习，并且不能满足于课堂上的知识。要拓展自己的知识面，不能好高骛远，也不能妄自菲薄。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>尊敬的党组织：</p><p>​        当时光的脚步又一次来到九月，新的学年就又开始了，不知不觉之间大学又过去了一年的时间，但是当我上个学年成为一名入党积极分子，参加了入党积极分子的各种的培训后，我对于党员的认识又更近了一步，我明白了共产党的宗旨是“全心全意为人民服务”、我明白党的各种思想离我不再是那么的遥远，那么的晦涩和难懂。这些东西时时刻刻的体现在我们生活中的方方面面、明白了党员是很平凡的，他们从人民中产生，徘徊在群众之间。但是他们带领人民脱贫攻坚，在各个方面起着模范带头的作用。我想要成为一名光荣的共产党员的心情越来越热切。</p><p>​        回首刚刚过去的那个学年，有得有失，但是总体上还是积极向上的，在假期的时候，对于刚放假时制定的那些计划，只是完成的七七八八。对于没有完美的完成，对此我很懊恼，由此可以看出自己的自控力还没有很好，处于家里面那样安逸的环境中，总是会让人忘乎所以，变得颓废，我有愧于入党积极分子这个身份，以上是我对刚过去的假期的反思。</p><p>​        而在其他方面，尤其是政治理论基础很薄弱，理论联系实际的能力并不是很好。这应该是在上个学年中对这个方面的学习程度不够。</p><p>​        尤其是当上一次提交思想汇报的时候，书记向我们提问党章的有关内容，我们却一点都不清楚。身为入党积极分子的我们倍感羞愧。因此，我认真阅读了党章。对党的性质、理想目标、指导思想、基本要求以及党员义务权利有的更深的理解。更加坚定了自己的理想信念。</p><p>​         身为一名入党积极分子，我们应该时时刻刻以一名优秀党员的标准来要求自己，认真学习党的历史，性质，奋斗目标，建党宗旨，组织制度和组织原则等基本知识。遵守党章、贯彻党章，用党章指导实践，还应该经常阅读有关党建、党史及党员先进事迹的书籍和报刊等，不断加强对党路线、方针政策的认识和理解。提升自己的党性修养，认真学习全面提高能力，使我们能够在错综复杂的新时代有清楚的认知。</p><p>​        新的学期开始了，每个人都有自己的目标与计划，当然我也不例外。</p><p>​        虽然本学期的课程并不是很繁重，但是我知道并不能满足于完成课业就好，我还有很多的事情要去做。并且不能只停留在纸面计划或是脑海想象中，要在实际生活中严格做到。</p><p>​        因此，我对自己提出以下要求：在学习上，肯定是一点都不能马虎，认认真真的对待每一节课，在完成课程安排上的任务后，要把精力放在那些自己一直没有做好的事情上，比如自己的四级，还没有通过，所以一定要好好的准备，争取下次通过。然后就是考研，现在大三了。要开始准备了。在生活中，更加的乐于助人，乐观积极，为身边的同学做好表率。工作上，要主动的配合班级上的安排，要改变过去的那种“事不关己高高挂起”的态度，对每件事情都要态度认真，积极参与，为不断建设一个积极向上的班集体而努力。在思想上，要认真学习上级组织的各项精神，不断提升自己的思想面貌，并且多多关注国内外的大事，并多多思考，比如在学习强国上认真提升思想觉悟。争取早日达到党组织的要求成为一名光荣的共产党员。</p><p>​        以上是我这个季度的思想汇报，作为一名新时代的青年大学生，有志于用自己知识，技能去报效祖国，建设社会。身为入党积极分子要时刻不忘党章的要求，坚持做到自重、自警、自律。希望党组织在各个方面能够给予我批评和指正，我一定会虚心接受并积极改正，不断在各个方面严格要求自己，并为成为一名光荣的共产党员而努力，请党组织在实践中考验我！</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>敬爱的党组织：</p><p>​       通过这段时间的学习，我对党组织的了解也越来越多，无论是在党的理论方面的学习，还是思想方面的理解，我认为我都有了一定的进步。随着对中国共产党有了更多的了解，对党组织更加崇敬和热爱，也更加坚定了我努力学习的决心。</p><p>​       在对党组织的认识上， 作为一名积极分子，我积极学习党组织的新思想，努力向党组织靠拢。前段时间召开的中国共产党第19届中央委员会第六次全体会议，为了更加深刻地了解党组织，我搜索了许多关于此次会议的资料，我了解到，该会议的重点是关于研究总结党的百年奋斗的重大成就和历史经验问题。一年多来，国内疫情防控和经济社会发展各项任务非常的繁重和艰巨。但是在中国共产党的正确领导下，中华民族打赢了这场艰难的战役。纵观我们党的百年历史，我们能够经历磨难，不断地创造辉煌的重要的原因就是无数的共产党人不忘初心，牢记使命，坚定不移地为之奉献。所以我更要积极学习党的19届六中全会的精神，坚持以马克思列宁主义，毛泽东思想，中国特色社会主义理论体系为指导，将理论用于实践，在实践中学习这些思想。</p><p>​      在思想感悟上，我要加强思想道德修养，树立远大理想。在学习之余，我也经常通过网络，例如学习强国等软件，了解关于党的新消息，关心着国家大事。我要牢记历史，坚定理想信念，牢记党和人民的初心使命。随着《长津湖》《觉醒年代》等主旋律影视作品的大火，中国共产党的百年奋斗历史也深深地震撼着我。作为21世纪的新青年，我再次感觉到了中国共产党的伟大，每一个片段、每一次伟人的演讲，都让我热血沸腾、热泪盈眶。同时我也更加珍惜现在的幸福生活，现在的我们吃得饱穿得暖，能够享受良好的教育，无一不是伟大的中国共产党奋斗的结果。生活在这样美好的时代，我觉得自己很幸福，要让自己的生活更有意义，更应该树立远大的理想和追求，然后为了理想努力地奋斗。</p><p>​        在学习上，我要增强自己的创新精神，加强对实际应用知识的学习，提高自己的学习效率。还要提升专业知识能力，拓宽自己的知识面，并且要善于将理论与实际相结合，坚持实践才是检验真理的唯一标准，要相信实践出真知的道理，千万不能机械式地背书学习。我也认识到自己的学习与理解水平还有待提高，因此更加不能松懈，要做到严格要求自己，无论是日常的学习，期末考试，还是将来的研究生考试，都要付出百分之百的努力，不断奋斗，做到无愧于心。</p><p>​        通过以上总结，我也深刻认识到了自己的不足。虽然我对政治有一定的了解，但理解的很大一部分还是表面，没有认真领会其中的深刻含义，对理论的理解也没有及时地结合社会实践。除此之外，我还没有做到完全的自我约束和监督，在一些工作上的积极性不强，这些都是我需要改正的问题。我相信，跟随着党的脚步，我会努力改掉学习和生活中不良习惯，成为更好的自己。</p><p>​        以上便是我这段时间以来的思想情况，在学习了十九届六中会议后，我进一步加深了对于中国共产党的认识。所以我更要继续以一名优秀党员的身份严格要求自己，在各个方面争取发挥带头作用，不断的提升自己。恳请党组织给予批评和指正。我会认真吸取并改正。</p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>敬爱的党组织：</p><p>​        通过这段时间的学习。我对于党的思想和宗旨的学习和领悟又有了更深一层的理解。与此同时，在党的思想的指导下，我的思想道德行为素质也有了较大程度的提升。尤其是寒假在家与之后的志愿者服务之后，看到了许许多多优秀的共产党员为了老百姓的平安幸福，舍小家为大家。我更加明白中国共产党是一心为人民服务的，时刻保卫着人民的幸福安定生活，为人民谋幸福。</p><p>​        思想上，在学习了更多的党的知识与亲眼见证到了疫情隔离期间很多村委的优秀的共产党员努力的组织疫情防控工作后，我认识到中国共产党人一直是吃苦在前，享受在后的。当苦难来临的时候，当疫情又一次的气势汹汹的袭来的时候。冲锋在第一线的永远都是中国共产党员。为人民服务，中国共产党任何时候都是把把人民的利益放在第一位的，为此，无数共产党员前仆后继，不懈努力，为了人民的幸福，国家的富强而奋斗。我们身为新时代的青年，要有责任和担当，肩负起属于我们这一代人的责任。</p><p>​        学习上，仍旧保持着自律，因为开学就要大三下了。然后考研的时间也所剩不多。所以在家积极学习专业的知识，提升自己，在家的效率虽然不高，但是我仍然坚持学习了很多，比如：RabbitMq、Docker和ElasticSearch等。而且，在学校还有一些项目没有做完，在家也一直在坚持写。我的专业的技能有了很多的提高。同时，我也在进行文化课的学习，每天坚持背单词，然后四级终于过了。这让我明白，只有坚持。会有好的结果的。前提是自律。所以我们要保持的自律。始终督促自己向好的方向发展。所以在开学后，在决定考研之后，每天坚持早起，然后学习。虽然很累，但是一定要坚持。而且现在的程度比我的其他的同学根本不值一提。所以才更要更加努力。</p><p>​        在日常生活和工作中，我们要有不畏艰辛的拼搏精神和奉献精神。寒假期间我报名参加了社区的社区的志愿活动，虽然只是个在村口检查过往车辆的行程码和健康码这种微不足道的工作，但是，这种志愿活动让我感到很开心。因为我认为我正在向一个优秀共产党员的方向去靠拢。我体会到了党员的责任。我看到了我们中华民族在面对困难时的荣辱与共，看到了中国共产党能够齐心协力办大事的特质，看到了中国中产党为了人民的幸福平安的生活做出的不懈努力。身为新时代的青年，在党的思想和精神的指引下，我们原意，也有这个责任去为我们的国家、社会做出一些自己的贡献。</p><p>​        以上便是我近期在思想、学习、生活和工作等方面的汇报。在以后的学习和生活中，我会努力学习专业的文化知识、关心时事、努力提升自己，让自己能够可以为国家发展贡献出自己的力量。不断地向党组织靠拢，提升自己的觉悟，在日常生活中做一些自己力所能及的事情去帮助别人。当然，我现在还有许许多多的问题，距离成为一名优秀的共产党员还有很大的差距，希望党组织加强对我的培养和教育。</p>]]></content>
      
      
      <categories>
          
          <category> 思想汇报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思想汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 8 新特性</title>
      <link href="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="java-8"><a href="#java-8" class="headerlink" title="java 8"></a>java 8</h1><h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><blockquote><p>Lambda是一个&#x3D;&#x3D;匿名函数&#x3D;&#x3D;，我们可以把Lambda表达式理解为是一段&#x3D;&#x3D;可以传递的代码（将代码像数据一样传递）&#x3D;&#x3D;。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使java的语言表达能力得到了提升。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Intreger</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span><span class="token class-name">Integer</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Lambda 表达式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如：有个集合存储了员工信息。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如何将员工信息中工资，或年龄大于30的提取出来。</p><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//方式一</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//优化方式二： 匿名内部类</span>   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//优化方式三：Lambda 表达式</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//优化方式四：Stream API</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span><span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="Lambda-基础语法"><a href="#Lambda-基础语法" class="headerlink" title="Lambda 基础语法"></a>Lambda 基础语法</h2><blockquote><p>java8 中引入了一个新的操作符“-&gt;” ，该操作符称为箭头操作符或Lambda操作符。</p><p>​箭头操作符将Lambda表达式拆分为两部分。</p><p>左侧：Lambda 表达式中的参数列表</p><p>右侧：Lambda 表达式中所需执行的功能，即Lambda体</p></blockquote><h3 id="语法格式一"><a href="#语法格式一" class="headerlink" title="语法格式一"></a>语法格式一</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式一： 无参数，无返回值</span><span class="token comment">//() -> System.out.println("hello Lambda !");</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda02</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// jdk 1.7 之前。必须是final</span>        <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//System.out.println("hello world!"+ num++);  num++ 就报错。 默认 final int num = 0;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Lambda!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式-三"><a href="#语法格式-三" class="headerlink" title="语法格式 三"></a>语法格式 三</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式二：有一个参数，并且无返回值</span><span class="token comment">// (x) -> System.out.println(x);</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式三"><a href="#语法格式三" class="headerlink" title="语法格式三"></a>语法格式三</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式三：若只有一个参数，并且无返回值，肖括号可以省略不写</span><span class="token comment">// x -> System.out.println(x);</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式四"><a href="#语法格式四" class="headerlink" title="语法格式四"></a>语法格式四</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式五"><a href="#语法格式五" class="headerlink" title="语法格式五"></a>语法格式五</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式五：若Lambda体中只有一条语句。return 和 大括号都可以省略不写。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式六"><a href="#语法格式六" class="headerlink" title="语法格式六"></a>语法格式六</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为jvm的编译器可以通过上下文推断出，数据类型。即“类型推断”。</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span><span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Lambda-表达式需要“函数式接口”的支持"><a href="#Lambda-表达式需要“函数式接口”的支持" class="headerlink" title="Lambda 表达式需要“函数式接口”的支持"></a>Lambda 表达式需要“函数式接口”的支持</h2><blockquote><p>函数式接口：接口中只有一个抽象方法的接口，称为函数式接口。可以使用注解&#x3D;&#x3D;@FunctionalInterface&#x3D;&#x3D; 修饰</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">,</span><span class="token class-name">MyFun</span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda03</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先按照年龄排序，再按照姓名排序</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="对字符串进行处理"><a href="#对字符串进行处理" class="headerlink" title="对字符串进行处理"></a>对字符串进行处理</h3><pre class="language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//需求：用于处理字符串</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t\t\t\t\t\t hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">MyFunction</span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="对两个Long型的数据进行处理"><a href="#对两个Long型的数据进行处理" class="headerlink" title="对两个Long型的数据进行处理"></a>对两个Long型的数据进行处理</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span><span class="token class-name">T</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">op</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span> <span class="token operator">-></span> l1 <span class="token operator">+</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">op</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span> <span class="token operator">-></span> l1 <span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求：对于两个long类型的数字进行处理</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">op</span><span class="token punctuation">(</span><span class="token class-name">Long</span> l1<span class="token punctuation">,</span><span class="token class-name">Long</span> l2<span class="token punctuation">,</span><span class="token class-name">MyFunction2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h2><h3 id="Consumer-消费型接口-void-accept-T-t"><a href="#Consumer-消费型接口-void-accept-T-t" class="headerlink" title="Consumer : 消费型接口( void accept(T t);)"></a>Consumer<T> : 消费型接口( void accept(T t);)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Consumer&lt;T> 消费型接口</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">happy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> money <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happy</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>​     </p><h3 id="Supplier-供给型接口-T-get"><a href="#Supplier-供给型接口-T-get" class="headerlink" title="Supplier : 供给型接口(T get();)"></a>Supplier<T> : 供给型接口(T get();)</h3> <pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Supplier&lt;T> 供给型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numList <span class="token operator">=</span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：产生一些整数，并放入集合中</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Function-lt-T-R-gt-函数型接口-R-apply-T-t"><a href="#Function-lt-T-R-gt-函数型接口-R-apply-T-t" class="headerlink" title="Function &lt;T,R&gt;:  函数型接口(  R apply(T t);)"></a>Function &lt;T,R&gt;:  函数型接口(  R apply(T t);)</h3> <pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Function&lt;T, R> 函数型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t\thello"</span><span class="token punctuation">,</span> str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"成果成大事"</span><span class="token punctuation">,</span> str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：用于处理字符串</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> function<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Predicate-函数型接口（-boolean-test-T-t-）"><a href="#Predicate-函数型接口（-boolean-test-T-t-）" class="headerlink" title="Predicate :  函数型接口（ boolean test(T t);）"></a>Predicate <T>:  函数型接口（ boolean test(T t);）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Predicate&lt;T> 断言型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"ok"</span><span class="token punctuation">,</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token function">filterStr</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：将满足条件的数据放入集合中</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">filterStr</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stringList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><blockquote><p>若Lambda 体中的内容有方法已经实现了，我们可以使用“方法引用”（可以理解为方法引用是Lambda 表达式的另外一种表现形式）</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：</p><p>1，Lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中的抽象方法的函数列表和返回值类型保持一致！</p><p>2，若Lambda  参数列表中的第一参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用ClassName::method</p></blockquote><p>主要有三种语法格式：</p><h3 id="对象-实例方法名"><a href="#对象-实例方法名" class="headerlink" title="对象::实例方法名"></a>对象::实例方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//对象::实例方法名</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>       <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>       consumer2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Hello Lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> employee<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="类-静态方法名"><a href="#类-静态方法名" class="headerlink" title="类::静态方法名"></a>类::静态方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//类::静态方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505082305870.png" alt="image-20220505082305870"></p><h3 id="类-实例方法名"><a href="#类-实例方法名" class="headerlink" title="类::实例方法名"></a>类::实例方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//类::实例方法名</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bp <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bp2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505082346240.png" alt="image-20220505082346240"></p><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>注意：需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致！</p><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> integer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> integer<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//构造器引用</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造器引用</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee2 <span class="token operator">=</span> sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun3 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//数组引用</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apply <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apply2 <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h2><blockquote><p>Stream是 Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。<br>使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。也可以使用Stream API来并行执行操作。简而言之，Stream API提供了一种高效且易于使用的处理数据的方式。</p></blockquote><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505164354196.png" alt="image-20220505164354196"></p><h3 id="流（Steam-到底是什么？"><a href="#流（Steam-到底是什么？" class="headerlink" title="流（Steam)到底是什么？"></a>流（Steam)到底是什么？</h3><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。&#x3D;&#x3D;“集合讲的是数据，流讲的是计算”。&#x3D;&#x3D;</p><p>注意：</p><ul><li>Steanm 自己不会存储元素</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Steam</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ul><h3 id="Stream-的操作三个步骤"><a href="#Stream-的操作三个步骤" class="headerlink" title="Stream 的操作三个步骤"></a>Stream 的操作三个步骤</h3><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505164909488.png" alt="image-20220505164909488"></p><h4 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h4><p>一个数据源（如：集合、数组），获取一个流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，可以通过Collection 系列集合提供的stream()或parallelStream()</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，通过Arrays 中的静态方法stream() 获取数组流</span><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3，通过Stream类中的静态方法of()</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4，创建无限流</span><span class="token comment">//迭代</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><blockquote><p> 一个中间操作链，对数据源的数据进行处理</p><p> 多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为&#x3D;&#x3D;“惰性求值”。&#x3D;&#x3D;</p></blockquote><pre class="language-none"><code class="language-none">筛选与切片filter-接收Lambda，从流中排除某些元素limit-截断流 ，使其元素不超过给定数量skip(n)-跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补distinct-筛选，通过流所生成元素的hashCode()和equals()去除重复元素</code></pre><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-接收Lambda，从流中排除某些元素    </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//内部迭代：迭代操作由Stream API完成</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//中间操作:不会执行任何操作(定义操作)</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stream API的中间操作！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//终止操作：一次性执行全部内容(执行操作)</span>        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//外部迭代</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>满足条件就打印！</p><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505171439132.png" alt="image-20220505171439132"></p><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-截断流 ，使其元素不超过给定数量</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505172553136.png" alt="image-20220505172553136"></p><h5 id="skip-n"><a href="#skip-n" class="headerlink" title="skip(n)"></a>skip(n)</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//筛选，通过流所生成元素的hashCode()和equals()去除重复元素    </span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="Stream-映射"><a href="#Stream-映射" class="headerlink" title="Stream 映射"></a>Stream 映射</h5><blockquote><p>map—接收Lambda ，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505175227066.png" alt="image-20220505175227066"></p><blockquote><p>flatMap—接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">TestStreamApi03</span><span class="token operator">::</span><span class="token function">filterCharacter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> characterStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">TestStreamApi03</span><span class="token operator">::</span><span class="token function">filterCharacter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> <span class="token function">filterCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Character</span> ch <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h5 id="中间排序"><a href="#中间排序" class="headerlink" title="中间排序"></a>中间排序</h5><p>sorted() - 自然排序(Comparable)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre><p>sorted(Comparator com) – 定制排序(Comparator)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="终止操作（终端操作）"><a href="#终止操作（终端操作）" class="headerlink" title="终止操作（终端操作）"></a>终止操作（终端操作）</h4><p>一个终止操作，执行中间操作链，并产生结果</p><h5 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5><blockquote><pre class="language-none"><code class="language-none">&#x2F;*    allMatch—检查是否匹配所有元素anyMatch——检查是否至少匹配一个元素noneMatch—检查是否没有匹配所有元素findFirst——返回第一个元素findAny——返回当前流中的任意元素count——返回流中元素的总个数max——返回流中最大值min——返回流中最小值*&#x2F;</code></pre></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五wu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> any <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>any<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h5><blockquote><p>reduce(T identity,BinaryOperator) &#x2F;reduce(BinaryOperator) – 可以将流中的元素反复结合起来，得到一个值</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//reduce  归约</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reduce1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h5><blockquote><p>collect–将流转换成其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法。</p><p>Collector接口中的方法的实现决定了如何对流执行收集操作（如收集到List、set、Map)。但是&#x3D;&#x3D;Collectors&#x3D;&#x3D;使用类提供了很多静态的方法，可以方便的创建常见收集器实例。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//总数</span>    <span class="token class-name">Long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//平均值</span>    <span class="token class-name">Double</span> avg <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//总和</span>    <span class="token class-name">Double</span> sum <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最大值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最小值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//收集</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集到指定的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多级分组</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token string">"青年"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token string">"中年"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"==="</span><span class="token punctuation">,</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DoubleSummaryStatistics</span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="并行流和顺序流"><a href="#并行流和顺序流" class="headerlink" title="并行流和顺序流"></a>并行流和顺序流</h2><blockquote><p>并行流就是把一个内容分成多个数据快，并用不同的线程分别处理每个数据块的流。</p></blockquote><h2 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h2><blockquote><p>Option<T> 类（java.util.Optional)是一个容器类，代表一个值存在或不存在，原来用null表示一个值不存在，现在Optional 可以更好的表达这个概念。并且可以避免空指针异常。</p></blockquote><p>常用方法：</p><ul><li>Optional.of(T t)： 创建一个Optional 实例</li><li>Optional.empty( )： 创建一个空的Optional 实例</li><li>Optional.ofNullable(T t)： 若t不为null，创建Optional 实例，否则创建空实例</li><li>isPresent()：判断是否包含值</li><li>orElse(T t)：如果调用对象包含值，返回该值，否则返回t</li><li>orElseGet(Supplier s)：如果调用对象包含值，返回该值，否则返回s获取的值</li><li>map(Function f)：如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()</li><li>flatMap(Fuction mapper)：与map类似，要求返回值必须是Optional</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 学习笔记</title>
      <link href="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p>MQ（Message Quene）：消息队列，通过典型的生产者和消费者模型不断向消息队列中生产消息，消费者不断从队列中获取消息。因为消息的生产和消费是异步的，而且只关系消息的发送和接收，没有业务逻辑的侵入，轻松地实现系统间解耦。别名为消息中间件，通过利用高效可靠的消息传递机制进行平台无关的数据交流，并给予数据通信进行分布式系统的集成。</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><p>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:<br><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085612216.png" alt="image-20220518085612216"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085548646.png" alt="image-20220518085548646"></p><h3 id="不同MQ特点："><a href="#不同MQ特点：" class="headerlink" title="不同MQ特点："></a>不同MQ特点：</h3><ul><li>ActiveMQ：是Apache出品，是最流行，能力强劲的开源消息总线。它是一个完全支持JMS规范的消息中间件。有丰富的API，多种集群架构模式让ActiveMQ称为老牌成熟的消息中间件，中小企业使用广泛</li><li>Kafka：是LinkedIn开源的分布式发布-订阅消息系统，目前属于Apache顶级项目。主要特点是基于Pull的模式处理消息消费，追求吞吐量。一开始的目的就是用于日志收集和传输，0.8版本之后开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务</li><li>RocketMQ：是阿里开源的消息中间件，纯java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ起源于Kafka，对消息的可靠传输及事务性做了优化，在阿里被广泛用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景</li><li>RabbitMQ：使用Erlang语言开发的消息队列系统。基于AMQP协议来实现。主要特征是面向消息、队列、路由(包括点对点和发布&#x2F;订阅)、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求在其次。</li></ul><blockquote><p><a href="https://so.csdn.net/so/search?q=RabbitMQ&spm=1001.2101.3001.7020">RabbitMQ</a>比Kafka更可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性(少量延迟)，可靠性(少量丢失数据)要求稍低的场景使用，比如ELK日志收集</p></blockquote><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><blockquote><p><a href="https://www.rabbitmq.com/">RabbitMQ官网</a></p><p><a href="https://www.rabbitmq.com/news.html">RabbitMQ下载</a> (注意与erlang版本对应关系)</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">Releases · rabbitmq&#x2F;rabbitmq-server (github.com)</a></p><p><a href="https://github.com/rabbitmq/erlang-rpm/releases">Releases · rabbitmq&#x2F;erlang-rpm (github.com)</a></p></blockquote><pre class="language-java" data-language="java"><code class="language-java"># <span class="token number">1.</span>将安装包上传到服务器erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">2.</span>安装erlang依赖包yum install <span class="token operator">-</span>y erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm# <span class="token number">3.</span>安装rabbitmqyum install <span class="token operator">-</span>y rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">4.</span>配置文件#见下方配置文件说明# <span class="token number">5.</span>修改配置文件loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span># <span class="token number">6.</span>启动rabbitmq中的插件管理rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management# <span class="token number">7.</span>启动rabbitmqsystemctl start rabbitmq<span class="token operator">-</span>server # 启动rabbitmq服务systemctl restart rabbitmq<span class="token operator">-</span>server # 重启服务systemctl stop rabbitmq<span class="token operator">-</span>server  # 停止服务# <span class="token number">8.</span>查看rabbitmq状态systemctl status rabbitmq<span class="token operator">-</span>server# <span class="token number">9.</span>访问rabbitmq的web管理界面#开放端口访问firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">15672</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanentfirewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reloadhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.232</span><span class="token number">.134</span><span class="token operator">:</span><span class="token number">15672</span><span class="token operator">/</span>  #访问# <span class="token number">10.</span>初始登录guest guest</code></pre><blockquote><p>rabbitmq-server-3.8.13配置文件</p><p>安装之后&#x2F;etc&#x2F;rabbitmq&#x2F;目录下没有rabbitmq的配置文件，在&#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.8.13&#x2F;目录下也没有提供配置文件模板</p><p>可以到github上下载将其拷贝到目录下</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs">https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs</a></p><p>因为没有多少配置，此处直接在&#x2F;etc&#x2F;rabbitmq&#x2F;目录下新建rabbit.conf，添加</p><pre class="language-java" data-language="java"><code class="language-java">loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><p>我个人使用这个：<a href="https://blog.csdn.net/weixin_40584261/article/details/106826044">https://blog.csdn.net/weixin_40584261/article/details/106826044</a></p></blockquote><p>登录成功显示：</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h2><p>web界面连接rabbitmq端口：15672</p><p>java连接rabbitmq端口：5672</p><h3 id="RabbitMQ管理命令行"><a href="#RabbitMQ管理命令行" class="headerlink" title="RabbitMQ管理命令行"></a>RabbitMQ管理命令行</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1,服务启动相关</span>systemctl start <span class="token operator">|</span> restart <span class="token operator">|</span> stop <span class="token operator">|</span> status rabbitmq-server<span class="token comment">#2,管理命令行 用来在不适用web管理界面情况下操作RabbitMQ</span>rabbitmq <span class="token builtin class-name">help</span> 可以查看更多命令<span class="token comment">#3，插件管理命令行</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> <span class="token operator">|</span> list <span class="token operator">|</span> disable</code></pre><h3 id="web管理界面介绍"><a href="#web管理界面介绍" class="headerlink" title="web管理界面介绍"></a>web管理界面介绍</h3><h4 id="导航栏介绍"><a href="#导航栏介绍" class="headerlink" title="导航栏介绍"></a>导航栏介绍</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206292.png" alt="在这里插入图片描述"></p><h4 id="常见概念："><a href="#常见概念：" class="headerlink" title="常见概念："></a>常见概念：</h4><blockquote><p>Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。</p><p>Virtual Host：虚拟主机，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host</p><p>Connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才能完成消息的生产和消费，在这里可以查看连接情况。对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。</p><p>Channels：通道，建立连接后会形成通道，消息的传递获取依赖于通道</p><p>Exchanges：交换机，用来实现消息的路由。接收生产者发送的消息，并根据一定规则将消息路由给服务器中的队列</p><p>Message Queues：消息队列，消息存放在队列中，等待消费，消费后被移除队列</p><p>Message：由Header和Body组成。Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。</p></blockquote><h4 id="Admin用户管理和虚拟主机管理"><a href="#Admin用户管理和虚拟主机管理" class="headerlink" title="Admin用户管理和虚拟主机管理"></a>Admin用户管理和虚拟主机管理</h4><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206293.png" alt="在这里插入图片描述"></p><h5 id="Tags选项用户可选类型"><a href="#Tags选项用户可选类型" class="headerlink" title="Tags选项用户可选类型"></a>Tags选项用户可选类型</h5><ul><li>Admin：超级管理员，可登录管理控制台，可查看所有信息，并且可以对用户，策略(policy)进行操作</li><li>Monitoring：监控者，可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li>Policymaker：策略制定者，可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)</li><li>Management：普通管理者， 仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理</li><li>其他：无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h5 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h5><p>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206304.png" alt="在这里插入图片描述"></p><h5 id="绑定虚拟主机和用户"><a href="#绑定虚拟主机和用户" class="headerlink" title="绑定虚拟主机和用户"></a>绑定虚拟主机和用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206305.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ支持的消息模型"><a href="#RabbitMQ支持的消息模型" class="headerlink" title="RabbitMQ支持的消息模型"></a>RabbitMQ支持的消息模型</h2><blockquote><p><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p></blockquote><p>添加端口访问：</p><blockquote><p>firewall-cmd –add-port&#x3D;5672&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;15672&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>firewall-cmd –list-all</p></blockquote><p>rabbitmq依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="第一种模型（直连）"><a href="#第一种模型（直连）" class="headerlink" title="第一种模型（直连）"></a>第一种模型（直连）</h3><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117142437407.png" alt="image-20220117142437407"></p><p>在上图的模型中，有以下概念：</p><ul><li>P:生产者，也就是要发送消息的程序</li><li>C:消费者：消息的接收者，会一直等待消息的到来</li><li>queue:消息队列，图中红色的部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h4 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *发布消息         * 参数1； exchange    交换机名称         * 参数2： routinqKey   队列名称         * 参数3：传递消息额外设置         * 参数4：消息的具体内容         */</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将队列中的消息持久化</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2.开发消费者"></a>2.开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *消费消息         * 参数1：消费那个队列的消息  队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//最后一个参数：消息队列中取出的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new String(body) = "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3,参数的说明"></a>3,参数的说明</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第二种模型（work-queue）"><a href="#第二种模型（work-queue）" class="headerlink" title="第二种模型（work queue）"></a>第二种模型（work queue）</h3><p>Work queues ，也被称为（Task queues），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时可以使用work模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117145602393.png" alt="image-20220117145602393"></p><p>角色：</p><ul><li>P:生产者：任务的发布者</li><li>C1:消费者：领取任务并且完成任务，假设完成任务速度较慢</li><li>C2:消费者2：领取任务并且完成任务，假设完成速度快</li></ul><h4 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"====>:MSG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152604409.png" alt="image-20220117152604409"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152617846.png" alt="image-20220117152617846"></p><blockquote><p>总结：默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</p></blockquote><h4 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5,消息自动确认机制"></a>5,消息自动确认机制</h4><blockquote><p>​Doing a taskcan tale a few seconds.Ylou may wonder what happens if one of the consumers starts a longtask and dies with itonly partly done. .ith our curent code, once<br>Rabitue delvesamessageto the consume it imeditely marks it fordeleton. n thiscase,f y il aworker we il lose the message itwas just processing W ell alse lose al themessages that were dispatched to this particular worker but were not yet handled.<br>​But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一次只接受一条未确认的消息</span><span class="token comment">//参数2：关闭自动确认消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//手动确认消息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>这是通道一次只能消费一个消息</li><li>关闭消息的自动确认。开启手动确认消息。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154610522.png" alt="image-20220117154610522"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154621828.png" alt="image-20220117154621828"></p><h3 id="第三种模型（fanout）"><a href="#第三种模型（fanout）" class="headerlink" title="第三种模型（fanout）"></a>第三种模型（fanout）</h3><p><font color="red">fanout 也称为广播</font></p><p>Putting it all together</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154957193.png" alt="image-20220117154957193"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个消费者。</li><li>每个消费者有自己的queue（队列）。</li><li>每个队列都要绑定到Exchange（交换机）。</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。</li><li>交换机把消息发送给绑定过的所有队列。</li><li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费。</li></ul><h4 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//广播 一条消息多个消费者同时消费</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2.开发消费者 -1"></a>2.开发消费者 -1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3.开发消费者 -2"></a>3.开发消费者 -2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4,开发消费者-3"></a>4,开发消费者-3</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5,测试结果"></a>5,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161350681.png" alt="image-20220117161350681"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161404352.png" alt="image-20220117161404352"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161420304.png" alt="image-20220117161420304"></p><h3 id="第四种模型（route）"><a href="#第四种模型（route）" class="headerlink" title="第四种模型（route）"></a>第四种模型（route）</h3><h4 id="1-Routing之订阅模型-Direct"><a href="#1-Routing之订阅模型-Direct" class="headerlink" title="1,Routing之订阅模型-Direct"></a>1,Routing之订阅模型-Direct</h4><p><font color="orange">在Fanout模式中，一条消息，会被所有订阅的队列消费。但是，在某种场景下，我们希望不同的消息被不同的队列消费。这是就要用到Direct类型的Exchange。</font></p><p>在Direct模型中：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是指定一个RoutingKey（路由Key）。</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的RoutingKey。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会接收到消息。</p><p>流程：</p></li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161449322.png" alt="image-20220117161449322"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X: Exchange(交换机)，在接收生产者的消息，然后把消息递交给routing key完全匹配的队列。</li><li>C1:消费者，其所在队列指定了需要routing key为error的消息</li><li>C2:消费者，其所在队列指定了需要routing key为info、error、warning的消息</li></ul><h4 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机 参数1：交换机名称  参数2：交换机类型  基于指令的RoutingKey转发</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>#发布消息channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"指定的route key"</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2,开发消费者-1"></a>2,开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><h5 id="发布info消息"><a href="#发布info消息" class="headerlink" title="发布info消息"></a>发布info消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165459262.png" alt="image-20220117165459262"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165508443.png" alt="image-20220117165508443"></p><h5 id="发布error消息"><a href="#发布error消息" class="headerlink" title="发布error消息"></a>发布error消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165633333.png" alt="image-20220117165633333"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165642971.png" alt="image-20220117165642971"></p><h5 id="发布没有绑定的"><a href="#发布没有绑定的" class="headerlink" title="发布没有绑定的"></a>发布没有绑定的</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165726987.png" alt="image-20220117165726987"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165735835.png" alt="image-20220117165735835"></p><h3 id="第五种模型-Routing之订阅模式-Topic"><a href="#第五种模型-Routing之订阅模式-Topic" class="headerlink" title="第五种模型 Routing之订阅模式-Topic"></a>第五种模型 Routing之订阅模式-Topic</h3><p>Topic类型的Exchange与Direct相比，都是可以根据Routingkey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候使用通配符!这种模型Routingkey一般都是由一个或多个单词组成，多个单词之间以””分割，例如: item.insert</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117170033173.png" alt="image-20220117170033173"></p><pre class="language-java" data-language="java"><code class="language-java"># 通配符<span class="token operator">*</span> <span class="token punctuation">(</span>star<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> exactly one word       匹配不多不少恰好一个单词<span class="token operator">*</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> zero or more word      匹配一个或多个词# 如    audit<span class="token punctuation">.</span>#           匹配audit<span class="token punctuation">.</span>irs<span class="token punctuation">.</span>corporate 或者audit<span class="token punctuation">.</span>irs等    audit<span class="token punctuation">.</span>*           只能匹配audit<span class="token punctuation">.</span>irs</code></pre><h4 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//生命交换机和交换机类型 topic 使用动态路由（通配符方式）</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> routeKey <span class="token operator">=</span> <span class="token string">"user.save"</span><span class="token punctuation">;</span>    <span class="token comment">//动态路由</span></code></pre><h4 id="2，开发消费者-1"><a href="#2，开发消费者-1" class="headerlink" title="2，开发消费者-1"></a>2，开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重量级资源，类加载执行h之后执行一次。</span>        connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq的主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义提供连接对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭通道和关闭连接工具方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnectionAndChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Springboot-集成-RabbitMQ"><a href="#Springboot-集成-RabbitMQ" class="headerlink" title="Springboot 集成 RabbitMQ"></a>Springboot 集成 RabbitMQ</h2><h3 id="搭建初始环境"><a href="#搭建初始环境" class="headerlink" title="搭建初始环境"></a>搭建初始环境</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1,引入依赖"></a>1,引入依赖</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--rabbitmq 集成的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2,配置配置文件"></a>2,配置配置文件</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.200.130    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> ems    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /ems</code></pre><p><font color="orange">RabbitTemplate</font>用来简化操作，使用的时候，直接在项目中注入即可使用。</p><h3 id="第一种Hello-world模型使用"><a href="#第一种Hello-world模型使用" class="headerlink" title="第一种Hello world模型使用"></a>第一种Hello world模型使用</h3><h4 id="1-开发生产者-5"><a href="#1-开发生产者-5" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//hello world</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>durable <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">,</span>autoDelete <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> helloCustomer <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receivel</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118133734854.png" alt="image-20220118133734854"></p><h3 id="第二种work模型的使用"><a href="#第二种work模型的使用" class="headerlink" title="第二种work模型的使用"></a>第二种work模型的使用</h3><h4 id="1-开发生产者-6"><a href="#1-开发生产者-6" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//work 模型</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"work 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-2"><a href="#2-开发消费者-2" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-1"><a href="#3-测试结果-1" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134030447.png" alt="image-20220118134030447"></p><h3 id="第三种fanout（广播）模型使用"><a href="#第三种fanout（广播）模型使用" class="headerlink" title="第三种fanout（广播）模型使用"></a>第三种fanout（广播）模型使用</h3><h4 id="1-开发生产者-7"><a href="#1-开发生产者-7" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//fanout 广播</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"fanout 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-3"><a href="#2-开发消费者-3" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试的结果"><a href="#3-测试的结果" class="headerlink" title="3,测试的结果"></a>3,测试的结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134317791.png" alt="image-20220118134317791"></p><h3 id="第四种Route模型"><a href="#第四种Route模型" class="headerlink" title="第四种Route模型"></a>第四种Route模型</h3><h4 id="1-开发生产者-8"><a href="#1-开发生产者-8" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 路由模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"发送info的key 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-4"><a href="#2-开发消费者-4" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"warn"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-2"><a href="#3-测试结果-2" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><h5 id="error信息"><a href="#error信息" class="headerlink" title="error信息"></a>error信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134531098.png" alt="image-20220118134531098"></p><h5 id="info信息"><a href="#info信息" class="headerlink" title="info信息"></a>info信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134602104.png" alt="image-20220118134602104"></p><h5 id="warn信息"><a href="#warn信息" class="headerlink" title="warn信息"></a>warn信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134644195.png" alt="image-20220118134644195"></p><h3 id="第五种Topic模型"><a href="#第五种Topic模型" class="headerlink" title="第五种Topic模型"></a>第五种Topic模型</h3><h4 id="1-开发生产者-9"><a href="#1-开发生产者-9" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 动态路由 订阅模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user.save 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-5"><a href="#2-开发消费者-5" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.save"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"order.#"</span><span class="token punctuation">,</span><span class="token string">"produce.*"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-3"><a href="#3-测试结果-3" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118143907267.png" alt="image-20220118143907267"></p><h2 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><font color ="orange">场景说明：用户注册后，需要发送注册邮件和注册短信，传统的做法有两种： 1，串行的方式；2，并行的方式</font></p><ul><li><font color="orange">串行方式：</font>将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144429472.png" alt="image-20220118144429472"></p><ul><li><font color="orange">并行方式：</font>将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的事件。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144556401.png" alt="image-20220118144556401"></p><ul><li><font color = "orange">消息队列：</font>·假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并行已经提高的处理时间,但是前面说过邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功应该是写入数据库后就返回．<font color = "orange">消息队列：</font>引入消息队列后，把发送邮件短信不是必须的业务逻辑异步处理</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144854793.png" alt="image-20220118144854793"></p><blockquote><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间（可以忽略不计），引入消息队列后处理后，响应时间是串行的三倍，是并行的两倍。</p></blockquote><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><font color="orange">场景：双十一，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口。</font></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145133031.png" alt="image-20220118145133031"></p><p>这种做法有一个缺点：</p><p>当库存系统出现故障时，订单就会失败。订单系统和库存系统高耦合，引入消息队列。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145230792.png" alt="image-20220118145230792"></p><ul><li><font color = "orange">订单系统：</font>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。</li><li><font color = "orange">库存系统：</font>订阅下单的消息，获取下单的消息，进行库操作。就算库存系统出现故障，消息队列能保证消息的可靠投递，不会导致消息的丢失。</li></ul><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p><font color = "orange">场景：</font>秒杀活动，一般会因为流量过大，导致应用挂掉，为解决这个问题，一般在应用前端加入消息队列。</p><p><font color = "orange">作用：</font></p><ul><li>可以控制活动人数，超过此一定阈值的订单直接丢弃。</li><li>可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118150245500.png" alt="image-20220118150245500"></p><blockquote><p>1，用户的请求，服务器收到之后，首先写入消息队列，假如消息队列长度超过最大值，则直接抛弃用户请求或跳转到错误页面。</p><p>2，秒杀业务根据消息队列中的请求信息，再做后续处理。</p></blockquote><h2 id="RabbiMQ的集群"><a href="#RabbiMQ的集群" class="headerlink" title="RabbiMQ的集群"></a>RabbiMQ的集群</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><h4 id="普通集群（副本集群）"><a href="#普通集群（副本集群）" class="headerlink" title="普通集群（副本集群）"></a>普通集群（副本集群）</h4><blockquote><p>All data&#x2F;state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this message queues,which by default reside on one node,though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster  –摘自官网</p></blockquote><p><font color = "orange">默认情况下：RabbitMQ代理操作所需的所有数据&#x2F;状态都将跨所有节点复制，这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</font></p><h5 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1, 架构图"></a>1, 架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118151113890.png" alt="image-20220118151113890"></p><p>核心解决问题：<font color = "orange">当集群中某一时刻master节点宕机，可以对Queue中信息，进行备份。</font></p><h5 id="2-集群搭建"><a href="#2-集群搭建" class="headerlink" title="2, 集群搭建"></a>2, 集群搭建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.集群规划</span>    node1: <span class="token number">192.168</span>.200.130  mq1 master  主节点    node2: <span class="token number">192.168</span>.200.131  mq2 repl1  副本节点    node3: <span class="token number">192.168</span>.200.132  mq3 repl2  副本节点<span class="token comment"># 1,克隆三台机器主机名和ip映射</span><span class="token function">vim</span> /etc/hosts 加入：<span class="token number">192.168</span>.200.130  mq1<span class="token number">192.168</span>.200.131  mq2<span class="token number">192.168</span>.200.132  mq3node1: <span class="token function">vim</span> /etc/hostname 加入: mq1node2: <span class="token function">vim</span> /etc/hostname 加入: mq2node3: <span class="token function">vim</span> /etc/hostname 加入: mq3<span class="token comment">#2,三个机器安装rabbitmq，并同步cookie文件，在node1上执行：</span><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/<span class="token comment">#3,查看cookie是否一致</span>node1: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode2: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode3: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie<span class="token comment">#4,后台启动rabbitmq所有节点执行如下命令，启动成功访问管理界面：</span>rabbitmq-server -detached<span class="token comment">#5,在node2和node3执行加入集群命令：</span><span class="token number">1</span>,关闭               rabbitmqctl stop_app<span class="token number">2</span>,加入集群           rabbitmqctl join_cluster rabbit@mq1<span class="token number">3</span>,启动服务           rabbitmqctl start_app<span class="token comment">#6,查看集群状态，任意节点执行：</span>rabbitmqctl cluster_status<span class="token comment">#7,如果出现如下显示，汲取搭建成功：</span> Cluster status of <span class="token function">node</span> rabbit@mq3 <span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>nodes,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>disc,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>running_nodes,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>cluster_name,<span class="token operator">&lt;&lt;</span><span class="token string">"rabbit@mq1"</span><span class="token operator">>></span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>partitions,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>alarms,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>rabbit@mq1,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq2,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq3,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 8,登录管理界面，展示如下状态：</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220523140558358.png" alt="image-20220523140558358"></p><h6 id="测试集群在node1上，创建队列"><a href="#测试集群在node1上，创建队列" class="headerlink" title="测试集群在node1上，创建队列"></a>测试集群在node1上，创建队列</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h6 id="查看node2和node3节点"><a href="#查看node2和node3节点" class="headerlink" title="查看node2和node3节点"></a>查看node2和node3节点</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206337.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206338.png" alt="在这里插入图片描述"></p><h6 id="关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3"><a href="#关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3" class="headerlink" title="关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3"></a>关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206339.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063310.png" alt="在这里插入图片描述"></p><h4 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes.<br>–摘自官网<br>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</p></blockquote><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center-165283472063311.png" alt="在这里插入图片描述"></p><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.策略说明</span>rabbitmqctl set_policy <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>vhost<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--priority <span class="token operator">&lt;</span>priority<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--apply-to <span class="token operator">&lt;</span>apply-to<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>definition<span class="token operator">></span>-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name:     policy的名称Pattern: queue的匹配模式<span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-modeha-mode:指明镜像队列的模式，有效值为 all/exactly/nodesall：表示在集群中所有的节点上进行镜像exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定ha-params：ha-mode模式需要用到的参数ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual              priority：可选参数，policy的优先级                             <span class="token comment"># 1.查看当前策略</span>rabbitmqctl list_policies<span class="token comment"># 2.添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hello'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> 说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列<span class="token comment"># 3.删除策略</span>rabbitmqctl clear_policy ha-all<span class="token comment"># 4.测试集群</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063312.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063313.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063314.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop 大数据集群的搭建以及使用</title>
      <link href="/2022/05/16/hadoop/"/>
      <url>/2022/05/16/hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-hadoop集群搭建及使用"><a href="#1-hadoop集群搭建及使用" class="headerlink" title="1.hadoop集群搭建及使用"></a>1.hadoop集群搭建及使用</h1><h2 id="1-集群规划；"><a href="#1-集群规划；" class="headerlink" title="(1).集群规划；"></a>(1).集群规划；</h2><p><img src="/2022/05/16/hadoop/image-20220516121650308.png" alt="image-20220516121650308"></p><h2 id="2-虚拟机准备；"><a href="#2-虚拟机准备；" class="headerlink" title="(2).虚拟机准备；"></a>(2).虚拟机准备；</h2><h3 id="1、创建虚拟机（具体步骤不再展示）；"><a href="#1、创建虚拟机（具体步骤不再展示）；" class="headerlink" title="1、创建虚拟机（具体步骤不再展示）；"></a>1、创建虚拟机（具体步骤不再展示）；</h3><p><img src="/2022/05/16/hadoop/image-20220516121741768.png" alt="image-20220516121741768"> </p><h3 id="2-、配置网络；"><a href="#2-、配置网络；" class="headerlink" title="2 、配置网络；"></a>2 、配置网络；</h3><h4 id="ping外网：ping-baidu-com"><a href="#ping外网：ping-baidu-com" class="headerlink" title="ping外网：ping baidu.com"></a>ping外网：ping baidu.com</h4><p><img src="/2022/05/16/hadoop/image-20220516121747924.png" alt="image-20220516121747924"> </p><h4 id="如果ping不通"><a href="#如果ping不通" class="headerlink" title="如果ping不通"></a>如果ping不通</h4><p>修改如下文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121754932.png" alt="image-20220516121754932"> </p><h4 id="重启网络服务："><a href="#重启网络服务：" class="headerlink" title="重启网络服务："></a>重启网络服务：</h4><p>service network restart</p><p><img src="/2022/05/16/hadoop/image-20220516121802380.png" alt="image-20220516121802380"> </p><h4 id="配置静态IP："><a href="#配置静态IP：" class="headerlink" title="配置静态IP："></a>配置静态IP：</h4><p>打开VMware-&gt;编辑-&gt;虚拟机网络编辑器</p><p><img src="/2022/05/16/hadoop/image-20220516121810372.png" alt="image-20220516121810372"> </p><p><img src="/2022/05/16/hadoop/image-20220516121816889.png" alt="image-20220516121816889"> </p><p><img src="/2022/05/16/hadoop/image-20220516121824390.png" alt="image-20220516121824390"> </p><p>查看IP：ip addr</p><p><img src="/2022/05/16/hadoop/image-20220516140004855.png" alt="image-20220516140004855"> </p><h4 id="修改网卡的配置文件"><a href="#修改网卡的配置文件" class="headerlink" title="修改网卡的配置文件"></a>修改网卡的配置文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33<span class="token comment">#修改并添加：（IP为静态）</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.132<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2</code></pre><p>如图所示</p><p><img src="/2022/05/16/hadoop/image-20220516121832458.png" alt="image-20220516121832458"> </p><p>重启网络服务：service network restart</p><p>ping外网（查看是否可以ping通）：ping baidu.com </p><h3 id="3-克隆两台上述已配置的虚拟机；"><a href="#3-克隆两台上述已配置的虚拟机；" class="headerlink" title="3).克隆两台上述已配置的虚拟机；"></a>3).克隆两台上述已配置的虚拟机；</h3><p>关闭虚拟机：</p><p><img src="/2022/05/16/hadoop/image-20220516121836984.png" alt="image-20220516121836984"> </p><p>点击下一页，</p><p>选择克隆类型时，创建完整克隆：</p><p><img src="/2022/05/16/hadoop/image-20220516121842574.png" alt="image-20220516121842574"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打开第二、三台虚拟机，进入：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#更改</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.133  <span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.134</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121847510.png" alt="image-20220516121847510"> </p><p>重启网络服务并查看是否可以ping通外网。</p><h2 id="3-修改主机名；"><a href="#3-修改主机名；" class="headerlink" title="(3).修改主机名；"></a>(3).修改主机名；</h2><p>查看主机名：hostname</p><p>修改第一台主机名：sudo hostnamectl set-hostname hadoop1</p><p><img src="/2022/05/16/hadoop/image-20220516121854101.png" alt="image-20220516121854101"> </p><p>修改第二台主机名：sudo hostnamectl set-hostname hadoop2</p><p><img src="/2022/05/16/hadoop/image-20220516121858625.png" alt="image-20220516121858625"> </p><p>修改第三台主机名：sudo hostnamectl set-hostname hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121903823.png" alt="image-20220516121903823"> </p><p>三台都要修改ip与主机名的映射：sudo vi &#x2F;etc&#x2F;hosts</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加：</span><span class="token number">192.168</span>.246.132 hadoop1<span class="token number">192.168</span>.246.134 hadoop2<span class="token number">192.168</span>.246.133 hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121908682.png" alt="image-20220516121908682"> </p><p>重启虚拟机生效：reboot</p><h2 id="4-配置免密登录"><a href="#4-配置免密登录" class="headerlink" title="(4).配置免密登录"></a>(4).配置免密登录</h2><p>在hadoop1机器上操作：ssh-keygen -t rsa</p><p>执行命令后，连续敲击三次回车键，生成公钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拷贝公钥：</span>ssh-copy-id hadoop1ssh-copy-id hadoop2ssh-copy-id hadoop3</code></pre><p>由于我已拷贝过，所以显示已存在</p><p><img src="/2022/05/16/hadoop/image-20220516121913155.png" alt="image-20220516121913155"> </p><p>进入hadoop2、hadoop3同样操作，实现可以使用ssh hadoop2、ssh hadoop3，不需要密码就能进入hadoop2、hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121917445.png" alt="image-20220516121917445"> </p><h2 id="5-编写分发脚本；"><a href="#5-编写分发脚本；" class="headerlink" title="(5).编写分发脚本；"></a>(5).编写分发脚本；</h2><p>输入：rsync –help</p><p><img src="/2022/05/16/hadoop/image-20220516121922280.png" alt="image-20220516121922280"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台虚拟机安装rsync命令：</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">rsync</span> -y<span class="token comment">#rsync与scp区别：用rsync做文件的复制比scp快，rsync只对差异文件作更新</span><span class="token comment">#在主目录创建bin目录：</span><span class="token function">mkdir</span> ~/bin<span class="token comment">#创建分发脚本脚本：</span><span class="token function">vim</span> ~/bin/xsync</code></pre><p>脚本内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token comment">#1. 判断参数个数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> Not Enough Arguement<span class="token operator">!</span>    <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#2. 遍历集群所有机器</span><span class="token comment">#注意，如果你的主机名命名和我不一样，下面这三个更换成你的主机名</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3<span class="token keyword">do</span>     <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>  <span class="token variable">$host</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>        <span class="token comment">#3. 遍历所有目录，挨个发送</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span>    <span class="token keyword">do</span>    <span class="token comment">#4 判断文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>             <span class="token comment">#5. 获取父目录</span>                <span class="token assign-left variable">pdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> -P <span class="token punctuation">$(</span>dirname $file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>                <span class="token assign-left variable">fname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $file<span class="token variable">)</span></span>                <span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">"mkdir -p <span class="token variable">$pdir</span>"</span>                <span class="token function">rsync</span> -av <span class="token variable">$pdir</span>/<span class="token variable">$fname</span> <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>            <span class="token keyword">else</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$file</span> does not exists<span class="token operator">!</span>                        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span>    </code></pre><p><img src="/2022/05/16/hadoop/image-20220516121927761.png" alt="image-20220516121927761"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改权限：</span><span class="token function">chmod</span> +x ~/bin/xsync<span class="token comment">#测试：把xsync命令发送到hadoop2、hadoop3</span><span class="token comment">#进入目录：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#将xsync脚本发送到hadoop2、hadoop3：</span>xsync xsync</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121932285.png" alt="image-20220516121932285"> </p><h2 id="6-安装JDK"><a href="#6-安装JDK" class="headerlink" title="(6).安装JDK;"></a>(6).安装JDK;</h2><p>进入官网下载匹配的jdk8安装包，上传至linux：cd</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> soft<span class="token function">mkdir</span> installfile<span class="token builtin class-name">cd</span> ~/installfile</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121937403.png" alt="image-20220516121937403"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压：</span><span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz.crdownload -C ~/soft<span class="token comment">#切换到soft目录下：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s jdk1.8.0_281 jdk</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121942242.png" alt="image-20220516121942242"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=~</span>/soft/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="token variable">$&#123;JRE_HOME&#125;</span>/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516121946353.png" alt="image-20220516121946353"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>java -version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121950307.png" alt="image-20220516121950307"> </p><p>进入hadoop2、hadoop3按照上述步骤配置jdk、环境变量并验证</p><h2 id="7-安装hadoop"><a href="#7-安装hadoop" class="headerlink" title="(7).安装hadoop"></a>(7).安装hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至installfile目录解压hadoop安装包：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下</span><span class="token function">tar</span> -zxvf hadoop-3.1.3.tar.gz -C ~/soft<span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121954599.png" alt="image-20220516121954599"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121958454.png" alt="image-20220516121958454"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122002381.png" alt="image-20220516122002381"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入hadoop配置目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span class="token comment">#在hadoop-env.sh中配置JAVA_HOME路径：</span><span class="token function">vi</span> hadoop-env.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122006516.png" alt="image-20220516122006516"> </p><p>配置core-site.xml：vi core-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop/hadoop_data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Abase for other temporary directories.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token comment">&lt;!-- hadoop1的内网IP地址 --></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 指定NameNode的地址 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122011920.png" alt="image-20220516122011920"> </p><p>配置hdfs-site.xml：vi hdfs-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定NameNode的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 设置SecondaryNameNode(2NN)的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop3:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hhadoop_data/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop/hadoop_data/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>need not permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122016807.png" alt="image-20220516122016807"> </p><p><img src="/2022/05/16/hadoop/image-20220516122021019.png" alt="image-20220516122021019"> </p><p>配置yarn-site.xml：vi yarn-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定MapReduce走shuffle --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.aux-services<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>mapreduce_shuffle<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定ResourceManager的地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.hostname<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>hadoop<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the applications manager interface <span class="token keyword">in</span> the RM.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the scheduler interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.scheduler.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The http address of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:808<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The https adddress of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.https.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:809<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.resource-tracker.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the RM admin interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.admin.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.scheduler.maximum-allocation-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span>  <span class="token operator">&lt;</span>discription<span class="token operator">></span>每个节点可用内存,单位MB,默认8182MB<span class="token operator">&lt;</span>/discription<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-pmem-ratio<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">2</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.resource.memory-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-check-enabled<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>false<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122026970.png" alt="image-20220516122026970"> </p><p><img src="/2022/05/16/hadoop/image-20220516122030561.png" alt="image-20220516122030561"> </p><p><img src="/2022/05/16/hadoop/image-20220516122034104.png" alt="image-20220516122034104"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制并且配置mapred-site.xml：</span><span class="token function">cp</span> mapred-site.xml mapred-site.xml.template<span class="token function">vi</span> mapred-site.xml</code></pre><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定MapReduce程序运行在Yarn上的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:49001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.local.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop/hadoop_data/var<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122039094.png" alt="image-20220516122039094"> </p><p>配置workers，将三个主机名添加进去：vi workers</p><p><img src="/2022/05/16/hadoop/image-20220516122042633.png" alt="image-20220516122042633"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入/sbin目录下：</span><span class="token builtin class-name">cd</span> /root/soft/hadoop/sbin/<span class="token comment">#修改start-dfs.sh和stop-dfs.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_SECURE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122046435.png" alt="image-20220516122046435"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改start-yarn.sh和stop-yarn.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_DN_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122050361.png" alt="image-20220516122050361"> </p><p>切换到soft目录下：cd &#x2F;root&#x2F;soft</p><p>使用xsync脚本将hadoop-3.1.3发送到hadoop2、hadoop3：</p><p><img src="/2022/05/16/hadoop/image-20220516122054081.png" alt="image-20220516122054081"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换hadoop2、hadoop3在soft目录下创建hadoop-3.1.3的软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop<span class="token comment">#配置hadoop环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122058346.png" alt="image-20220516122058346"> </p><p><img src="/2022/05/16/hadoop/image-20220516122102094.png" alt="image-20220516122102094"> </p><h2 id="8-启动hadoop"><a href="#8-启动hadoop" class="headerlink" title="(8).启动hadoop"></a>(8).启动hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#格式化hadoop：</span>hadoop namenode -format</code></pre><p>注：hadoop只能格式化一次，在下面出现successfully formatted为格式化成功，这里由于我已经格式化了，就不附截图了。</p><p>在hadoop1启动hdfs：start-dfs.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122107291.png" alt="image-20220516122107291"> </p><p>在hadoop2启动yarn：start-yarn.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122112228.png" alt="image-20220516122112228"> </p><p>验证进程：</p><p>在hadoop1、hadoop2、hadoop3分别输入：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122116494.png" alt="image-20220516122116494"> </p><p><img src="/2022/05/16/hadoop/image-20220516122120013.png" alt="image-20220516122120013"> </p><p><img src="/2022/05/16/hadoop/image-20220516122123607.png" alt="image-20220516122123607"> </p><p>关闭防火墙：systemctl stop firewalld</p><p>在浏览器输入：192.168.246.132:9870</p><p><img src="/2022/05/16/hadoop/image-20220516140133885.png" alt="image-20220516140133885"> </p><p><img src="/2022/05/16/hadoop/image-20220516122128674.png" alt="image-20220516122128674"> </p><p>在浏览器输入：192.168.246.134:8088</p><p><img src="/2022/05/16/hadoop/image-20220516122132496.png" alt="image-20220516122132496"> </p><p>在浏览器端可查看每台服务器状态：</p><p><img src="/2022/05/16/hadoop/image-20220516122138080.png" alt="image-20220516122138080"> </p><h2 id="9-简单使用hadoop"><a href="#9-简单使用hadoop" class="headerlink" title="(9).简单使用hadoop"></a>(9).简单使用hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看hdfs的根目录：</span>hdfs dfs -ls /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122143737.png" alt="image-20220516122143737"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在根目录下创建文件夹：</span>hdfs dfs -mkdir /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122147922.png" alt="image-20220516122147922"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将linux本地文件上传到hdfs：</span>hdfs dfs -put emp.csv /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122151618.png" alt="image-20220516122151618"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#移动emp.csv的位置到/data目录下：</span>hdfs dfs -mv /emp.csv /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122155106.png" alt="image-20220516122155106"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将data目录下的emp.csv复制到hdfs的根目录下：</span>hdfs dfs -cp /data/emp.csv /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122159630.png" alt="image-20220516122159630"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看emp.csv文件内容：</span>hdfs dfs -cat /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122204310.png" alt="image-20220516122204310"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除文件emp-copy.csv：</span>hdfs dfs -rm /emp-copy.csv <span class="token comment">#删除data文件夹:</span>hdfs dfs -rm -r /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122209350.png" alt="image-20220516122209350"> </p><p><img src="/2022/05/16/hadoop/image-20220516122212683.png" alt="image-20220516122212683"> </p><p>使用wordcount脚本（自己编写的），对某个文件里面的字符进行统计</p><p>在linux本地创建1.txt文件并上传到hdfs根目录下的input（上面已有步骤，直接附截图）：</p><p><img src="/2022/05/16/hadoop/image-20220516122216665.png" alt="image-20220516122216665"> </p><p><img src="/2022/05/16/hadoop/image-20220516122220619.png" alt="image-20220516122220619"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#运行脚本：</span>hadoop jar wordcount-1.0-SNAPSHOT.jar org.example.MyMain /input/1.txt /output/wordcount</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122224444.png" alt="image-20220516122224444"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看结果：</span>hdfs dfs -cat /output/wordcount/part-r-00000</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122228709.png" alt="image-20220516122228709"> </p><p>在浏览器界面（9870）也可查看hdfs的文件存放情况：</p><p><img src="/2022/05/16/hadoop/image-20220516122232821.png" alt="image-20220516122232821"> </p><h1 id="2-ZooKeeper集群搭建及使用"><a href="#2-ZooKeeper集群搭建及使用" class="headerlink" title="2.ZooKeeper集群搭建及使用"></a>2.ZooKeeper集群搭建及使用</h1><h2 id="1-下载zookeeper安装包并解压"><a href="#1-下载zookeeper安装包并解压" class="headerlink" title="(1).下载zookeeper安装包并解压"></a>(1).下载zookeeper安装包并解压</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf zookeeper-3.4.9.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122236855.png" alt="image-20220516122236855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s zookeeper-3.4.9 zookeeper<span class="token comment">#同步zookeeper至其他机器：</span>xsync zookeeper-3.4.9</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="(2).配置环境变量"></a>(2).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/root/soft/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122242022.png" alt="image-20220516122242022"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（2）步骤</p><p><img src="/2022/05/16/hadoop/image-20220516122246648.png" alt="image-20220516122246648"> </p><h2 id="3-配置zoo-cfg"><a href="#3-配置zoo-cfg" class="headerlink" title="(3).配置zoo.cfg"></a>(3).配置zoo.cfg</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入conf目录：</span><span class="token builtin class-name">cd</span> zookeeper/conf/<span class="token comment">#复制zoo_sample.cf：</span><span class="token function">cp</span> zoo_sample.cfg zoo.cfg</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122251044.png" alt="image-20220516122251044"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑zoo.cfg：</span><span class="token function">vi</span> zoo.cfg<span class="token comment">#修改：</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/root/soft/zookeeper/zkData</code></pre><p><img src="/2022/05/16/hadoop/image-20225171803.png" alt="img"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#末尾添加：</span>server.1<span class="token operator">=</span>hadoop1:2888:3888server.2<span class="token operator">=</span>hadoop2:2888:3888server.3<span class="token operator">=</span>hadoop3:2888:3888</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122258768.png" alt="image-20220516122258768"> </p><p>server.A&#x3D;B: C: D。</p><p>A:机器编号  </p><p>B:主机名  </p><p>C: Leader与Follower的访问端口 </p><p>D:选举Leader接口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#同步zoo.cfg：</span>xsync zoo.cfg</code></pre><p>配置服务器编号：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入zookeeper：</span><span class="token builtin class-name">cd</span> <span class="token variable">$ZOOKEEPER_HOME</span><span class="token comment">#创建数据存放目录：</span><span class="token function">mkdir</span> zkData<span class="token comment">#编辑myid：.</span><span class="token function">vi</span> zkData/myid</code></pre><p>内容为：1</p><p><img src="/2022/05/16/hadoop/image-20220516122303679.png" alt="image-20220516122303679"> </p><p><img src="/2022/05/16/hadoop/image-20220516122307298.png" alt="image-20220516122307298"> </p><p>在hadoop2中的myid添加内容为：2</p><p>在hadoop3中的myid添加内容为：3</p><h2 id="4-编写zookeeper脚本"><a href="#4-编写zookeeper脚本" class="headerlink" title="(4).编写zookeeper脚本"></a>(4).编写zookeeper脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> zk.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh start "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------状态 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh status"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122311485.png" alt="image-20220516122311485"> </p><p>添加脚本执行权限：chmod u+x zk.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122316821.png" alt="image-20220516122316821"> </p><h2 id="5-启动zookeeper集群"><a href="#5-启动zookeeper集群" class="headerlink" title="(5).启动zookeeper集群"></a>(5).启动zookeeper集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群（启动前先检查防火墙。没关的关一下）：</span>zk.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122320281.png" alt="image-20220516122320281"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看各机器状态：</span>zk.sh status</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122324340.png" alt="image-20220516122324340"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止zookeeper集群：</span>zk.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122328422.png" alt="image-20220516122328422"> </p><h2 id="6-zookeeper集群的简单使用"><a href="#6-zookeeper集群的简单使用" class="headerlink" title="(6).zookeeper集群的简单使用"></a>(6).zookeeper集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群：</span>zk.sh start<span class="token comment">#进入zookeeper命令行：</span>zkCli.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122331781.png" alt="image-20220516122331781"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建节点（节点有四种类型，永久节点、临时节点、永久序列化节点、临时序列化节点）：</span><span class="token comment"># -s 序列化 -e 临时节点 path  创建路径  data 节点数据</span>create <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> path data  <span class="token comment">#创建demo临时节点：</span>create -e /demo <span class="token number">321</span><span class="token comment">#查看根下的所有节点：</span><span class="token function">ls</span> /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122336640.png" alt="image-20220516122336640"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看path下所有znode,以及zonde的属性：</span>ls2 /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122340206.png" alt="image-20220516122340206"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拿到/demo的数据：</span>get /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122344420.png" alt="image-20220516122344420"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改/demo的数据：</span><span class="token builtin class-name">set</span> /demo <span class="token number">456</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122348066.png" alt="image-20220516122348066"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#递归删除节点：</span>rmr /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122352849.png" alt="image-20220516122352849"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看历史记录：</span><span class="token function">history</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122356338.png" alt="image-20220516122356338"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出zookeeper命令行：</span>quit</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122400137.png" alt="image-20220516122400137"> </p><h1 id="3-HBase集群搭建及使用"><a href="#3-HBase集群搭建及使用" class="headerlink" title="3.HBase集群搭建及使用"></a>3.HBase集群搭建及使用</h1><h2 id="1-查看hbase与jdk、hadoop的版本匹配；"><a href="#1-查看hbase与jdk、hadoop的版本匹配；" class="headerlink" title="(1).查看hbase与jdk、hadoop的版本匹配；"></a>(1).查看hbase与jdk、hadoop的版本匹配；</h2><p><img src="/2022/05/16/hadoop/image-20220516122405362.png" alt="image-20220516122405362"> </p><p><img src="/2022/05/16/hadoop/image-20220516122409109.png" alt="image-20220516122409109"> </p><h2 id="2-集群规划"><a href="#2-集群规划" class="headerlink" title="(2).集群规划"></a>(2).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516122412571.png" alt="image-20220516122412571"> </p><h2 id="3-下载、解压hbase安装包"><a href="#3-下载、解压hbase安装包" class="headerlink" title="(3).下载、解压hbase安装包"></a>(3).下载、解压hbase安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf hbase-2.4.11-bin.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122416499.png" alt="image-20220516122416499"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hbase-2.4.11 hbase<span class="token comment">#同步zookeeper至其他机器：</span>xsync hbase-2.4.11<span class="token comment">#切换hadoop2、hadoop3创建软连接</span></code></pre><p> (4).配置环境变量；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_HOME</span><span class="token operator">=~</span>/soft/hbase-2.4.11<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HBASE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122421127.png" alt="image-20220516122421127"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hbase version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122426092.png" alt="image-20220516122426092"> </p><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（4）步骤</p><h2 id="5-配置hbase-site-xml"><a href="#5-配置hbase-site-xml" class="headerlink" title="(5).配置hbase-site.xml"></a>(5).配置hbase-site.xml</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到conf目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HBASE_HOME</span>/conf<span class="token comment">#编辑hbase-site.xml：</span><span class="token function">vi</span> hbase-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122430589.png" alt="image-20220516122430589"> </p><p>(先将原有配置全部删除)在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1,hadoop2,hadoop3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/zookeeper/zkData<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/hbase-2.4.11/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 在分布式的情况下一定要设置，不然容易出现Hmaster起不来的情况 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.unsafe.stream.capability.enforce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122435139.png" alt="image-20220516122435139"> </p><h2 id="6-配置regionservers"><a href="#6-配置regionservers" class="headerlink" title="(6).配置regionservers"></a>(6).配置regionservers</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑regionservers：</span><span class="token function">vi</span> regionservers <span class="token comment">#删除原有的localhost，添加如下内容： </span>hadoop1hadoop2hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122439505.png" alt="image-20220516122439505"> </p><h2 id="7-配置备用master"><a href="#7-配置备用master" class="headerlink" title="(7).配置备用master"></a>(7).配置备用master</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑backup-masters：</span><span class="token function">vi</span> backup-masters <span class="token comment">#添加内容为：</span>hadoop2</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122443768.png" alt="image-20220516122443768"> </p><p><img src="/2022/05/16/hadoop/image-20220516122447722.png" alt="image-20220516122447722"> </p><h2 id="8-软连接hadoop配置文件到hbase配置目录并分发hbase；"><a href="#8-软连接hadoop配置文件到hbase配置目录并分发hbase；" class="headerlink" title="(8).软连接hadoop配置文件到hbase配置目录并分发hbase；"></a>(8).软连接hadoop配置文件到hbase配置目录并分发hbase；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#软连接hadoop的core-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/core-site.xml core-site.xml<span class="token comment">#软连接hadoop的hdfs-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/hdfs-site.xml hdfs-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122452063.png" alt="image-20220516122452063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#返回上一级目录：</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">#同步conf文件夹：</span>xsync conf</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122456356.png" alt="image-20220516122456356"> </p><h2 id="9-启动hbase集群"><a href="#9-启动hbase集群" class="headerlink" title="(9).启动hbase集群"></a>(9).启动hbase集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase前需要先启动zookeeper、hadoop：</span>zk.sh startstart-all.shstart-hbase.sh<span class="token comment">#或者分开启动hbase：</span>hbase-daemon.sh start masterhbase-daemon.sh start regionserver</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122500574.png" alt="image-20220516122500574"> </p><p>分别在hadoop1、hadoop2、hadoop3输入jps查看节点：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122505347.png" alt="image-20220516122505347"> </p><p><img src="/2022/05/16/hadoop/image-20220516122508629.png" alt="image-20220516122508629"> </p><p><img src="/2022/05/16/hadoop/image-20220516122512505.png" alt="image-20220516122512505"> </p><p><img src="/2022/05/16/hadoop/image-20220516122517185.png" alt="image-20220516122517185"> </p><p>进入浏览器查看：192.168.246.132:16010</p><p><img src="/2022/05/16/hadoop/image-20220516122524759.png" alt="image-20220516122524759"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止hbase集群：</span>stop-hbase.sh<span class="token comment">#如果无法关闭就分别关闭master、regionserver：</span>hbase-daemons.sh stop regionserverhbase-daemons.sh stop master</code></pre><h2 id="10-hbase集群的简单使用；"><a href="#10-hbase集群的简单使用；" class="headerlink" title="(10).hbase集群的简单使用；"></a>(10).hbase集群的简单使用；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase集群：</span>start-hbase.sh<span class="token comment">#进入hbase命令行：</span>hbase shell</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122531557.png" alt="image-20220516122531557"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有表：</span>list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122537346.png" alt="image-20220516122537346"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建stu表：</span>create <span class="token string">'stu'</span>,<span class="token string">'info'</span>,<span class="token string">'no'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122542755.png" alt="image-20220516122542755"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看表结构：</span>describe <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122546736.png" alt="image-20220516122546736"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启用或禁用表：</span>is_enabled <span class="token string">'stu'</span>is_disabled <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122551001.png" alt="image-20220516122551001"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1001'</span>,<span class="token string">'info:name'</span>,<span class="token string">'HYX'</span><span class="token comment">#扫描表数据：</span>scan <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122555113.png" alt="image-20220516122555113"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#继续向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:name'</span>,<span class="token string">'Jack'</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:age'</span>,<span class="token string">'22'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122559328.png" alt="image-20220516122559328"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#统计表记录数：</span>count <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122604057.png" alt="image-20220516122604057"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除stu表需要禁用表：</span>disable <span class="token string">'stu'</span><span class="token comment">#删除表：</span>drop <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122607441.png" alt="image-20220516122607441"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出hbase命令行：</span><span class="token builtin class-name">exit</span> 或 quit</code></pre><h1 id="4-Kafka集群搭建及使用"><a href="#4-Kafka集群搭建及使用" class="headerlink" title="4.Kafka集群搭建及使用"></a>4.Kafka集群搭建及使用</h1><h2 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="(1).集群规划"></a>(1).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516140250117.png" alt="image-20220516140250117"> </p><h2 id="2-下载并解压安装包"><a href="#2-下载并解压安装包" class="headerlink" title="(2).下载并解压安装包"></a>(2).下载并解压安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile目录：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf kafka_2.11-2.4.1.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122622290.png" alt="image-20220516122622290"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s kafka_2.11-2.4.1 kafka<span class="token comment">#同步kafka至其他机器：</span>xsync kafka_2.11-2.4.1</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="(3).配置环境变量"></a>(3).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HOME</span><span class="token operator">=</span>/root/soft/kafka<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KAFKA_HOME</span>/bin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122628614.png" alt="image-20220516122628614"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（3）步骤</p><h2 id="4-分别在三台机器上创建logs目录"><a href="#4-分别在三台机器上创建logs目录" class="headerlink" title="(4).分别在三台机器上创建logs目录"></a>(4).分别在三台机器上创建logs目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#创建logs目录：</span><span class="token function">mkdir</span> logs</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122633371.png" alt="image-20220516122633371"> </p><h2 id="5-修改配置文件server-properties"><a href="#5-修改配置文件server-properties" class="headerlink" title="(5).修改配置文件server.properties"></a>(5).修改配置文件server.properties</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至config目录：</span><span class="token builtin class-name">cd</span> config<span class="token comment">#编辑server.properties：</span><span class="token function">vi</span> server.properties</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122637275.png" alt="image-20220516122637275"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改内容如下：</span>broker.id<span class="token operator">=</span><span class="token number">0</span><span class="token comment">#删除topic功能</span>delete.topic.enable<span class="token operator">=</span>truelog.dirs<span class="token operator">=</span>/root/soft/kafka/logszookeeper.connect<span class="token operator">=</span>hadoop1:2181,hadoop2:2181,hadoop3:2181/kafka</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122641096.png" alt="image-20220516122641096"> </p><p><img src="/2022/05/16/hadoop/image-20220516122644972.png" alt="image-20220516122644972"> </p><p><img src="/2022/05/16/hadoop/image-20220516122649136.png" alt="image-20220516122649136"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#分发server.properties到hadoop2、hadoop3：</span>xsync server.properties<span class="token comment">#修改hadoop2的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#修改hadoop3的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">2</span></code></pre><h2 id="6-编写kafka脚本"><a href="#6-编写kafka脚本" class="headerlink" title="(6).编写kafka脚本"></a>(6).编写kafka脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> kf.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-start.sh -daemon /root/soft/kafka/config/server.properties "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-stop.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122655855.png" alt="image-20220516122655855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加脚本执行权限：</span><span class="token function">chmod</span> u+x kf.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122701672.png" alt="image-20220516122701672"> </p><h2 id="7-启动kafka集群"><a href="#7-启动kafka集群" class="headerlink" title="(7).启动kafka集群"></a>(7).启动kafka集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash">启<span class="token comment">#动kafka集群需要先启动zookeeper集群：</span>zk.sh start <span class="token operator">|</span>  kf.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122705626.png" alt="image-20220516122705626"> </p><p>使用jps查看三台机器的节点是否启动：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122709528.png" alt="image-20220516122709528"> </p><p><img src="/2022/05/16/hadoop/image-20220516122713433.png" alt="image-20220516122713433"> </p><p><img src="/2022/05/16/hadoop/image-20220516122716947.png" alt="image-20220516122716947"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭kafka集群：</span>kf.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122721107.png" alt="image-20220516122721107"> </p><h2 id="8-kafka集群的简单使用"><a href="#8-kafka集群的简单使用" class="headerlink" title="(8).kafka集群的简单使用"></a>(8).kafka集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动kafka集群：</span>kf.sh start<span class="token comment">#进入kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#查看kafka topic列表：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122725063.png" alt="image-20220516122725063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--create --replication-factor <span class="token number">3</span> --partitions <span class="token number">1</span> --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122729379.png" alt="image-20220516122729379"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--delete --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122733878.png" alt="image-20220516122733878"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#发送消息：</span>bin/kafka-console-producer.sh <span class="token punctuation">\</span>--broker-list hadoop1:9092 --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122737468.png" alt="image-20220516122737468"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#消费消息：</span>bin/kafka-console-consumer.sh <span class="token punctuation">\</span>--bootstrap-server hadoop1:9092 --from-beginning --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122741682.png" alt="image-20220516122741682"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看某个topic的详情：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span> --describe --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122746568.png" alt="image-20220516122746568"> </p><p><img src="/2022/05/16/hadoop/image-20220516122750832.png" alt="image-20220516122750832"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改分区数：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --alter --topic demo --partitions <span class="token number">6</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122757161.png" alt="image-20220516122757161"></p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> zookeeper </tag>
            
            <tag> kafka </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

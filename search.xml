<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ 学习笔记</title>
      <link href="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p>MQ（Message Quene）：消息队列，通过典型的生产者和消费者模型不断向消息队列中生产消息，消费者不断从队列中获取消息。因为消息的生产和消费是异步的，而且只关系消息的发送和接收，没有业务逻辑的侵入，轻松地实现系统间解耦。别名为消息中间件，通过利用高效可靠的消息传递机制进行平台无关的数据交流，并给予数据通信进行分布式系统的集成。</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><p>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:<br><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085612216.png" alt="image-20220518085612216"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085548646.png" alt="image-20220518085548646"></p><h3 id="不同MQ特点："><a href="#不同MQ特点：" class="headerlink" title="不同MQ特点："></a>不同MQ特点：</h3><ul><li>ActiveMQ：是Apache出品，是最流行，能力强劲的开源消息总线。它是一个完全支持JMS规范的消息中间件。有丰富的API，多种集群架构模式让ActiveMQ称为老牌成熟的消息中间件，中小企业使用广泛</li><li>Kafka：是LinkedIn开源的分布式发布-订阅消息系统，目前属于Apache顶级项目。主要特点是基于Pull的模式处理消息消费，追求吞吐量。一开始的目的就是用于日志收集和传输，0.8版本之后开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务</li><li>RocketMQ：是阿里开源的消息中间件，纯java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ起源于Kafka，对消息的可靠传输及事务性做了优化，在阿里被广泛用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景</li><li>RabbitMQ：使用Erlang语言开发的消息队列系统。基于AMQP协议来实现。主要特征是面向消息、队列、路由(包括点对点和发布&#x2F;订阅)、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求在其次。</li></ul><blockquote><p><a href="https://so.csdn.net/so/search?q=RabbitMQ&spm=1001.2101.3001.7020">RabbitMQ</a>比Kafka更可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性(少量延迟)，可靠性(少量丢失数据)要求稍低的场景使用，比如ELK日志收集</p></blockquote><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><blockquote><p><a href="https://www.rabbitmq.com/">RabbitMQ官网</a></p><p><a href="https://www.rabbitmq.com/news.html">RabbitMQ下载</a> (注意与erlang版本对应关系)</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">Releases · rabbitmq&#x2F;rabbitmq-server (github.com)</a></p><p><a href="https://github.com/rabbitmq/erlang-rpm/releases">Releases · rabbitmq&#x2F;erlang-rpm (github.com)</a></p></blockquote><pre class="language-java" data-language="java"><code class="language-java"># <span class="token number">1.</span>将安装包上传到服务器erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">2.</span>安装erlang依赖包yum install <span class="token operator">-</span>y erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm# <span class="token number">3.</span>安装rabbitmqyum install <span class="token operator">-</span>y rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">4.</span>配置文件#见下方配置文件说明# <span class="token number">5.</span>修改配置文件loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span># <span class="token number">6.</span>启动rabbitmq中的插件管理rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management# <span class="token number">7.</span>启动rabbitmqsystemctl start rabbitmq<span class="token operator">-</span>server # 启动rabbitmq服务systemctl restart rabbitmq<span class="token operator">-</span>server # 重启服务systemctl stop rabbitmq<span class="token operator">-</span>server  # 停止服务# <span class="token number">8.</span>查看rabbitmq状态systemctl status rabbitmq<span class="token operator">-</span>server# <span class="token number">9.</span>访问rabbitmq的web管理界面#开放端口访问firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">15672</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanentfirewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reloadhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.232</span><span class="token number">.134</span><span class="token operator">:</span><span class="token number">15672</span><span class="token operator">/</span>  #访问# <span class="token number">10.</span>初始登录guest guest</code></pre><blockquote><p>rabbitmq-server-3.8.13配置文件</p><p>安装之后&#x2F;etc&#x2F;rabbitmq&#x2F;目录下没有rabbitmq的配置文件，在&#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.8.13&#x2F;目录下也没有提供配置文件模板</p><p>可以到github上下载将其拷贝到目录下</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs">https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs</a></p><p>因为没有多少配置，此处直接在&#x2F;etc&#x2F;rabbitmq&#x2F;目录下新建rabbit.conf，添加</p><pre class="language-java" data-language="java"><code class="language-java">loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><p>我个人使用这个：<a href="https://blog.csdn.net/weixin_40584261/article/details/106826044">https://blog.csdn.net/weixin_40584261/article/details/106826044</a></p></blockquote><p>登录成功显示：</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h2><p>web界面连接rabbitmq端口：15672</p><p>java连接rabbitmq端口：5672</p><h3 id="RabbitMQ管理命令行"><a href="#RabbitMQ管理命令行" class="headerlink" title="RabbitMQ管理命令行"></a>RabbitMQ管理命令行</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1,服务启动相关</span>systemctl start <span class="token operator">|</span> restart <span class="token operator">|</span> stop <span class="token operator">|</span> status rabbitmq-server<span class="token comment">#2,管理命令行 用来在不适用web管理界面情况下操作RabbitMQ</span>rabbitmq <span class="token builtin class-name">help</span> 可以查看更多命令<span class="token comment">#3，插件管理命令行</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> <span class="token operator">|</span> list <span class="token operator">|</span> disable</code></pre><h3 id="web管理界面介绍"><a href="#web管理界面介绍" class="headerlink" title="web管理界面介绍"></a>web管理界面介绍</h3><h4 id="导航栏介绍"><a href="#导航栏介绍" class="headerlink" title="导航栏介绍"></a>导航栏介绍</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206292.png" alt="在这里插入图片描述"></p><h4 id="常见概念："><a href="#常见概念：" class="headerlink" title="常见概念："></a>常见概念：</h4><blockquote><p>Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。</p><p>Virtual Host：虚拟主机，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host</p><p>Connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才能完成消息的生产和消费，在这里可以查看连接情况。对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。</p><p>Channels：通道，建立连接后会形成通道，消息的传递获取依赖于通道</p><p>Exchanges：交换机，用来实现消息的路由。接收生产者发送的消息，并根据一定规则将消息路由给服务器中的队列</p><p>Message Queues：消息队列，消息存放在队列中，等待消费，消费后被移除队列</p><p>Message：由Header和Body组成。Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。</p></blockquote><h4 id="Admin用户管理和虚拟主机管理"><a href="#Admin用户管理和虚拟主机管理" class="headerlink" title="Admin用户管理和虚拟主机管理"></a>Admin用户管理和虚拟主机管理</h4><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206293.png" alt="在这里插入图片描述"></p><h5 id="Tags选项用户可选类型"><a href="#Tags选项用户可选类型" class="headerlink" title="Tags选项用户可选类型"></a>Tags选项用户可选类型</h5><ul><li>Admin：超级管理员，可登录管理控制台，可查看所有信息，并且可以对用户，策略(policy)进行操作</li><li>Monitoring：监控者，可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li>Policymaker：策略制定者，可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)</li><li>Management：普通管理者， 仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理</li><li>其他：无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h5 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h5><p>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206304.png" alt="在这里插入图片描述"></p><h5 id="绑定虚拟主机和用户"><a href="#绑定虚拟主机和用户" class="headerlink" title="绑定虚拟主机和用户"></a>绑定虚拟主机和用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206305.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ支持的消息模型"><a href="#RabbitMQ支持的消息模型" class="headerlink" title="RabbitMQ支持的消息模型"></a>RabbitMQ支持的消息模型</h2><blockquote><p><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p></blockquote><p>添加端口访问：</p><blockquote><p>firewall-cmd –add-port&#x3D;5672&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;15672&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>firewall-cmd –list-all</p></blockquote><p>rabbitmq依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="第一种模型（直连）"><a href="#第一种模型（直连）" class="headerlink" title="第一种模型（直连）"></a>第一种模型（直连）</h3><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117142437407.png" alt="image-20220117142437407"></p><p>在上图的模型中，有以下概念：</p><ul><li>P:生产者，也就是要发送消息的程序</li><li>C:消费者：消息的接收者，会一直等待消息的到来</li><li>queue:消息队列，图中红色的部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h4 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *发布消息         * 参数1； exchange    交换机名称         * 参数2： routinqKey   队列名称         * 参数3：传递消息额外设置         * 参数4：消息的具体内容         */</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将队列中的消息持久化</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2.开发消费者"></a>2.开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *消费消息         * 参数1：消费那个队列的消息  队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//最后一个参数：消息队列中取出的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new String(body) = "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3,参数的说明"></a>3,参数的说明</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第二种模型（work-queue）"><a href="#第二种模型（work-queue）" class="headerlink" title="第二种模型（work queue）"></a>第二种模型（work queue）</h3><p>Work queues ，也被称为（Task queues），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时可以使用work模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117145602393.png" alt="image-20220117145602393"></p><p>角色：</p><ul><li>P:生产者：任务的发布者</li><li>C1:消费者：领取任务并且完成任务，假设完成任务速度较慢</li><li>C2:消费者2：领取任务并且完成任务，假设完成速度快</li></ul><h4 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"====>:MSG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152604409.png" alt="image-20220117152604409"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152617846.png" alt="image-20220117152617846"></p><blockquote><p>总结：默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</p></blockquote><h4 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5,消息自动确认机制"></a>5,消息自动确认机制</h4><blockquote><p>​Doing a taskcan tale a few seconds.Ylou may wonder what happens if one of the consumers starts a longtask and dies with itonly partly done. .ith our curent code, once<br>Rabitue delvesamessageto the consume it imeditely marks it fordeleton. n thiscase,f y il aworker we il lose the message itwas just processing W ell alse lose al themessages that were dispatched to this particular worker but were not yet handled.<br>​But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一次只接受一条未确认的消息</span><span class="token comment">//参数2：关闭自动确认消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//手动确认消息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>这是通道一次只能消费一个消息</li><li>关闭消息的自动确认。开启手动确认消息。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154610522.png" alt="image-20220117154610522"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154621828.png" alt="image-20220117154621828"></p><h3 id="第三种模型（fanout）"><a href="#第三种模型（fanout）" class="headerlink" title="第三种模型（fanout）"></a>第三种模型（fanout）</h3><p><font color="red">fanout 也称为广播</font></p><p>Putting it all together</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154957193.png" alt="image-20220117154957193"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个消费者。</li><li>每个消费者有自己的queue（队列）。</li><li>每个队列都要绑定到Exchange（交换机）。</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。</li><li>交换机把消息发送给绑定过的所有队列。</li><li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费。</li></ul><h4 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//广播 一条消息多个消费者同时消费</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2.开发消费者 -1"></a>2.开发消费者 -1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3.开发消费者 -2"></a>3.开发消费者 -2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4,开发消费者-3"></a>4,开发消费者-3</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5,测试结果"></a>5,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161350681.png" alt="image-20220117161350681"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161404352.png" alt="image-20220117161404352"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161420304.png" alt="image-20220117161420304"></p><h3 id="第四种模型（route）"><a href="#第四种模型（route）" class="headerlink" title="第四种模型（route）"></a>第四种模型（route）</h3><h4 id="1-Routing之订阅模型-Direct"><a href="#1-Routing之订阅模型-Direct" class="headerlink" title="1,Routing之订阅模型-Direct"></a>1,Routing之订阅模型-Direct</h4><p><font color="orange">在Fanout模式中，一条消息，会被所有订阅的队列消费。但是，在某种场景下，我们希望不同的消息被不同的队列消费。这是就要用到Direct类型的Exchange。</font></p><p>在Direct模型中：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是指定一个RoutingKey（路由Key）。</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的RoutingKey。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会接收到消息。</p><p>流程：</p></li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161449322.png" alt="image-20220117161449322"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X: Exchange(交换机)，在接收生产者的消息，然后把消息递交给routing key完全匹配的队列。</li><li>C1:消费者，其所在队列指定了需要routing key为error的消息</li><li>C2:消费者，其所在队列指定了需要routing key为info、error、warning的消息</li></ul><h4 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机 参数1：交换机名称  参数2：交换机类型  基于指令的RoutingKey转发</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>#发布消息channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"指定的route key"</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2,开发消费者-1"></a>2,开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><h5 id="发布info消息"><a href="#发布info消息" class="headerlink" title="发布info消息"></a>发布info消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165459262.png" alt="image-20220117165459262"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165508443.png" alt="image-20220117165508443"></p><h5 id="发布error消息"><a href="#发布error消息" class="headerlink" title="发布error消息"></a>发布error消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165633333.png" alt="image-20220117165633333"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165642971.png" alt="image-20220117165642971"></p><h5 id="发布没有绑定的"><a href="#发布没有绑定的" class="headerlink" title="发布没有绑定的"></a>发布没有绑定的</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165726987.png" alt="image-20220117165726987"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165735835.png" alt="image-20220117165735835"></p><h3 id="第五种模型-Routing之订阅模式-Topic"><a href="#第五种模型-Routing之订阅模式-Topic" class="headerlink" title="第五种模型 Routing之订阅模式-Topic"></a>第五种模型 Routing之订阅模式-Topic</h3><p>Topic类型的Exchange与Direct相比，都是可以根据Routingkey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候使用通配符!这种模型Routingkey一般都是由一个或多个单词组成，多个单词之间以””分割，例如: item.insert</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117170033173.png" alt="image-20220117170033173"></p><pre class="language-java" data-language="java"><code class="language-java"># 通配符<span class="token operator">*</span> <span class="token punctuation">(</span>star<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> exactly one word       匹配不多不少恰好一个单词<span class="token operator">*</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> zero or more word      匹配一个或多个词# 如    audit<span class="token punctuation">.</span>#           匹配audit<span class="token punctuation">.</span>irs<span class="token punctuation">.</span>corporate 或者audit<span class="token punctuation">.</span>irs等    audit<span class="token punctuation">.</span>*           只能匹配audit<span class="token punctuation">.</span>irs</code></pre><h4 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//生命交换机和交换机类型 topic 使用动态路由（通配符方式）</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> routeKey <span class="token operator">=</span> <span class="token string">"user.save"</span><span class="token punctuation">;</span>    <span class="token comment">//动态路由</span></code></pre><h4 id="2，开发消费者-1"><a href="#2，开发消费者-1" class="headerlink" title="2，开发消费者-1"></a>2，开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重量级资源，类加载执行h之后执行一次。</span>        connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq的主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义提供连接对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭通道和关闭连接工具方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnectionAndChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Springboot-集成-RabbitMQ"><a href="#Springboot-集成-RabbitMQ" class="headerlink" title="Springboot 集成 RabbitMQ"></a>Springboot 集成 RabbitMQ</h2><h3 id="搭建初始环境"><a href="#搭建初始环境" class="headerlink" title="搭建初始环境"></a>搭建初始环境</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1,引入依赖"></a>1,引入依赖</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--rabbitmq 集成的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2,配置配置文件"></a>2,配置配置文件</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.200.130    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> ems    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /ems</code></pre><p><font color="orange">RabbitTemplate</font>用来简化操作，使用的时候，直接在项目中注入即可使用。</p><h3 id="第一种Hello-world模型使用"><a href="#第一种Hello-world模型使用" class="headerlink" title="第一种Hello world模型使用"></a>第一种Hello world模型使用</h3><h4 id="1-开发生产者-5"><a href="#1-开发生产者-5" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//hello world</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>durable <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">,</span>autoDelete <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> helloCustomer <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receivel</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118133734854.png" alt="image-20220118133734854"></p><h3 id="第二种work模型的使用"><a href="#第二种work模型的使用" class="headerlink" title="第二种work模型的使用"></a>第二种work模型的使用</h3><h4 id="1-开发生产者-6"><a href="#1-开发生产者-6" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//work 模型</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"work 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-2"><a href="#2-开发消费者-2" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-1"><a href="#3-测试结果-1" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134030447.png" alt="image-20220118134030447"></p><h3 id="第三种fanout（广播）模型使用"><a href="#第三种fanout（广播）模型使用" class="headerlink" title="第三种fanout（广播）模型使用"></a>第三种fanout（广播）模型使用</h3><h4 id="1-开发生产者-7"><a href="#1-开发生产者-7" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//fanout 广播</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"fanout 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-3"><a href="#2-开发消费者-3" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试的结果"><a href="#3-测试的结果" class="headerlink" title="3,测试的结果"></a>3,测试的结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134317791.png" alt="image-20220118134317791"></p><h3 id="第四种Route模型"><a href="#第四种Route模型" class="headerlink" title="第四种Route模型"></a>第四种Route模型</h3><h4 id="1-开发生产者-8"><a href="#1-开发生产者-8" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 路由模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"发送info的key 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-4"><a href="#2-开发消费者-4" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"warn"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-2"><a href="#3-测试结果-2" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><h5 id="error信息"><a href="#error信息" class="headerlink" title="error信息"></a>error信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134531098.png" alt="image-20220118134531098"></p><h5 id="info信息"><a href="#info信息" class="headerlink" title="info信息"></a>info信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134602104.png" alt="image-20220118134602104"></p><h5 id="warn信息"><a href="#warn信息" class="headerlink" title="warn信息"></a>warn信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134644195.png" alt="image-20220118134644195"></p><h3 id="第五种Topic模型"><a href="#第五种Topic模型" class="headerlink" title="第五种Topic模型"></a>第五种Topic模型</h3><h4 id="1-开发生产者-9"><a href="#1-开发生产者-9" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 动态路由 订阅模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user.save 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-5"><a href="#2-开发消费者-5" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.save"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"order.#"</span><span class="token punctuation">,</span><span class="token string">"produce.*"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-3"><a href="#3-测试结果-3" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118143907267.png" alt="image-20220118143907267"></p><h2 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><font color ="orange">场景说明：用户注册后，需要发送注册邮件和注册短信，传统的做法有两种： 1，串行的方式；2，并行的方式</font></p><ul><li><font color="orange">串行方式：</font>将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144429472.png" alt="image-20220118144429472"></p><ul><li><font color="orange">并行方式：</font>将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的事件。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144556401.png" alt="image-20220118144556401"></p><ul><li><font color = "orange">消息队列：</font>·假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并行已经提高的处理时间,但是前面说过邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功应该是写入数据库后就返回．<font color = "orange">消息队列：</font>引入消息队列后，把发送邮件短信不是必须的业务逻辑异步处理</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144854793.png" alt="image-20220118144854793"></p><blockquote><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间（可以忽略不计），引入消息队列后处理后，响应时间是串行的三倍，是并行的两倍。</p></blockquote><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><font color="orange">场景：双十一，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口。</font></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145133031.png" alt="image-20220118145133031"></p><p>这种做法有一个缺点：</p><p>当库存系统出现故障时，订单就会失败。订单系统和库存系统高耦合，引入消息队列。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145230792.png" alt="image-20220118145230792"></p><ul><li><font color = "orange">订单系统：</font>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。</li><li><font color = "orange">库存系统：</font>订阅下单的消息，获取下单的消息，进行库操作。就算库存系统出现故障，消息队列能保证消息的可靠投递，不会导致消息的丢失。</li></ul><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p><font color = "orange">场景：</font>秒杀活动，一般会因为流量过大，导致应用挂掉，为解决这个问题，一般在应用前端加入消息队列。</p><p><font color = "orange">作用：</font></p><ul><li>可以控制活动人数，超过此一定阈值的订单直接丢弃。</li><li>可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118150245500.png" alt="image-20220118150245500"></p><blockquote><p>1，用户的请求，服务器收到之后，首先写入消息队列，假如消息队列长度超过最大值，则直接抛弃用户请求或跳转到错误页面。</p><p>2，秒杀业务根据消息队列中的请求信息，再做后续处理。</p></blockquote><h2 id="RabbiMQ的集群"><a href="#RabbiMQ的集群" class="headerlink" title="RabbiMQ的集群"></a>RabbiMQ的集群</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><h4 id="普通集群（副本集群）"><a href="#普通集群（副本集群）" class="headerlink" title="普通集群（副本集群）"></a>普通集群（副本集群）</h4><blockquote><p>All data&#x2F;state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this message queues,which by default reside on one node,though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster  –摘自官网</p></blockquote><p><font color = "orange">默认情况下：RabbitMQ代理操作所需的所有数据&#x2F;状态都将跨所有节点复制，这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</font></p><h5 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1, 架构图"></a>1, 架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118151113890.png" alt="image-20220118151113890"></p><p>核心解决问题：<font color = "orange">当集群中某一时刻master节点宕机，可以对Queue中信息，进行备份。</font></p><h5 id="2-集群搭建"><a href="#2-集群搭建" class="headerlink" title="2, 集群搭建"></a>2, 集群搭建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.集群规划</span>    node1: <span class="token number">192.168</span>.200.130  mq1 master  主节点    node2: <span class="token number">192.168</span>.200.131  mq2 repl1  副本节点    node3: <span class="token number">192.168</span>.200.132  mq3 repl2  副本节点<span class="token comment"># 1,克隆三台机器主机名和ip映射</span><span class="token function">vim</span> /etc/hosts 加入：<span class="token number">192.168</span>.200.130  mq1<span class="token number">192.168</span>.200.131  mq2<span class="token number">192.168</span>.200.132  mq3node1: <span class="token function">vim</span> /etc/hostname 加入: mq1node2: <span class="token function">vim</span> /etc/hostname 加入: mq2node3: <span class="token function">vim</span> /etc/hostname 加入: mq3<span class="token comment">#2,三个机器安装rabbitmq，并同步cookie文件，在node1上执行：</span><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/<span class="token comment">#3,查看cookie是否一致</span>node1: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode2: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode3: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie<span class="token comment">#4,后台启动rabbitmq所有节点执行如下命令，启动成功访问管理界面：</span>rabbitmq-server -detached<span class="token comment">#5,在node2和node3执行加入集群命令：</span><span class="token number">1</span>,关闭               rabbitmqctl stop_app<span class="token number">2</span>,加入集群           rabbitmqctl join_cluster rabbit@mq1<span class="token number">3</span>,启动服务           rabbitmqctl start_app<span class="token comment">#6,查看集群状态，任意节点执行：</span>rabbitmqctl cluster_status<span class="token comment">#7,如果出现如下显示，汲取搭建成功：</span> Cluster status of <span class="token function">node</span> rabbit@mq3 <span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>nodes,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>disc,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>running_nodes,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>cluster_name,<span class="token operator">&lt;&lt;</span><span class="token string">"rabbit@mq1"</span><span class="token operator">>></span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>partitions,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>alarms,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>rabbit@mq1,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq2,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq3,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 8,登录管理界面，展示如下状态：</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center-16528347206336.png" alt="在这里插入图片描述"></p><h6 id="测试集群在node1上，创建队列"><a href="#测试集群在node1上，创建队列" class="headerlink" title="测试集群在node1上，创建队列"></a>测试集群在node1上，创建队列</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h6 id="查看node2和node3节点"><a href="#查看node2和node3节点" class="headerlink" title="查看node2和node3节点"></a>查看node2和node3节点</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206337.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206338.png" alt="在这里插入图片描述"></p><h6 id="关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3"><a href="#关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3" class="headerlink" title="关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3"></a>关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206339.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063310.png" alt="在这里插入图片描述"></p><h4 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes.<br>–摘自官网<br>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</p></blockquote><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center-165283472063311.png" alt="在这里插入图片描述"></p><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.策略说明</span>rabbitmqctl set_policy <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>vhost<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--priority <span class="token operator">&lt;</span>priority<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--apply-to <span class="token operator">&lt;</span>apply-to<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>definition<span class="token operator">></span>-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name:     policy的名称Pattern: queue的匹配模式<span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-modeha-mode:指明镜像队列的模式，有效值为 all/exactly/nodesall：表示在集群中所有的节点上进行镜像exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定ha-params：ha-mode模式需要用到的参数ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual              priority：可选参数，policy的优先级                             <span class="token comment"># 1.查看当前策略</span>rabbitmqctl list_policies<span class="token comment"># 2.添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hello'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> 说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列<span class="token comment"># 3.删除策略</span>rabbitmqctl clear_policy ha-all<span class="token comment"># 4.测试集群</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063312.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063313.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063314.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop 大数据集群的搭建以及使用</title>
      <link href="/2022/05/16/hadoop/"/>
      <url>/2022/05/16/hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-hadoop集群搭建及使用"><a href="#1-hadoop集群搭建及使用" class="headerlink" title="1.hadoop集群搭建及使用"></a>1.hadoop集群搭建及使用</h1><h2 id="1-集群规划；"><a href="#1-集群规划；" class="headerlink" title="(1).集群规划；"></a>(1).集群规划；</h2><p><img src="/2022/05/16/hadoop/image-20220516121650308.png" alt="image-20220516121650308"></p><h2 id="2-虚拟机准备；"><a href="#2-虚拟机准备；" class="headerlink" title="(2).虚拟机准备；"></a>(2).虚拟机准备；</h2><h3 id="1、创建虚拟机（具体步骤不再展示）；"><a href="#1、创建虚拟机（具体步骤不再展示）；" class="headerlink" title="1、创建虚拟机（具体步骤不再展示）；"></a>1、创建虚拟机（具体步骤不再展示）；</h3><p><img src="/2022/05/16/hadoop/image-20220516121741768.png" alt="image-20220516121741768"> </p><h3 id="2-、配置网络；"><a href="#2-、配置网络；" class="headerlink" title="2 、配置网络；"></a>2 、配置网络；</h3><h4 id="ping外网：ping-baidu-com"><a href="#ping外网：ping-baidu-com" class="headerlink" title="ping外网：ping baidu.com"></a>ping外网：ping baidu.com</h4><p><img src="/2022/05/16/hadoop/image-20220516121747924.png" alt="image-20220516121747924"> </p><h4 id="如果ping不通"><a href="#如果ping不通" class="headerlink" title="如果ping不通"></a>如果ping不通</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改如下文件：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121754932.png" alt="image-20220516121754932"> </p><h4 id="重启网络服务："><a href="#重启网络服务：" class="headerlink" title="重启网络服务："></a>重启网络服务：</h4><p>service network restart</p><p><img src="/2022/05/16/hadoop/image-20220516121802380.png" alt="image-20220516121802380"> </p><h4 id="配置静态IP："><a href="#配置静态IP：" class="headerlink" title="配置静态IP："></a>配置静态IP：</h4><p>打开VMware-&gt;编辑-&gt;虚拟机网络编辑器</p><p><img src="/2022/05/16/hadoop/image-20220516121810372.png" alt="image-20220516121810372"> </p><p><img src="/2022/05/16/hadoop/image-20220516121816889.png" alt="image-20220516121816889"> </p><p><img src="/2022/05/16/hadoop/image-20220516121824390.png" alt="image-20220516121824390"> </p><p>查看IP：ip addr</p><p><img src="/2022/05/16/hadoop/image-20220516140004855.png" alt="image-20220516140004855"> </p><h4 id="修改网卡的配置文件"><a href="#修改网卡的配置文件" class="headerlink" title="修改网卡的配置文件"></a>修改网卡的配置文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#修改并添加：（IP为静态）</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.132<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2</code></pre><p>如图所示</p><p><img src="/2022/05/16/hadoop/image-20220516121832458.png" alt="image-20220516121832458"> </p><p>重启网络服务：service network restart</p><p>ping外网（查看是否可以ping通）：ping baidu.com </p><h3 id="3-克隆两台上述已配置的虚拟机；"><a href="#3-克隆两台上述已配置的虚拟机；" class="headerlink" title="3).克隆两台上述已配置的虚拟机；"></a>3).克隆两台上述已配置的虚拟机；</h3><p>关闭虚拟机：</p><p><img src="/2022/05/16/hadoop/image-20220516121836984.png" alt="image-20220516121836984"> </p><p>点击下一页，</p><p>选择克隆类型时，创建完整克隆：</p><p><img src="/2022/05/16/hadoop/image-20220516121842574.png" alt="image-20220516121842574"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打开第二、三台虚拟机，进入：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#更改</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.133  <span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.134</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121847510.png" alt="image-20220516121847510"> </p><p>重启网络服务并查看是否可以ping通外网。</p><h2 id="3-修改主机名；"><a href="#3-修改主机名；" class="headerlink" title="(3).修改主机名；"></a>(3).修改主机名；</h2><p>查看主机名：hostname</p><p>修改第一台主机名：sudo hostnamectl set-hostname hadoop1</p><p><img src="/2022/05/16/hadoop/image-20220516121854101.png" alt="image-20220516121854101"> </p><p>修改第二台主机名：sudo hostnamectl set-hostname hadoop2</p><p><img src="/2022/05/16/hadoop/image-20220516121858625.png" alt="image-20220516121858625"> </p><p>修改第三台主机名：sudo hostnamectl set-hostname hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121903823.png" alt="image-20220516121903823"> </p><p>三台都要修改ip与主机名的映射：sudo vi &#x2F;etc&#x2F;hosts</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加：</span><span class="token number">192.168</span>.246.132 hadoop1<span class="token number">192.168</span>.246.134 hadoop2<span class="token number">192.168</span>.246.133 hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121908682.png" alt="image-20220516121908682"> </p><p>重启虚拟机生效：reboot</p><h2 id="4-配置免密登录"><a href="#4-配置免密登录" class="headerlink" title="(4).配置免密登录"></a>(4).配置免密登录</h2><p>在hadoop1机器上操作：ssh-keygen -t rsa</p><p>执行命令后，连续敲击三次回车键，生成公钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拷贝公钥：</span>ssh-copy-id hadoop1ssh-copy-id hadoop2ssh-copy-id hadoop3</code></pre><p>由于我已拷贝过，所以显示已存在</p><p><img src="/2022/05/16/hadoop/image-20220516121913155.png" alt="image-20220516121913155"> </p><p>进入hadoop2、hadoop3同样操作，实现可以使用ssh hadoop2、ssh hadoop3，不需要密码就能进入hadoop2、hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121917445.png" alt="image-20220516121917445"> </p><h2 id="5-编写分发脚本；"><a href="#5-编写分发脚本；" class="headerlink" title="(5).编写分发脚本；"></a>(5).编写分发脚本；</h2><p>输入：rsync –help</p><p><img src="/2022/05/16/hadoop/image-20220516121922280.png" alt="image-20220516121922280"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台虚拟机安装rsync命令：</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">rsync</span> -y<span class="token comment">#rsync与scp区别：用rsync做文件的复制比scp快，rsync只对差异文件作更新</span><span class="token comment">#在主目录创建bin目录：</span><span class="token function">mkdir</span> ~/bin<span class="token comment">#创建分发脚本脚本：</span><span class="token function">vim</span> ~/bin/xsync</code></pre><p>脚本内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token comment">#1. 判断参数个数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> Not Enough Arguement<span class="token operator">!</span>    <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#2. 遍历集群所有机器</span><span class="token comment">#注意，如果你的主机名命名和我不一样，下面这三个更换成你的主机名</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3<span class="token keyword">do</span>     <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>  <span class="token variable">$host</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>        <span class="token comment">#3. 遍历所有目录，挨个发送</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span>    <span class="token keyword">do</span>    <span class="token comment">#4 判断文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>             <span class="token comment">#5. 获取父目录</span>                <span class="token assign-left variable">pdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> -P <span class="token punctuation">$(</span>dirname $file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>                <span class="token assign-left variable">fname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $file<span class="token variable">)</span></span>                <span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">"mkdir -p <span class="token variable">$pdir</span>"</span>                <span class="token function">rsync</span> -av <span class="token variable">$pdir</span>/<span class="token variable">$fname</span> <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>            <span class="token keyword">else</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$file</span> does not exists<span class="token operator">!</span>                        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span>    </code></pre><p><img src="/2022/05/16/hadoop/image-20220516121927761.png" alt="image-20220516121927761"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改权限：</span><span class="token function">chmod</span> +x ~/bin/xsync<span class="token comment">#测试：把xsync命令发送到hadoop2、hadoop3</span><span class="token comment">#进入目录：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#将xsync脚本发送到hadoop2、hadoop3：</span>xsync xsync</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121932285.png" alt="image-20220516121932285"> </p><h2 id="6-安装JDK"><a href="#6-安装JDK" class="headerlink" title="(6).安装JDK;"></a>(6).安装JDK;</h2><p>进入官网下载匹配的jdk8安装包，上传至linux：cd</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> soft<span class="token function">mkdir</span> installfile<span class="token builtin class-name">cd</span> ~/installfile</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121937403.png" alt="image-20220516121937403"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压：</span><span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz.crdownload -C ~/soft<span class="token comment">#切换到soft目录下：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s jdk1.8.0_281 jdk</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121942242.png" alt="image-20220516121942242"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=~</span>/soft/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="token variable">$&#123;JRE_HOME&#125;</span>/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516121946353.png" alt="image-20220516121946353"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>java -version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121950307.png" alt="image-20220516121950307"> </p><p>进入hadoop2、hadoop3按照上述步骤配置jdk、环境变量并验证</p><h2 id="7-安装hadoop"><a href="#7-安装hadoop" class="headerlink" title="(7).安装hadoop"></a>(7).安装hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至installfile目录解压hadoop安装包：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下</span><span class="token function">tar</span> -zxvf hadoop-3.1.3.tar.gz -C ~/soft<span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121954599.png" alt="image-20220516121954599"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121958454.png" alt="image-20220516121958454"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122002381.png" alt="image-20220516122002381"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入hadoop配置目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span class="token comment">#在hadoop-env.sh中配置JAVA_HOME路径：</span><span class="token function">vi</span> hadoop-env.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122006516.png" alt="image-20220516122006516"> </p><p>配置core-site.xml：vi core-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Abase for other temporary directories.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token comment">&lt;!-- hadoop1的内网IP地址 --></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 指定NameNode的地址 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122011920.png" alt="image-20220516122011920"> </p><p>配置hdfs-site.xml：vi hdfs-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定NameNode的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 设置SecondaryNameNode(2NN)的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop3:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>need not permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122016807.png" alt="image-20220516122016807"> </p><p><img src="/2022/05/16/hadoop/image-20220516122021019.png" alt="image-20220516122021019"> </p><p>配置yarn-site.xml：vi yarn-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定MapReduce走shuffle --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.aux-services<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>mapreduce_shuffle<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定ResourceManager的地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.hostname<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>hadoop<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the applications manager interface <span class="token keyword">in</span> the RM.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the scheduler interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.scheduler.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The http address of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:808<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The https adddress of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.https.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:809<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.resource-tracker.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the RM admin interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.admin.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.scheduler.maximum-allocation-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span>  <span class="token operator">&lt;</span>discription<span class="token operator">></span>每个节点可用内存,单位MB,默认8182MB<span class="token operator">&lt;</span>/discription<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-pmem-ratio<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">2</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.resource.memory-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-check-enabled<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>false<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122026970.png" alt="image-20220516122026970"> </p><p><img src="/2022/05/16/hadoop/image-20220516122030561.png" alt="image-20220516122030561"> </p><p><img src="/2022/05/16/hadoop/image-20220516122034104.png" alt="image-20220516122034104"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制并且配置mapred-site.xml：</span><span class="token function">cp</span> mapred-site.xml mapred-site.xml.template<span class="token function">vi</span> mapred-site.xml</code></pre><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定MapReduce程序运行在Yarn上的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:49001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.local.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/var<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122039094.png" alt="image-20220516122039094"> </p><p>配置workers，将三个主机名添加进去：vi workers</p><p><img src="/2022/05/16/hadoop/image-20220516122042633.png" alt="image-20220516122042633"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入/sbin目录下：</span><span class="token builtin class-name">cd</span> /root/soft/hadoop/sbin/<span class="token comment">#修改start-dfs.sh和stop-dfs.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_SECURE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122046435.png" alt="image-20220516122046435"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改start-yarn.sh和stop-yarn.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_DN_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122050361.png" alt="image-20220516122050361"> </p><p>切换到soft目录下：cd &#x2F;root&#x2F;soft</p><p>使用xsync脚本将hadoop-3.1.3发送到hadoop2、hadoop3：</p><p><img src="/2022/05/16/hadoop/image-20220516122054081.png" alt="image-20220516122054081"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换hadoop2、hadoop3在soft目录下创建hadoop-3.1.3的软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop<span class="token comment">#配置hadoop环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122058346.png" alt="image-20220516122058346"> </p><p><img src="/2022/05/16/hadoop/image-20220516122102094.png" alt="image-20220516122102094"> </p><h2 id="8-启动hadoop"><a href="#8-启动hadoop" class="headerlink" title="(8).启动hadoop"></a>(8).启动hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#格式化hadoop：</span>hadoop namenode -format</code></pre><p>注：hadoop只能格式化一次，在下面出现successfully formatted为格式化成功，这里由于我已经格式化了，就不附截图了。</p><p>在hadoop1启动hdfs：start-dfs.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122107291.png" alt="image-20220516122107291"> </p><p>在hadoop2启动yarn：start-yarn.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122112228.png" alt="image-20220516122112228"> </p><p>验证进程：</p><p>在hadoop1、hadoop2、hadoop3分别输入：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122116494.png" alt="image-20220516122116494"> </p><p><img src="/2022/05/16/hadoop/image-20220516122120013.png" alt="image-20220516122120013"> </p><p><img src="/2022/05/16/hadoop/image-20220516122123607.png" alt="image-20220516122123607"> </p><p>关闭防火墙：systemctl stop firewalld</p><p>在浏览器输入：192.168.246.132:9870</p><p><img src="/2022/05/16/hadoop/image-20220516140133885.png" alt="image-20220516140133885"> </p><p><img src="/2022/05/16/hadoop/image-20220516122128674.png" alt="image-20220516122128674"> </p><p>在浏览器输入：192.168.246.134:8088</p><p><img src="/2022/05/16/hadoop/image-20220516122132496.png" alt="image-20220516122132496"> </p><p>在浏览器端可查看每台服务器状态：</p><p><img src="/2022/05/16/hadoop/image-20220516122138080.png" alt="image-20220516122138080"> </p><h2 id="9-简单使用hadoop"><a href="#9-简单使用hadoop" class="headerlink" title="(9).简单使用hadoop"></a>(9).简单使用hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看hdfs的根目录：</span>hdfs dfs -ls /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122143737.png" alt="image-20220516122143737"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在根目录下创建文件夹：</span>hdfs dfs -mkdir /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122147922.png" alt="image-20220516122147922"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将linux本地文件上传到hdfs：</span>hdfs dfs -put emp.csv /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122151618.png" alt="image-20220516122151618"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#移动emp.csv的位置到/data目录下：</span>hdfs dfs -mv /emp.csv /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122155106.png" alt="image-20220516122155106"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将data目录下的emp.csv复制到hdfs的根目录下：</span>hdfs dfs -cp /data/emp.csv /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122159630.png" alt="image-20220516122159630"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看emp.csv文件内容：</span>hdfs dfs -cat /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122204310.png" alt="image-20220516122204310"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除文件emp-copy.csv：</span>hdfs dfs -rm /emp-copy.csv <span class="token comment">#删除data文件夹:</span>hdfs dfs -rm -r /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122209350.png" alt="image-20220516122209350"> </p><p><img src="/2022/05/16/hadoop/image-20220516122212683.png" alt="image-20220516122212683"> </p><p>使用wordcount脚本（自己编写的），对某个文件里面的字符进行统计</p><p>在linux本地创建1.txt文件并上传到hdfs根目录下的input（上面已有步骤，直接附截图）：</p><p><img src="/2022/05/16/hadoop/image-20220516122216665.png" alt="image-20220516122216665"> </p><p><img src="/2022/05/16/hadoop/image-20220516122220619.png" alt="image-20220516122220619"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#运行脚本：</span>hadoop jar wordcount-1.0-SNAPSHOT.jar org.example.MyMain /input/1.txt /output/wordcount</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122224444.png" alt="image-20220516122224444"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看结果：</span>hdfs dfs -cat /output/wordcount/part-r-00000</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122228709.png" alt="image-20220516122228709"> </p><p>在浏览器界面（9870）也可查看hdfs的文件存放情况：</p><p><img src="/2022/05/16/hadoop/image-20220516122232821.png" alt="image-20220516122232821"> </p><h1 id="2-ZooKeeper集群搭建及使用"><a href="#2-ZooKeeper集群搭建及使用" class="headerlink" title="2.ZooKeeper集群搭建及使用"></a>2.ZooKeeper集群搭建及使用</h1><h2 id="1-下载zookeeper安装包并解压"><a href="#1-下载zookeeper安装包并解压" class="headerlink" title="(1).下载zookeeper安装包并解压"></a>(1).下载zookeeper安装包并解压</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf zookeeper-3.4.9.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122236855.png" alt="image-20220516122236855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s zookeeper-3.4.9 zookeeper<span class="token comment">#同步zookeeper至其他机器：</span>xsync zookeeper-3.4.9</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="(2).配置环境变量"></a>(2).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/root/soft/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122242022.png" alt="image-20220516122242022"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（2）步骤</p><p><img src="/2022/05/16/hadoop/image-20220516122246648.png" alt="image-20220516122246648"> </p><h2 id="3-配置zoo-cfg"><a href="#3-配置zoo-cfg" class="headerlink" title="(3).配置zoo.cfg"></a>(3).配置zoo.cfg</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入conf目录：</span><span class="token builtin class-name">cd</span> zookeeper/conf/<span class="token comment">#复制zoo_sample.cf：</span><span class="token function">cp</span> zoo_sample.cfg zoo.cfg</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122251044.png" alt="image-20220516122251044"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑zoo.cfg：</span><span class="token function">vi</span> zoo.cfg<span class="token comment">#修改：</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/root/soft/zookeeper/zkData</code></pre><p><img src="/2022/05/16/hadoop/image-20225171803.png" alt="img"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#末尾添加：</span>server.1<span class="token operator">=</span>hadoop1:2888:3888server.2<span class="token operator">=</span>hadoop2:2888:3888server.3<span class="token operator">=</span>hadoop3:2888:3888</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122258768.png" alt="image-20220516122258768"> </p><p>server.A&#x3D;B: C: D。</p><p>A:机器编号  </p><p>B:主机名  </p><p>C: Leader与Follower的访问端口 </p><p>D:选举Leader接口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#同步zoo.cfg：</span>xsync zoo.cfg</code></pre><p>配置服务器编号：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入zookeeper：</span><span class="token builtin class-name">cd</span> <span class="token variable">$ZOOKEEPER_HOME</span><span class="token comment">#创建数据存放目录：</span><span class="token function">mkdir</span> zkData<span class="token comment">#编辑myid：.</span><span class="token function">vi</span> zkData/myid</code></pre><p>内容为：1</p><p><img src="/2022/05/16/hadoop/image-20220516122303679.png" alt="image-20220516122303679"> </p><p><img src="/2022/05/16/hadoop/image-20220516122307298.png" alt="image-20220516122307298"> </p><p>在hadoop2中的myid添加内容为：2</p><p>在hadoop3中的myid添加内容为：3</p><h2 id="4-编写zookeeper脚本"><a href="#4-编写zookeeper脚本" class="headerlink" title="(4).编写zookeeper脚本"></a>(4).编写zookeeper脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> zk.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh start "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------状态 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh status"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122311485.png" alt="image-20220516122311485"> </p><p>添加脚本执行权限：chmod u+x zk.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122316821.png" alt="image-20220516122316821"> </p><h2 id="5-启动zookeeper集群"><a href="#5-启动zookeeper集群" class="headerlink" title="(5).启动zookeeper集群"></a>(5).启动zookeeper集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群（启动前先检查防火墙。没关的关一下）：</span>zk.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122320281.png" alt="image-20220516122320281"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看各机器状态：</span>zk.sh status</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122324340.png" alt="image-20220516122324340"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止zookeeper集群：</span>zk.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122328422.png" alt="image-20220516122328422"> </p><h2 id="6-zookeeper集群的简单使用"><a href="#6-zookeeper集群的简单使用" class="headerlink" title="(6).zookeeper集群的简单使用"></a>(6).zookeeper集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群：</span>zk.sh start<span class="token comment">#进入zookeeper命令行：</span>zkCli.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122331781.png" alt="image-20220516122331781"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建节点（节点有四种类型，永久节点、临时节点、永久序列化节点、临时序列化节点）：</span><span class="token comment"># -s 序列化 -e 临时节点 path  创建路径  data 节点数据</span>create <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> path data  <span class="token comment">#创建demo临时节点：</span>create -e /demo <span class="token number">321</span><span class="token comment">#查看根下的所有节点：</span><span class="token function">ls</span> /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122336640.png" alt="image-20220516122336640"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看path下所有znode,以及zonde的属性：</span>ls2 /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122340206.png" alt="image-20220516122340206"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拿到/demo的数据：</span>get /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122344420.png" alt="image-20220516122344420"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改/demo的数据：</span><span class="token builtin class-name">set</span> /demo <span class="token number">456</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122348066.png" alt="image-20220516122348066"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#递归删除节点：</span>rmr /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122352849.png" alt="image-20220516122352849"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看历史记录：</span><span class="token function">history</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122356338.png" alt="image-20220516122356338"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出zookeeper命令行：</span>quit</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122400137.png" alt="image-20220516122400137"> </p><h1 id="3-HBase集群搭建及使用"><a href="#3-HBase集群搭建及使用" class="headerlink" title="3.HBase集群搭建及使用"></a>3.HBase集群搭建及使用</h1><h2 id="1-查看hbase与jdk、hadoop的版本匹配；"><a href="#1-查看hbase与jdk、hadoop的版本匹配；" class="headerlink" title="(1).查看hbase与jdk、hadoop的版本匹配；"></a>(1).查看hbase与jdk、hadoop的版本匹配；</h2><p><img src="/2022/05/16/hadoop/image-20220516122405362.png" alt="image-20220516122405362"> </p><p><img src="/2022/05/16/hadoop/image-20220516122409109.png" alt="image-20220516122409109"> </p><h2 id="2-集群规划"><a href="#2-集群规划" class="headerlink" title="(2).集群规划"></a>(2).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516122412571.png" alt="image-20220516122412571"> </p><h2 id="3-下载、解压hbase安装包"><a href="#3-下载、解压hbase安装包" class="headerlink" title="(3).下载、解压hbase安装包"></a>(3).下载、解压hbase安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf hbase-2.4.11-bin.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122416499.png" alt="image-20220516122416499"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hbase-2.4.11 hbase<span class="token comment">#同步zookeeper至其他机器：</span>xsync hbase-2.4.11<span class="token comment">#切换hadoop2、hadoop3创建软连接</span></code></pre><p> (4).配置环境变量；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_HOME</span><span class="token operator">=~</span>/soft/hbase-2.4.11<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HBASE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122421127.png" alt="image-20220516122421127"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hbase version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122426092.png" alt="image-20220516122426092"> </p><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（4）步骤</p><h2 id="5-配置hbase-site-xml"><a href="#5-配置hbase-site-xml" class="headerlink" title="(5).配置hbase-site.xml"></a>(5).配置hbase-site.xml</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到conf目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HBASE_HOME</span>/conf<span class="token comment">#编辑hbase-site.xml：</span><span class="token function">vi</span> hbase-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122430589.png" alt="image-20220516122430589"> </p><p>(先将原有配置全部删除)在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1,hadoop2,hadoop3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/zookeeper/zkData<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/hbase-2.4.11/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 在分布式的情况下一定要设置，不然容易出现Hmaster起不来的情况 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.unsafe.stream.capability.enforce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122435139.png" alt="image-20220516122435139"> </p><h2 id="6-配置regionservers"><a href="#6-配置regionservers" class="headerlink" title="(6).配置regionservers"></a>(6).配置regionservers</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑regionservers：</span><span class="token function">vi</span> regionservers <span class="token comment">#删除原有的localhost，添加如下内容： </span>hadoop1hadoop2hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122439505.png" alt="image-20220516122439505"> </p><h2 id="7-配置备用master"><a href="#7-配置备用master" class="headerlink" title="(7).配置备用master"></a>(7).配置备用master</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑backup-masters：</span><span class="token function">vi</span> backup-masters <span class="token comment">#添加内容为：</span>hadoop2</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122443768.png" alt="image-20220516122443768"> </p><p><img src="/2022/05/16/hadoop/image-20220516122447722.png" alt="image-20220516122447722"> </p><h2 id="8-软连接hadoop配置文件到hbase配置目录并分发hbase；"><a href="#8-软连接hadoop配置文件到hbase配置目录并分发hbase；" class="headerlink" title="(8).软连接hadoop配置文件到hbase配置目录并分发hbase；"></a>(8).软连接hadoop配置文件到hbase配置目录并分发hbase；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#软连接hadoop的core-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/core-site.xml core-site.xml<span class="token comment">#软连接hadoop的hdfs-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/hdfs-site.xml hdfs-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122452063.png" alt="image-20220516122452063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#返回上一级目录：</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">#同步conf文件夹：</span>xsync conf</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122456356.png" alt="image-20220516122456356"> </p><h2 id="9-启动hbase集群"><a href="#9-启动hbase集群" class="headerlink" title="(9).启动hbase集群"></a>(9).启动hbase集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase前需要先启动zookeeper、hadoop：</span>zk.sh startstart-all.shstart-hbase.sh<span class="token comment">#或者分开启动hbase：</span>hbase-daemon.sh start masterhbase-daemon.sh start regionserver</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122500574.png" alt="image-20220516122500574"> </p><p>分别在hadoop1、hadoop2、hadoop3输入jps查看节点：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122505347.png" alt="image-20220516122505347"> </p><p><img src="/2022/05/16/hadoop/image-20220516122508629.png" alt="image-20220516122508629"> </p><p><img src="/2022/05/16/hadoop/image-20220516122512505.png" alt="image-20220516122512505"> </p><p><img src="/2022/05/16/hadoop/image-20220516122517185.png" alt="image-20220516122517185"> </p><p>进入浏览器查看：192.168.246.132:16010</p><p><img src="/2022/05/16/hadoop/image-20220516122524759.png" alt="image-20220516122524759"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止hbase集群：</span>stop-hbase.sh<span class="token comment">#如果无法关闭就分别关闭master、regionserver：</span>hbase-daemons.sh stop regionserverhbase-daemons.sh stop master</code></pre><h2 id="10-hbase集群的简单使用；"><a href="#10-hbase集群的简单使用；" class="headerlink" title="(10).hbase集群的简单使用；"></a>(10).hbase集群的简单使用；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase集群：</span>start-hbase.sh<span class="token comment">#进入hbase命令行：</span>hbase shell</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122531557.png" alt="image-20220516122531557"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有表：</span>list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122537346.png" alt="image-20220516122537346"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建stu表：</span>create <span class="token string">'stu'</span>,<span class="token string">'info'</span>,<span class="token string">'no'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122542755.png" alt="image-20220516122542755"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看表结构：</span>describe <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122546736.png" alt="image-20220516122546736"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启用或禁用表：</span>is_enabled <span class="token string">'stu'</span>is_disabled <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122551001.png" alt="image-20220516122551001"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1001'</span>,<span class="token string">'info:name'</span>,<span class="token string">'HYX'</span><span class="token comment">#扫描表数据：</span>scan <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122555113.png" alt="image-20220516122555113"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#继续向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:name'</span>,<span class="token string">'Jack'</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:age'</span>,<span class="token string">'22'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122559328.png" alt="image-20220516122559328"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#统计表记录数：</span>count <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122604057.png" alt="image-20220516122604057"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除stu表需要禁用表：</span>disable <span class="token string">'stu'</span><span class="token comment">#删除表：</span>drop <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122607441.png" alt="image-20220516122607441"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出hbase命令行：</span><span class="token builtin class-name">exit</span> 或 quit</code></pre><h1 id="4-Kafka集群搭建及使用"><a href="#4-Kafka集群搭建及使用" class="headerlink" title="4.Kafka集群搭建及使用"></a>4.Kafka集群搭建及使用</h1><h2 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="(1).集群规划"></a>(1).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516140250117.png" alt="image-20220516140250117"> </p><h2 id="2-下载并解压安装包"><a href="#2-下载并解压安装包" class="headerlink" title="(2).下载并解压安装包"></a>(2).下载并解压安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile目录：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf kafka_2.11-2.4.1.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122622290.png" alt="image-20220516122622290"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s kafka_2.11-2.4.1 kafka<span class="token comment">#同步kafka至其他机器：</span>xsync kafka_2.11-2.4.1</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="(3).配置环境变量"></a>(3).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HOME</span><span class="token operator">=</span>/root/soft/kafka<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KAFKA_HOME</span>/bin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122628614.png" alt="image-20220516122628614"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（3）步骤</p><h2 id="4-分别在三台机器上创建logs目录"><a href="#4-分别在三台机器上创建logs目录" class="headerlink" title="(4).分别在三台机器上创建logs目录"></a>(4).分别在三台机器上创建logs目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#创建logs目录：</span><span class="token function">mkdir</span> logs</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122633371.png" alt="image-20220516122633371"> </p><h2 id="5-修改配置文件server-properties"><a href="#5-修改配置文件server-properties" class="headerlink" title="(5).修改配置文件server.properties"></a>(5).修改配置文件server.properties</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至config目录：</span><span class="token builtin class-name">cd</span> config<span class="token comment">#编辑server.properties：</span><span class="token function">vi</span> server.properties</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122637275.png" alt="image-20220516122637275"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改内容如下：</span>broker.id<span class="token operator">=</span><span class="token number">0</span><span class="token comment">#删除topic功能</span>delete.topic.enable<span class="token operator">=</span>truelog.dirs<span class="token operator">=</span>/root/soft/kafka/logszookeeper.connect<span class="token operator">=</span>hadoop1:2181,hadoop2:2181,hadoop3:2181/kafka</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122641096.png" alt="image-20220516122641096"> </p><p><img src="/2022/05/16/hadoop/image-20220516122644972.png" alt="image-20220516122644972"> </p><p><img src="/2022/05/16/hadoop/image-20220516122649136.png" alt="image-20220516122649136"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#分发server.properties到hadoop2、hadoop3：</span>xsync server.properties<span class="token comment">#修改hadoop2的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#修改hadoop3的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">2</span></code></pre><h2 id="6-编写kafka脚本"><a href="#6-编写kafka脚本" class="headerlink" title="(6).编写kafka脚本"></a>(6).编写kafka脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> kf.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-start.sh -daemon /root/soft/kafka/config/server.properties "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-stop.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122655855.png" alt="image-20220516122655855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加脚本执行权限：</span><span class="token function">chmod</span> u+x kf.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122701672.png" alt="image-20220516122701672"> </p><h2 id="7-启动kafka集群"><a href="#7-启动kafka集群" class="headerlink" title="(7).启动kafka集群"></a>(7).启动kafka集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash">启<span class="token comment">#动kafka集群需要先启动zookeeper集群：</span>zk.sh start <span class="token operator">|</span>  kf.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122705626.png" alt="image-20220516122705626"> </p><p>使用jps查看三台机器的节点是否启动：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122709528.png" alt="image-20220516122709528"> </p><p><img src="/2022/05/16/hadoop/image-20220516122713433.png" alt="image-20220516122713433"> </p><p><img src="/2022/05/16/hadoop/image-20220516122716947.png" alt="image-20220516122716947"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭kafka集群：</span>kf.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122721107.png" alt="image-20220516122721107"> </p><h2 id="8-kafka集群的简单使用"><a href="#8-kafka集群的简单使用" class="headerlink" title="(8).kafka集群的简单使用"></a>(8).kafka集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动kafka集群：</span>kf.sh start<span class="token comment">#进入kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#查看kafka topic列表：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122725063.png" alt="image-20220516122725063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--create --replication-factor <span class="token number">3</span> --partitions <span class="token number">1</span> --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122729379.png" alt="image-20220516122729379"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--delete --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122733878.png" alt="image-20220516122733878"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#发送消息：</span>bin/kafka-console-producer.sh <span class="token punctuation">\</span>--broker-list hadoop1:9092 --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122737468.png" alt="image-20220516122737468"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#消费消息：</span>bin/kafka-console-consumer.sh <span class="token punctuation">\</span>--bootstrap-server hadoop1:9092 --from-beginning --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122741682.png" alt="image-20220516122741682"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看某个topic的详情：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span> --describe --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122746568.png" alt="image-20220516122746568"> </p><p><img src="/2022/05/16/hadoop/image-20220516122750832.png" alt="image-20220516122750832"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改分区数：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --alter --topic demo --partitions <span class="token number">6</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122757161.png" alt="image-20220516122757161"></p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> zookeeper </tag>
            
            <tag> kafka </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

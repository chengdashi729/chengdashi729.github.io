<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ElasticSearch笔记</title>
      <link href="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>-</td><td><strong><a href="#1_Elasticsearch_33">第1章 Elasticsearch概述</a></strong></td><td>-</td></tr><tr><td><a href="#01_35">01-开篇</a></td><td><a href="#02_53">02-技术选型</a></td><td><a href="#03_94">03-教学大纲</a></td></tr><tr><td>-</td><td><strong><a href="#2_Elasticsearch_104">第2章 Elasticsearch入门</a></strong></td><td>-</td></tr><tr><td><a href="#04_106">04-入门-环境准备</a></td><td><a href="#05RESTful__JSON_152">05-入门-RESTful &amp; JSON</a></td><td><a href="#06Postman_163">06-入门-Postman客户端工具</a></td></tr><tr><td><a href="#07_172">07-入门-倒排索引</a></td><td><a href="#08HTTP_195">08-入门-HTTP-索引-创建</a></td><td><a href="#09HTTP___241">09-入门-HTTP-索引-查询 &amp; 删除</a></td></tr><tr><td><a href="#10HTTPPut__Post_316">10-入门-HTTP-文档-创建（Put &amp; Post）</a></td><td><a href="#11HTTP___392">11-入门-HTTP-查询-主键查询 &amp; 全查询</a></td><td><a href="#12HTTP_____485">12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除</a></td></tr><tr><td><a href="#13HTTP_____618">13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序</a></td><td><a href="#14HTTP___1264">14-入门-HTTP-多条件查询 &amp; 范围查询</a></td><td><a href="#15HTTP_____1522">15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询</a></td></tr><tr><td><a href="#16HTTP_1810">16-入门-HTTP-聚合查询</a></td><td><a href="#17HTTP_2049">17-入门-HTTP-映射关系</a></td><td><a href="#18JavaAPI_2369">18-入门-JavaAPI-环境准备</a></td></tr><tr><td><a href="#19JavaAPI_2441">19-入门-JavaAPI-索引-创建</a></td><td><a href="#20JavaAPI___2486">20-入门-JavaAPI-索引-查询 &amp; 删除</a></td><td><a href="#21JavaAPI___2569">21-入门-JavaAPI-文档-新增 &amp; 修改</a></td></tr><tr><td><a href="#22JavaAPI___2727">22-入门-JavaAPI-文档-查询 &amp; 删除</a></td><td><a href="#23JavaAPI___2799">23-入门-JavaAPI-文档-批量新增 &amp; 批量删除</a></td><td><a href="#24JavaAPI_2882">24-入门-JavaAPI-文档-高级查询-全量查询</a></td></tr><tr><td><a href="#25JavaAPI_____2982">25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</a></td><td><a href="#26JavaAPI___3173">26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</a></td><td><a href="#27JavaAPI___3317">27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</a></td></tr><tr><td><a href="#28JavaAPI___3477">28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#3_Elasticsearch_3587">第3章 Elasticsearch环境</a></strong></td><td>-</td></tr><tr><td><a href="#29_3589">29-环境-简介</a></td><td><a href="#30Windows_3622">30-环境-Windows集群部署</a></td><td><a href="#31Linux_3821">31-环境-Linux单节点部署</a></td></tr><tr><td><a href="#32Linux_3945">32-环境-Linux集群部署</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#4_Elasticsearch_4073">第4章 Elasticsearch进阶</a></strong></td><td>-</td></tr><tr><td><a href="#33_4075">33-进阶-核心概念</a></td><td><a href="#34_4156">34-进阶-系统架构-简介</a></td><td><a href="#35_4169">35-进阶-单节点集群</a></td></tr><tr><td><a href="#36_4209">36-进阶-故障转移</a></td><td><a href="#37_4228">37-进阶-水平扩容</a></td><td><a href="#38_4288">38-进阶-应对故障</a></td></tr><tr><td><a href="#39___4323">39-进阶-路由计算 &amp; 分片控制</a></td><td><a href="#40_4352">40-进阶-数据写流程</a></td><td><a href="#41_4372">41-进阶-数据读流程</a></td></tr><tr><td><a href="#42___4378">42-进阶-更新流程 &amp; 批量操作流程</a></td><td><a href="#43_4428">43-进阶-倒排索引</a></td><td><a href="#44_4501">44-进阶-文档搜索</a></td></tr><tr><td><a href="#45_____4557">45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并</a></td><td><a href="#46_4689">46-进阶-文档分析</a></td><td><a href="#47_5124">47-进阶-文档控制</a></td></tr><tr><td><a href="#48Kibana_5311">48-进阶-文档展示-Kibana</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#5_Elasticsearch_5340">第5章 Elasticsearch集成</a></strong></td><td>-</td></tr><tr><td><a href="#49SpringData_5342">49-框架集成-SpringData-整体介绍</a></td><td><a href="#50SpringData_5374">50-框架集成-SpringData-代码功能集成</a></td><td><a href="#51SpringData_5598">51-框架集成-SpringData-集成测试-索引操作</a></td></tr><tr><td><a href="#52SpringData_5639">52-框架集成-SpringData-集成测试-文档操作</a></td><td><a href="#53SpringData_5749">53-框架集成-SpringData-集成测试-文档搜索</a></td><td><a href="#54SparkStreaming_5800">54-框架集成-SparkStreaming-集成</a></td></tr><tr><td><a href="#55Flink_5931">55-框架集成-Flink-集成</a></td><td>-</td><td>-</td></tr><tr><td>-</td><td><strong><a href="#6_Elasticsearch_6060">第6章 Elasticsearch优化</a></strong></td><td>-</td></tr><tr><td><a href="#56_6062">56-优化-硬件选择</a></td><td><a href="#57_6084">57-优化-分片策略</a></td><td><a href="#58_6119">58-优化-路由选择</a></td></tr><tr><td><a href="#59_6140">59-优化-写入速度优化</a></td><td><a href="#60_6191">60-优化-内存设置</a></td><td><a href="#61_6214">61-优化-重要配置</a></td></tr><tr><td>-</td><td><strong><a href="#7_Elasticsearch_6228">第7章 Elasticsearch面试题</a></strong></td><td>-</td></tr><tr><td><a href="#62_6230">62-面试题</a></td><td>-</td><td>-</td></tr></tbody></table><h1 id="第1章-Elasticsearch概述"><a href="#第1章-Elasticsearch概述" class="headerlink" title="第1章 Elasticsearch概述"></a>第1章 <a href="https://so.csdn.net/so/search?q=Elasticsearch&spm=1001.2101.3001.7020">Elasticsearch</a>概述</h1><h2 id="01-开篇"><a href="#01-开篇" class="headerlink" title="01-开篇"></a>01-开篇</h2><p><a href="https://www.bilibili.com/video/BV1hh411D7sb">教学视频</a></p><p>结构化数据</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a421a414ea8fb8e25c466add5b00d31f.png" alt="img"></p><p>非结构化数据</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/109d3c62c1f36b4f352170488b516709.png" alt="img"></p><p>半结构化数据</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/48742ba6bbdc47e0dae2754027f30a31.png" alt="img"></p><h2 id="02-技术选型"><a href="#02-技术选型" class="headerlink" title="02-技术选型"></a>02-技术选型</h2><h3 id="Elasticsearch-是什么"><a href="#Elasticsearch-是什么" class="headerlink" title="Elasticsearch 是什么"></a>Elasticsearch 是什么</h3><p>The Elastic Stack, 包括 Elasticsearch、 Kibana、 Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><p>Elaticsearch，简称为 ES， ES 是一个<strong>开源的高扩展的分布式全文搜索引擎</strong>， 是整个 ElasticStack 技术栈的核心。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><blockquote><p>elastic<br>英 [ɪˈlæstɪk] 美 [ɪˈlæstɪk]<br>n. 橡皮圈(或带);松紧带<br>adj. 橡皮圈(或带)的;有弹性的;有弹力的;灵活的;可改变的;可伸缩的</p></blockquote><h3 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h3><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万个甚至更多。</li><li>支持大量基于交互式文本的查询。</li><li>需求非常灵活的全文搜索查询。</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</li><li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。</li></ul><p><strong>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎</strong>。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><h3 id="Elasticsearch-应用案例"><a href="#Elasticsearch-应用案例" class="headerlink" title="Elasticsearch 应用案例"></a>Elasticsearch 应用案例</h3><ul><li>GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。</li><li>维基百科：启动以 Elasticsearch 为基础的核心搜索架构</li><li>百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。</li><li>新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。</li><li>阿里：使用 Elasticsearch 构建日志采集和分析体系。</li><li>Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。</li></ul><h2 id="03-教学大纲"><a href="#03-教学大纲" class="headerlink" title="03-教学大纲"></a>03-教学大纲</h2><ul><li>第1章 Elasticsearch概述</li><li>第2章 Elasticsearch入门</li><li>第3章 Elasticsearch环境</li><li>第4章 Elasticsearch进阶</li><li>第5章 Elasticsearch集成</li><li>第6章 Elasticsearch优化</li><li>第7章 Elasticsearch面试题</li></ul><h1 id="第2章-Elasticsearch入门"><a href="#第2章-Elasticsearch入门" class="headerlink" title="第2章 Elasticsearch入门"></a>第2章 Elasticsearch入门</h1><h2 id="04-入门-环境准备"><a href="#04-入门-环境准备" class="headerlink" title="04-入门-环境准备"></a>04-入门-环境准备</h2><p><a href="https://www.elastic.co/cn/">官方网址</a></p><p><a href="https://www.elastic.co/guide/index.html">官方文档</a></p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">Elasticsearch 7.8.0下载页面</a></p><p>Windows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：</p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置 JDK 目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table><p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p><p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 <a href="https://so.csdn.net/so/search?q=RESTful&spm=1001.2101.3001.7020">RESTful</a> 端口。</p><p>打开浏览器，输入地址： <a href="http://localhost:9200，测试返回结果，返回结果如下：">http://localhost:9200，测试返回结果，返回结果如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"DESKTOP-LNJQ0VF"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"nCZqBhfdT1-pw8Yas4QU9w"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"7.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"zip"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"757314695644ea9a1dc2fecd26d1a43856725e65"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2020-06-14T19:35:50.234439Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"8.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><h2 id="05-入门-RESTful-amp-JSON"><a href="#05-入门-RESTful-amp-JSON" class="headerlink" title="05-入门-RESTful &amp; JSON"></a>05-入门-RESTful &amp; JSON</h2><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p><p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI(Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、 PUT、 POST 和DELETE。</p><p>在 REST 样式的 Web 服务中，每个资源都有一个地址。资源本身都是方法调用的目<br>标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP GET、 POST、PUT、 DELETE，还可能包括 HEAD 和 OPTIONS。简单的理解就是，**如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径， 以及对资源进行的操作(增删改查)**。</p><p>REST 样式的 Web 服务若有返回结果，大多数以JSON字符串形式返回。</p><h2 id="06-入门-Postman客户端工具"><a href="#06-入门-Postman客户端工具" class="headerlink" title="06-入门-Postman客户端工具"></a>06-入门-<a href="https://so.csdn.net/so/search?q=Postman&spm=1001.2101.3001.7020">Postman</a>客户端工具</h2><p>如果直接通过浏览器向 Elasticsearch 服务器发请求，那么需要在发送的请求中包含<br>HTTP 标准的方法，而 HTTP 的大部分特性且仅支持 GET 和 POST 方法。所以为了能方便地进行客户端的访问，可以使用 Postman 软件Postman 是一款强大的网页调试工具，提供功能强大的 Web API 和 HTTP 请求调试。</p><p>软件功能强大，界面简洁明晰、操作方便快捷，设计得很人性化。 Postman 中文版能够发送任何类型的 HTTP 请求 (GET, HEAD, POST, PUT…)，不仅能够表单提交，且可以附带任意类型请求体。</p><p><a href="https://www.postman.com/downloads/">Postman下载页面</a></p><h2 id="07-入门-倒排索引"><a href="#07-入门-倒排索引" class="headerlink" title="07-入门-倒排索引"></a>07-入门-倒排索引</h2><p>正排索引（传统）</p><table><thead><tr><th>id</th><th>content</th></tr></thead><tbody><tr><td>1001</td><td>my name is zhang san</td></tr><tr><td>1002</td><td>my name is li si</td></tr></tbody></table><p>倒排索引</p><table><thead><tr><th>keyword</th><th>id</th></tr></thead><tbody><tr><td>name</td><td>1001, 1002</td></tr><tr><td>zhang</td><td>1001</td></tr></tbody></table><p>Elasticsearch 是<strong>面向文档型数据库</strong>，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/146a779da01f53e7f7a8d53132d3c7cf.png" alt="img"></p><p>ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。</p><h2 id="08-入门-HTTP-索引-创建"><a href="#08-入门-HTTP-索引-创建" class="headerlink" title="08-入门-HTTP-索引-创建"></a>08-入门-HTTP-索引-创建</h2><p>对比关系型数据库，创建索引就等同于创建数据库。</p><p>在 Postman 中，向 ES 服务器发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>请求后，服务器返回响应：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//响应结果</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//分片结果</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token comment">//索引名称</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>后台日志：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">[2021-04-08T13:57:06,954][INFO ][o.e.c.m.MetadataCreateIndexService] [DESKTOP-LNJQ0VF] [shopping] creating index, cause [api], templates [], shards [1]&#x2F;[1], mappings []1</code></pre><p>如果重复发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a> 添加索引，会返回错误信息 :</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"resource_already_exists_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists"</span><span class="token punctuation">,</span>                <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"J0WlEhh4R7aDrfIc3AkwWQ"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"resource_already_exists_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists"</span><span class="token punctuation">,</span>        <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"J0WlEhh4R7aDrfIc3AkwWQ"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><h2 id="09-入门-HTTP-索引-查询-amp-删除"><a href="#09-入门-HTTP-索引-查询-amp-删除" class="headerlink" title="09-入门-HTTP-索引-查询 &amp; 删除"></a>09-入门-HTTP-索引-查询 &amp; 删除</h2><h3 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></p><p>这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :</p><pre class="language-none"><code class="language-none">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b12</code></pre><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>health</td><td>当前服务器健康状态： green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td></tr><tr><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>index</td><td>索引名</td></tr><tr><td>uuid</td><td>索引统一编号</td></tr><tr><td>pri</td><td>主分片数量</td></tr><tr><td>rep</td><td>副本数量</td></tr><tr><td>docs.count</td><td>可用文档数量</td></tr><tr><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table><h3 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"shopping"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//索引名</span>        <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//别名</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//映射</span>        <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置</span>            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置 - 索引</span>                <span class="token property">"creation_date"</span><span class="token operator">:</span> <span class="token string">"1617861426847"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 创建时间</span>                <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token string">"J0WlEhh4R7aDrfIc3AkwWQ"</span><span class="token punctuation">,</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                <span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置 - 索引 - 主分片数量</span>                    <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"7080099"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"provided_name"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token comment">//设置 - 索引 - 主分片数量</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token number">123</span></code></pre><p>再次查看所有索引，GET <a href="http://127.0.0.1:9200/_cat/indices?v%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/_cat/indices?v，返回结果如下：</a></p><pre class="language-none"><code class="language-none">health status index uuid pri rep docs.count docs.deleted store.size pri.store.size1</code></pre><p>成功删除。</p><h2 id="10-入门-HTTP-文档-创建（Put-amp-Post）"><a href="#10-入门-HTTP-文档-创建（Put-amp-Post）" class="headerlink" title="10-入门-HTTP-文档-创建（Put &amp; Post）"></a>10-入门-HTTP-文档-创建（Put &amp; Post）</h2><p>假设索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/20d54cba223bd9d70ea356d3e40a8161.png" alt="img"></p><p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。</p><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span><span class="token comment">//索引</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token comment">//类型-文档</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span><span class="token comment">//唯一标识，可以类比为 MySQL 中的主键，随机生成</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//版本</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span><span class="token comment">//结果，这里的 create 表示创建成功</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//分片 - 总数</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//分片 - 总数</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token comment">//分片 - 总数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。</p><p>如果想要自定义唯一性标识，需要在创建时指定： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token comment">//&lt;------------------自定义唯一性标识</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p><strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。</strong></p><h2 id="11-入门-HTTP-查询-主键查询-amp-全查询"><a href="#11-入门-HTTP-查询-主键查询-amp-全查询" class="headerlink" title="11-入门-HTTP-查询-主键查询 &amp; 全查询"></a>11-入门-HTTP-查询-<a href="https://so.csdn.net/so/search?q=%E4%B8%BB%E9%94%AE&spm=1001.2101.3001.7020">主键</a>查询 &amp; 全查询</h2><p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a> 。</p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>        <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>        <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>查找不存在的内容，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1001%E3%80%82">http://127.0.0.1:9200/shopping/_doc/1001。</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_search%E3%80%82">http://127.0.0.1:9200/shopping/_search。</a></p><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">133</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span></code></pre><h2 id="12-入门-HTTP-全量修改-amp-局部修改-amp-删除"><a href="#12-入门-HTTP-全量修改-amp-局部修改-amp-删除" class="headerlink" title="12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除"></a>12-入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除</h2><h3 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h3><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p><p>请求体JSON内容为:</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机"</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/hw.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">1999.00</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>修改成功后，服务器响应结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span><span class="token comment">//&lt;-----------updated 表示数据被更新</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><h3 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h3><p>修改数据时，也可以只修改某一给条数据的局部信息</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_update/1%E3%80%82">http://127.0.0.1:9200/shopping/_update/1。</a></p><p>请求体JSON内容为:</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span><span class="token comment">//&lt;-----------updated 表示数据被更新</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>        <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>        <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/hw.jpg"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"deleted"</span><span class="token punctuation">,</span><span class="token comment">//&lt;---删除成功</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%88%A0%E9%99%A4%E6%88%90%E5%8A%9F%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><h2 id="13-入门-HTTP-条件查询-amp-分页查询-amp-查询排序"><a href="#13-入门-HTTP-条件查询-amp-分页查询-amp-查询排序" class="headerlink" title="13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序"></a>13-入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>假设有以下文档内容，（在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%89%EF%BC%9A">http://127.0.0.1:9200/shopping/_search）：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h4 id="URL带参查询"><a href="#URL带参查询" class="headerlink" title="URL带参查询"></a>URL带参查询</h4><p><strong>查找category为小米的文档</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search?q=category:%E5%B0%8F%E7%B1%B3%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search?q=category:小米，返回结果如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">94</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><p>上述为URL带参数形式查询，这很容易让不善者心怀恶意，或者参数值出现中文会出现乱码情况。为了避免这些情况，我们可用使用带JSON请求体请求进行查询。</p><h4 id="请求体带参查询"><a href="#请求体带参查询" class="headerlink" title="请求体带参查询"></a>请求体带参查询</h4><p>接下带JSON请求体，还是<strong>查找category为小米的文档</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><h4 id="带请求体方式的查找所有内容"><a href="#带请求体方式的查找所有内容" class="headerlink" title="带请求体方式的查找所有内容"></a>带请求体方式的查找所有内容</h4><p><strong>查找所有文档内容</strong>，也可以这样，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>则返回所有文档内容：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h4 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h4><p><strong>如果你想查询指定字段</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"_source"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273</span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"from"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    <span class="token string">"took"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token string">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token string">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token string">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token string">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token string">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token string">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token string">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token string">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span></code></pre><h3 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h3><p>如果你想通过排序查出价格最高的手机，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"sort"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"order"</span><span class="token operator">:</span><span class="token string">"desc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">96</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">3999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token number">1999</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109</span></code></pre><h2 id="14-入门-HTTP-多条件查询-amp-范围查询"><a href="#14-入门-HTTP-多条件查询-amp-范围查询" class="headerlink" title="14-入门-HTTP-多条件查询 &amp; 范围查询"></a>14-入门-HTTP-多条件查询 &amp; 范围查询</h2><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>假设想找出小米牌子，价格为3999元的。（must相当于数据库的&amp;&amp;）</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"must"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">134</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">2.3862944</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">2.3862944</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031</span></code></pre><p>假设想找出小米和华为的牌子。（should相当于数据库的||）</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"should"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"filter"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"range"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"gt"</span><span class="token operator">:</span><span class="token number">2000</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>假设想找出小米和华为的牌子，价格大于2000元的手机。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"should"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"filter"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"range"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"gt"</span><span class="token operator">:</span><span class="token number">2000</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">72</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1.3862942</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031</span></code></pre><h2 id="15-入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询"><a href="#15-入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询" class="headerlink" title="15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询"></a>15-入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询</h2><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span> <span class="token operator">:</span> <span class="token string">"小华"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</span></code></pre><h3 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_phrase"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span> <span class="token operator">:</span> <span class="token string">"为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></code></pre><h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match_phrase"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"category"</span> <span class="token operator">:</span> <span class="token string">"为"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"highlight"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"category"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//&lt;----高亮这字段</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"华&lt;em>为&lt;/em>"</span><span class="token comment">//&lt;------高亮一个为字。</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"华&lt;em>为&lt;/em>"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.6931471</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"华&lt;em>为&lt;/em>"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970</span></code></pre><h2 id="16-入门-HTTP-聚合查询"><a href="#16-入门-HTTP-聚合查询" class="headerlink" title="16-入门-HTTP-聚合查询"></a>16-入门-HTTP-聚合查询</h2><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p><p>接下来按price字段进行分组：</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//聚合操作</span><span class="token property">"price_group"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//名称，随意起名</span><span class="token property">"terms"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//分组</span><span class="token property">"field"</span><span class="token operator">:</span><span class="token string">"price"</span><span class="token comment">//分组字段</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"ANQqsHgBaKNfVnMbhZYU"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"A9R5sHgBaKNfVnMb25Ya"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BNR5sHgBaKNfVnMb7pal"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"小米手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BtR6sHgBaKNfVnMbX5Y5"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"B9R6sHgBaKNfVnMbZpZ6"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"CdR7sHgBaKNfVnMbsJb9"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为手机"</span><span class="token punctuation">,</span>                    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"华为"</span><span class="token punctuation">,</span>                    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>                    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1999</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"price_group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"doc_count_error_upper_bound"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"sum_other_doc_count"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"buckets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">5</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">3999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107</span></code></pre><p>上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price_group"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"terms"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"field"</span><span class="token operator">:</span><span class="token string">"price"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"price_group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"doc_count_error_upper_bound"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"sum_other_doc_count"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"buckets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">5</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token number">3999</span><span class="token punctuation">,</span>                    <span class="token property">"doc_count"</span><span class="token operator">:</span> <span class="token number">1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334</span></code></pre><p>若想对所有手机价格求<strong>平均值</strong>。</p><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"aggs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"price_avg"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//名称，随意起名</span><span class="token property">"avg"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">//求平均</span><span class="token property">"field"</span><span class="token operator">:</span><span class="token string">"price"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"price_avg"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">2332.3333333333335</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223</span></code></pre><h2 id="17-入门-HTTP-映射关系"><a href="#17-入门-HTTP-映射关系" class="headerlink" title="17-入门-HTTP-映射关系"></a>17-入门-HTTP-映射关系</h2><p>有了索引库，等于有了数据库中的 database。</p><p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p><p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p><p>先创建一个索引：</p><pre class="language-json" data-language="json"><code class="language-json"># PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user</span><span class="token number">1</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p><strong>创建映射</strong></p><pre class="language-json" data-language="json"><code class="language-json"># PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_mapping</span><span class="token punctuation">&#123;</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"sex"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"tel"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token number">123</span></code></pre><p><strong>查询映射</strong></p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_mapping</span><span class="token number">1</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"tel"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>增加数据</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_create/1001</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span><span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男的"</span><span class="token punctuation">,</span><span class="token property">"tel"</span><span class="token operator">:</span><span class="token string">"1111"</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>查找name含有”小“数据：</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"小"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">495</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男的"</span><span class="token punctuation">,</span>                    <span class="token property">"tel"</span><span class="token operator">:</span> <span class="token string">"1111"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>查找sex含有”男“数据：</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>找不想要的结果，只因创建映射时”sex”的类型为”keyword”。</p><p>“sex”只能完全为”男的“，才能得出原数据。</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男的"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"eq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>                <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>                <span class="token property">"_score"</span><span class="token operator">:</span> <span class="token number">0.2876821</span><span class="token punctuation">,</span>                <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小米"</span><span class="token punctuation">,</span>                    <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男的"</span><span class="token punctuation">,</span>                    <span class="token property">"tel"</span><span class="token operator">:</span> <span class="token string">"1111"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>查询电话</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/user/_search</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"tel"</span><span class="token operator">:</span><span class="token string">"11"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"query_shard_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"failed to create query: Cannot search on field [tel] since it is not indexed."</span><span class="token punctuation">,</span>                <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"ivLnMfQKROS7Skb2MTFOew"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"search_phase_execution_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"all shards failed"</span><span class="token punctuation">,</span>        <span class="token property">"phase"</span><span class="token operator">:</span> <span class="token string">"query"</span><span class="token punctuation">,</span>        <span class="token property">"grouped"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"failed_shards"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"shard"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"4P7dIRfXSbezE5JTiuylew"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"query_shard_exception"</span><span class="token punctuation">,</span>                    <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"failed to create query: Cannot search on field [tel] since it is not indexed."</span><span class="token punctuation">,</span>                    <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"ivLnMfQKROS7Skb2MTFOew"</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>                    <span class="token property">"caused_by"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"illegal_argument_exception"</span><span class="token punctuation">,</span>                        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Cannot search on field [tel] since it is not indexed."</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334</span></code></pre><p>报错只因创建映射时”tel”的”index”为false。</p><h2 id="18-入门-JavaAPI-环境准备"><a href="#18-入门-JavaAPI-环境准备" class="headerlink" title="18-入门-JavaAPI-环境准备"></a>18-入门-JavaAPI-环境准备</h2><p>新建Maven工程。</p><p>添加依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- elasticsearch 的客户端 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- elasticsearch 依赖 2.x 的 log4j --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- junit 单元测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>1234567891011121314151617181920212223242526272829303132333435</code></pre><p>HelloElasticsearch</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloElasticsearch</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建客户端对象</span><span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭客户端连接</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819</span></code></pre><h2 id="19-入门-JavaAPI-索引-创建"><a href="#19-入门-JavaAPI-索引-创建" class="headerlink" title="19-入门-JavaAPI-索引-创建"></a>19-入门-JavaAPI-索引-创建</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>create<span class="token punctuation">.</span></span><span class="token class-name">CreateIndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>create<span class="token punctuation">.</span></span><span class="token class-name">CreateIndexResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateIndex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建索引 - 请求对象</span>        <span class="token class-name">CreateIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送请求，获取响应</span>        <span class="token class-name">CreateIndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> acknowledged <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 响应状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作状态 = "</span> <span class="token operator">+</span> acknowledged<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭客户端连接</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>后台打印：</p><pre class="language-\" data-language="\"><code class="language-\">四月 09, 2021 2:12:08 下午 org.elasticsearch.client.RestClient logResponse警告: request [PUT http:&#x2F;&#x2F;localhost:9200&#x2F;user2?master_timeout&#x3D;30s&amp;include_type_name&#x3D;true&amp;timeout&#x3D;30s] returned 1 warnings: [299 Elasticsearch-7.8.0-757314695644ea9a1dc2fecd26d1a43856725e65 &quot;[types removal] Using include_type_name in create index requests is deprecated. The parameter will be removed in the next major version.&quot;]操作状态 &#x3D; trueProcess finished with exit code 012345</code></pre><h2 id="20-入门-JavaAPI-索引-查询-amp-删除"><a href="#20-入门-JavaAPI-索引-查询-amp-删除" class="headerlink" title="20-入门-JavaAPI-索引-查询 &amp; 删除"></a>20-入门-JavaAPI-索引-查询 &amp; 删除</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>indices<span class="token punctuation">.</span></span><span class="token class-name">GetIndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>indices<span class="token punctuation">.</span></span><span class="token class-name">GetIndexResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchIndex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询索引 - 请求对象</span>        <span class="token class-name">GetIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送请求，获取响应</span>        <span class="token class-name">GetIndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aliases:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mappings:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"settings:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">aliases:&#123;user2&#x3D;[]&#125;mappings:&#123;user2&#x3D;org.elasticsearch.cluster.metadata.MappingMetadata@ad700514&#125;settings:&#123;user2&#x3D;&#123;&quot;index.creation_date&quot;:&quot;1617948726976&quot;,&quot;index.number_of_replicas&quot;:&quot;1&quot;,&quot;index.number_of_shards&quot;:&quot;1&quot;,&quot;index.provided_name&quot;:&quot;user2&quot;,&quot;index.uuid&quot;:&quot;UGZ1ntcySnK6hWyP2qoVpQ&quot;,&quot;index.version.created&quot;:&quot;7080099&quot;&#125;&#125;Process finished with exit code 012345</code></pre><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteIndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>support<span class="token punctuation">.</span>master<span class="token punctuation">.</span></span><span class="token class-name">AcknowledgedResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteIndex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除索引 - 请求对象</span>        <span class="token class-name">DeleteIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送请求，获取响应</span>        <span class="token class-name">AcknowledgedResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作结果 ： "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">操作结果 ： trueProcess finished with exit code 0123</code></pre><h2 id="21-入门-JavaAPI-文档-新增-amp-修改"><a href="#21-入门-JavaAPI-文档-新增-amp-修改" class="headerlink" title="21-入门-JavaAPI-文档-新增 &amp; 修改"></a>21-入门-JavaAPI-文档-新增 &amp; 修改</h2><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是<strong>个人</strong>对它进行重构。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910</span></code></pre><p>重构后的代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ElasticsearchTask</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">ElasticsearchTask</span> task<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>                <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            task<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 关闭客户端连接</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415</span></code></pre><p>接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">//do something</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789</span></code></pre><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span><span class="token class-name">XContentType</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 新增文档 - 请求对象</span>            <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置索引及唯一性标识</span>            request<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建数据对象</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> productJson <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 添加文档数据，数据格式为 JSON 格式</span>            request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>productJson<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 客户端发送请求，获取响应对象</span>            <span class="token class-name">IndexResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">3.</span>打印结果信息            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_result:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">_index:user_id:1001_result:UPDATEDProcess finished with exit code 012345</code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>update<span class="token punctuation">.</span></span><span class="token class-name">UpdateRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>update<span class="token punctuation">.</span></span><span class="token class-name">UpdateResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span><span class="token class-name">XContentType</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 修改文档 - 请求对象</span>            <span class="token class-name">UpdateRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 配置修改参数</span>            request<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置请求体，对数据进行修改</span>            request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 客户端发送请求，获取响应对象</span>            <span class="token class-name">UpdateResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_result:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">_index:user_id:1001_result:UPDATEDProcess finished with exit code 012345</code></pre><h2 id="22-入门-JavaAPI-文档-查询-amp-删除"><a href="#22-入门-JavaAPI-文档-查询-amp-删除" class="headerlink" title="22-入门-JavaAPI-文档-查询 &amp; 删除"></a>22-入门-JavaAPI-文档-查询 &amp; 删除</h2><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>get<span class="token punctuation">.</span></span><span class="token class-name">GetRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>get<span class="token punctuation">.</span></span><span class="token class-name">GetResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.创建请求对象</span>            <span class="token class-name">GetRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.客户端发送请求，获取响应对象</span>            <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">3.</span>打印结果信息            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_type:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"source:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">_index:user_type:_doc_id:1001source:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:30,&quot;sex&quot;:&quot;男&quot;&#125;Process finished with exit code 0123456</code></pre><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建请求对象</span>            <span class="token class-name">DeleteRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">DeleteResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><p>后台打印：</p><pre class="language-none"><code class="language-none">DeleteResponse[index&#x3D;user,type&#x3D;_doc,id&#x3D;1001,version&#x3D;16,result&#x3D;deleted,shards&#x3D;ShardInfo&#123;total&#x3D;2, successful&#x3D;1, failures&#x3D;[]&#125;]Process finished with exit code 0123</code></pre><h2 id="23-入门-JavaAPI-文档-批量新增-amp-批量删除"><a href="#23-入门-JavaAPI-文档-批量新增-amp-批量删除" class="headerlink" title="23-入门-JavaAPI-文档-批量新增 &amp; 批量删除"></a>23-入门-JavaAPI-文档-批量新增 &amp; 批量删除</h2><h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span><span class="token class-name">XContentType</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchInsertDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建批量新增请求对象</span>            <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                    <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                            <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                    <span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">BulkResponse</span> responses <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"items:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:294msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ffProcess finished with exit code 01234</code></pre><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>bulk<span class="token punctuation">.</span></span><span class="token class-name">BulkResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>delete<span class="token punctuation">.</span></span><span class="token class-name">DeleteRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchDeleteDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建批量删除请求对象</span>            <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">BulkResponse</span> responses <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"items:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:108msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@7b02881eProcess finished with exit code 012345</code></pre><h2 id="24-入门-JavaAPI-文档-高级查询-全量查询"><a href="#24-入门-JavaAPI-文档-高级查询-全量查询" class="headerlink" title="24-入门-JavaAPI-文档-高级查询-全量查询"></a>24-入门-JavaAPI-文档-高级查询-全量查询</h2><p>先批量增加数据</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchInsertDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建批量新增请求对象</span>            <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu1"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1004"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu2"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1005"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu3"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"50"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1006"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu4"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//客户端发送请求，获取响应对象</span>            <span class="token class-name">BulkResponse</span> responses <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"items:"</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:168msitems:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ffProcess finished with exit code 01234</code></pre><p><strong>查询所有索引数据</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建搜索请求对象</span>            <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 构建查询的请求体</span>            <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 查询所有数据</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 查询匹配</span>            <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:2mstimeout:falsetotal:6 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 01234567891011121314</code></pre><h2 id="25-入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序"><a href="#25-入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序" class="headerlink" title="25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序"></a>25-入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</h2><h3 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_CONDITION <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:1 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1234567</code></pre><h3 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_PAGING <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分页查询</span>        <span class="token comment">// 当前页其实索引(第一条数据的顺序号)， from</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 每页显示多少条 size</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:6 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;12345678</code></pre><h3 id="查询排序-1"><a href="#查询排序-1" class="headerlink" title="查询排序"></a>查询排序</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_ORDER <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 排序</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token class-name">SortOrder</span><span class="token punctuation">.</span>ASC<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:6 hitsMaxScore:NaNhits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;123456789101112</code></pre><h2 id="26-入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询"><a href="#26-入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询" class="headerlink" title="26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询"></a>26-入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</h2><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_BOOL_CONDITION <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BoolQueryBuilder</span> boolQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 必须包含</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 一定不含</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">mustNot</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可能包含</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_BOOL_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:28mstimeout:falsetotal:1 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 0123456789</code></pre><h3 id="范围查询-1"><a href="#范围查询-1" class="headerlink" title="范围查询"></a>范围查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_RANGE <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RangeQueryBuilder</span> rangeQuery <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 大于等于</span>        <span class="token comment">//rangeQuery.gte("30");</span>        <span class="token comment">// 小于等于</span>        rangeQuery<span class="token punctuation">.</span><span class="token function">lte</span><span class="token punctuation">(</span><span class="token string">"40"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>rangeQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_RANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:1mstimeout:falsetotal:5 hitsMaxScore:1.0hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 012345678910111213</code></pre><h2 id="27-入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询"><a href="#27-入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询" class="headerlink" title="27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询"></a>27-入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_BY_FUZZY_CONDITION <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建搜索请求对象</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建查询的请求体</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">fuzzyQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fuzziness</span><span class="token punctuation">(</span><span class="token class-name">Fuzziness</span><span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询匹配</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MaxScore:"</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits========>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出每条查询的结果信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_ALL);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);</span><span class="token comment">//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_BY_FUZZY_CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took:152mstimeout:falsetotal:4 hitsMaxScore:1.2837042hits&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&lt;&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Process finished with exit code 0123456789101112</code></pre><h3 id="高亮查询-1"><a href="#高亮查询-1" class="headerlink" title="高亮查询"></a>高亮查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermsQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_HIGHLIGHT <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 高亮查询</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建查询请求体构建器</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建查询方式：高亮查询</span>        <span class="token class-name">TermsQueryBuilder</span> termsQueryBuilder <span class="token operator">=</span>                <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termsQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置查询方式</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>termsQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建高亮字段</span>        <span class="token class-name">HighlightBuilder</span> highlightBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">preTags</span><span class="token punctuation">(</span><span class="token string">"&lt;font color='red'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置标签前缀</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">postTags</span><span class="token punctuation">(</span><span class="token string">"&lt;/font>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置标签后缀</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置高亮字段</span>        <span class="token comment">//设置高亮构建对象</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span>highlightBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求体</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.客户端发送请求，获取响应对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.打印响应结果</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"took::"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">getTook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time_out::"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">isTimedOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total::"</span><span class="token operator">+</span>hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max_score::"</span><span class="token operator">+</span>hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hits::::>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sourceAsString <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打印高亮结果</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HighlightField</span><span class="token punctuation">></span></span> highlightFields <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>highlightFields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;::::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_HIGHLIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">took::672mstime_out::falsetotal::1 hitsmax_score::1.0hits::::&gt;&gt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#123;name&#x3D;[name], fragments[[&lt;font color&#x3D;&#39;red&#39;&gt;zhangsan&lt;&#x2F;font&gt;]]&#125;&lt;&lt;::::Process finished with exit code 012345678910</code></pre><h2 id="28-入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询"><a href="#28-入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询" class="headerlink" title="28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询"></a>28-入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</h2><h3 id="最大值查询"><a href="#最大值查询" class="headerlink" title="最大值查询"></a>最大值查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermsQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span></span><span class="token class-name">AggregationBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_MAX <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 高亮查询</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span><span class="token class-name">AggregationBuilders</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">"maxAge"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求体</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.客户端发送请求，获取响应对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.打印响应结果</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">&#123;&quot;took&quot;:16,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;max#maxAge&quot;:&#123;&quot;value&quot;:50.0&#125;&#125;&#125;Process finished with exit code 0123</code></pre><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ConnectElasticsearch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>hello<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RequestOptions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">Fuzziness</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">BoolQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RangeQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermsQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span></span><span class="token class-name">SearchHits</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span></span><span class="token class-name">AggregationBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SearchSourceBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>subphase<span class="token punctuation">.</span>highlight<span class="token punctuation">.</span></span><span class="token class-name">HighlightField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortOrder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryDoc</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ElasticsearchTask</span> SEARCH_WITH_GROUP <span class="token operator">=</span> client <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span><span class="token class-name">AggregationBuilders</span><span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span><span class="token string">"age_groupby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求体</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.客户端发送请求，获取响应对象</span>        <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.打印响应结果</span>        <span class="token class-name">SearchHits</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConnectElasticsearch</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>SEARCH_WITH_GROUP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940</span></code></pre><p>后台打印</p><pre class="language-none"><code class="language-none">&#123;&quot;took&quot;:10,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;lterms#age_groupby&quot;:&#123;&quot;doc_count_error_upper_bound&quot;:0,&quot;sum_other_doc_count&quot;:0,&quot;buckets&quot;:[&#123;&quot;key&quot;:20,&quot;doc_count&quot;:2&#125;,&#123;&quot;key&quot;:10,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:30,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:40,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:50,&quot;doc_count&quot;:1&#125;]&#125;&#125;&#125;Process finished with exit code 0123</code></pre><h1 id="第3章-Elasticsearch环境"><a href="#第3章-Elasticsearch环境" class="headerlink" title="第3章 Elasticsearch环境"></a>第3章 Elasticsearch环境</h1><h2 id="29-环境-简介"><a href="#29-环境-简介" class="headerlink" title="29-环境-简介"></a>29-环境-简介</h2><h3 id="单机-amp-集群"><a href="#单机-amp-集群" class="headerlink" title="单机 &amp; 集群"></a>单机 &amp; 集群</h3><p>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br>性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br>除了负载能力，单点服务器也存在其他问题：</p><ul><li>单台机器存储容量有限</li><li>单服务器容易出现单点故障，无法实现高可用</li><li>单服务的并发处理能力有限</li></ul><p>配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br>般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</p><p>总之，集群能提高性能，增加容错。</p><h3 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群 Cluster"></a>集群 Cluster</h3><p><strong>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</strong>一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p><h3 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h3><p>集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p><p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br>行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br>集群。</p><h2 id="30-环境-Windows集群部署"><a href="#30-环境-Windows集群部署" class="headerlink" title="30-环境-Windows集群部署"></a>30-环境-Windows集群部署</h2><h3 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h3><p>一、创建 elasticsearch-cluster 文件夹</p><p>创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/6d6022b6d30a9e2c1a4e18092d5f130f.png" alt="img"></p><p>二、修改集群文件目录中每个节点的 config&#x2F;elasticsearch.yml 配置文件</p><p><strong>node-1001 节点</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点 1 的配置信息：</span><span class="token comment">#集群名称，节点之间要保持一致</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，集群内要唯一</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1001</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#ip 地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> localhost<span class="token comment">#http 端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">1001</span><span class="token comment">#tcp 监听端口</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9301</span><span class="token comment">#discovery.seed_hosts: ["localhost:9301", "localhost:9302","localhost:9303"]</span><span class="token comment">#discovery.zen.fd.ping_timeout: 1m</span><span class="token comment">#discovery.zen.fd.ping_retries: 5</span><span class="token comment">#集群内的可以被选为主节点的节点列表</span><span class="token comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span><span class="token comment">#跨域配置</span><span class="token comment">#action.destructive_requires_name: true</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>12345678910111213141516171819202122</code></pre><p><strong>node-1002 节点</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点 2 的配置信息：</span><span class="token comment">#集群名称，节点之间要保持一致</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，集群内要唯一</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1002</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#ip 地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> localhost<span class="token comment">#http 端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">1002</span><span class="token comment">#tcp 监听端口</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9302</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9301"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.zen.fd.ping_timeout</span><span class="token punctuation">:</span> 1m<span class="token key atrule">discovery.zen.fd.ping_retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token comment">#集群内的可以被选为主节点的节点列表</span><span class="token comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span><span class="token comment">#跨域配置</span><span class="token comment">#action.destructive_requires_name: true</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>12345678910111213141516171819202122</code></pre><p><strong>node-1003 节点</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#节点 3 的配置信息：</span><span class="token comment">#集群名称，节点之间要保持一致</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch<span class="token comment">#节点名称，集群内要唯一</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1003</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#ip 地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> localhost<span class="token comment">#http 端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">1003</span><span class="token comment">#tcp 监听端口</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9303</span><span class="token comment">#候选主节点的地址，在开启服务后可以被选为主节点</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9301"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9302"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.zen.fd.ping_timeout</span><span class="token punctuation">:</span> 1m<span class="token key atrule">discovery.zen.fd.ping_retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token comment">#集群内的可以被选为主节点的节点列表</span><span class="token comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span><span class="token comment">#跨域配置</span><span class="token comment">#action.destructive_requires_name: true</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>1234567891011121314151617181920212223</code></pre><p>三、如果有必要，删除每个节点中的 data 目录中所有内容 。</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>分别依次双击执行节点的bin&#x2F;elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。</p><h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><p>一、用Postman，查看集群状态</p><ol><li><code>GET http://127.0.0.1:1001/_cluster/health</code></li><li><code>GET http://127.0.0.1:1002/_cluster/health</code></li><li><code>GET http://127.0.0.1:1003/_cluster/health</code></li></ol><p>返回结果皆为如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"cluster_name"</span><span class="token operator">:</span> <span class="token string">"my-application"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"number_of_nodes"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"number_of_data_nodes"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"active_primary_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"active_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"relocating_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"initializing_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"unassigned_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"delayed_unassigned_shards"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"number_of_pending_tasks"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"number_of_in_flight_fetch"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"task_max_waiting_in_queue_millis"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"active_shards_percent_as_number"</span><span class="token operator">:</span> <span class="token number">100.0</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617</span></code></pre><p><strong>status字段</strong>指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p><ol><li>green：所有的主分片和副本分片都正常运行。</li><li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li><li>red：有主分片没能正常运行。</li></ol><p>二、用Postman，在一节点增加索引，另一节点获取索引</p><p>向集群中的node-1001节点增加索引：</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1001/user</span><span class="token number">1</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>向集群中的node-1003节点获取索引：</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1003/user</span><span class="token number">1</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"creation_date"</span><span class="token operator">:</span> <span class="token string">"1617993035885"</span><span class="token punctuation">,</span>                <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token string">"XJKERwQlSJ6aUxZEN2EV0w"</span><span class="token punctuation">,</span>                <span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"7080099"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"provided_name"</span><span class="token operator">:</span> <span class="token string">"user"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力。</p><h2 id="31-环境-Linux单节点部署"><a href="#31-环境-Linux单节点部署" class="headerlink" title="31-环境-Linux单节点部署"></a>31-环境-Linux单节点部署</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>一、下载软件</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p><p>二、解压软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压缩</span><span class="token function">tar</span> -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module<span class="token comment"># 改名</span><span class="token function">mv</span> elasticsearch-7.8.0 es<span class="token number">1234</span></code></pre><p>三、创建用户</p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> es <span class="token comment">#新增 es 用户</span><span class="token function">passwd</span> es <span class="token comment">#为 es 用户设置密码</span><span class="token function">userdel</span> -r es <span class="token comment">#如果错了，可以删除再加</span><span class="token function">chown</span> -R es:es /opt/module/es <span class="token comment">#文件夹所有者</span><span class="token number">1234</span></code></pre><p>四、修改配置文件</p><p>修改&#x2F;opt&#x2F;module&#x2F;es&#x2F;config&#x2F;elasticsearch.yml文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 加入如下配置</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> elasticsearch<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span>123456</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.conf</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容# 每个进程可以打开的文件数的限制es soft nofile 65536es hard nofile 655361234</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容# 每个进程可以打开的文件数的限制es soft nofile 65536es hard nofile 65536# 操作系统级别对每个用户创建的进程数的限制* hard nproc 4096# 注： * 带表 Linux 所有用户名称1234567</code></pre><p>修改&#x2F;etc&#x2F;sysctl.conf</p><pre class="language-none"><code class="language-none"># 在文件中增加下面内容# 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536vm.max_map_count&#x3D;655360123</code></pre><p>重新加载</p><pre class="language-none"><code class="language-none">sysctl -p1</code></pre><h3 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h3><p>使用 ES 用户启动</p><pre class="language-none"><code class="language-none">cd &#x2F;opt&#x2F;module&#x2F;es&#x2F;#启动bin&#x2F;elasticsearch#后台启动bin&#x2F;elasticsearch -d  12345</code></pre><p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/75e24cd1fbc430577681bb4f8a0d3e2b.png" alt="img"></p><p>关闭防火墙</p><pre class="language-none"><code class="language-none">#暂时关闭防火墙systemctl stop firewalld#永久关闭防火墙systemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原12345</code></pre><h3 id="测试软件"><a href="#测试软件" class="headerlink" title="测试软件"></a>测试软件</h3><p>浏览器中输入地址： <a href="http://linux1:9200/">http://linux1:9200/</a></p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/477065a2cb499a32871549c21e2fc487.png" alt="img"></p><h2 id="32-环境-Linux集群部署"><a href="#32-环境-Linux集群部署" class="headerlink" title="32-环境-Linux集群部署"></a>32-环境-Linux集群部署</h2><h3 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h3><p>一、下载软件</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p><p>二、解压软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压缩</span><span class="token function">tar</span> -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module<span class="token comment"># 改名</span><span class="token function">mv</span> elasticsearch-7.8.0 es-cluster<span class="token number">1234</span></code></pre><p>将软件分发到其他节点： linux2, linux3</p><p>三、创建用户</p><p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> es <span class="token comment">#新增 es 用户</span><span class="token function">passwd</span> es <span class="token comment">#为 es 用户设置密码</span><span class="token function">userdel</span> -r es <span class="token comment">#如果错了，可以删除再加</span><span class="token function">chown</span> -R es:es /opt/module/es <span class="token comment">#文件夹所有者</span><span class="token number">1234</span></code></pre><p>四、修改配置文件</p><p>修改&#x2F;opt&#x2F;module&#x2F;es&#x2F;config&#x2F;elasticsearch.yml 文件，分发文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 加入如下配置</span><span class="token comment">#集群名称</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>es<span class="token comment">#节点名称， 每个节点的名称不能重复</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span><span class="token comment">#ip 地址， 每个节点的地址不能重复</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> linux1<span class="token comment">#是不是有资格主节点</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment"># head 插件需要这打开这两个配置</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.max_content_length</span><span class="token punctuation">:</span> 200mb<span class="token comment">#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 master</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span><span class="token comment">#es7.x 之后新增的配置，节点发现</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"linux1:9300"</span><span class="token punctuation">,</span><span class="token string">"linux2:9300"</span><span class="token punctuation">,</span><span class="token string">"linux3:9300"</span><span class="token punctuation">]</span><span class="token key atrule">gateway.recover_after_nodes</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">network.tcp.keep_alive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">network.tcp.no_delay</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">transport.tcp.compress</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#集群内同时启动的数据任务个数，默认是 2 个</span><span class="token key atrule">cluster.routing.allocation.cluster_concurrent_rebalance</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token comment">#添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个</span><span class="token key atrule">cluster.routing.allocation.node_concurrent_recoveries</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token comment">#初始化数据恢复时，并发恢复线程的个数，默认 4 个</span><span class="token key atrule">cluster.routing.allocation.node_initial_primaries_recoveries</span><span class="token punctuation">:</span> <span class="token number">16</span>1234567891011121314151617181920212223242526272829</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.conf ，分发文件</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容es soft nofile 65536es hard nofile 65536123</code></pre><p>修改&#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf，分发文件</p><pre class="language-none"><code class="language-none"># 在文件末尾中增加下面内容es soft nofile 65536es hard nofile 65536\* hard nproc 4096\# 注： * 带表 Linux 所有用户名称12345</code></pre><p>修改&#x2F;etc&#x2F;sysctl.conf</p><pre class="language-none"><code class="language-none"># 在文件中增加下面内容vm.max_map_count&#x3D;65536012</code></pre><p>重新加载</p><pre class="language-none"><code class="language-none">sysctl -p1</code></pre><h3 id="启动软件-1"><a href="#启动软件-1" class="headerlink" title="启动软件"></a>启动软件</h3><p>分别在不同节点上启动 ES 软件</p><pre class="language-none"><code class="language-none">cd &#x2F;opt&#x2F;module&#x2F;es-cluster#启动bin&#x2F;elasticsearch#后台启动bin&#x2F;elasticsearch -d12345</code></pre><h3 id="测试集群-1"><a href="#测试集群-1" class="headerlink" title="测试集群"></a>测试集群</h3><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/0412e37cb5249d1ff0e813ee87f49a50.png" alt="img"></p><h1 id="第4章-Elasticsearch进阶"><a href="#第4章-Elasticsearch进阶" class="headerlink" title="第4章 Elasticsearch进阶"></a>第4章 Elasticsearch进阶</h1><h2 id="33-进阶-核心概念"><a href="#33-进阶-核心概念" class="headerlink" title="33-进阶-核心概念"></a>33-进阶-核心概念</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/146a779da01f53e7f7a8d53132d3c7cf.png" alt="img"></p><h3 id="索引Index"><a href="#索引Index" class="headerlink" title="索引Index"></a>索引Index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除（CRUD）的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p><p><strong>Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能。</strong></p><h3 id="类型Type"><a href="#类型Type" class="headerlink" title="类型Type"></a>类型Type</h3><p>在一个索引中，你可以定义一种或多种类型。</p><p>一个类型是你的索引的一个逻辑上的分类&#x2F;分区，其语义完全由你来定。通常，会为具<br>有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化。</p><table><thead><tr><th>版本</th><th>Type</th></tr></thead><tbody><tr><td>5.x</td><td>支持多种 type</td></tr><tr><td>6.x</td><td>只能有一种 type</td></tr><tr><td>7.x</td><td>默认不再支持自定义索引类型（默认类型为： _doc）</td></tr></tbody></table><h3 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h3><p>一个文档是一个可被索引的基础信息单元，也就是一条数据。</p><p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而 JSON 是一个到处存在的互联网数据交互格式。</p><p>在一个 index&#x2F;type 里面，你可以存储任意多的文档。</p><h3 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p><h3 id="映射Mapping"><a href="#映射Mapping" class="headerlink" title="映射Mapping"></a>映射Mapping</h3><p>mapping 是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES 里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h3 id="分片Shards"><a href="#分片Shards" class="headerlink" title="分片Shards"></a>分片Shards</h3><p>一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10 亿文档数据<br>的索引占据 1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。 或者单个节点处理搜索请求，响应太慢。为了解决这个问题，<strong>Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。</strong>当你创建一个索引的时候，你可以指定你想要的分片的数量。<strong>每个分片本身也是一个功能完善并且独立的“索引”</strong>，这个“索引”可以被放置到集群中的任何节点上。</p><p>分片很重要，主要有两方面的原因：</p><ol><li>允许你水平分割 &#x2F; 扩展你的内容容量。</li><li>允许你在分片之上进行分布式的、并行的操作，进而提高性能&#x2F;吞吐量。</li></ol><p>至于一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch 管理的，对于作为用户的你来说，这些都是透明的，无需过分关心。</p><p>被混淆的概念是，一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片（Lucene 索引），然后合并每个分片的结果到一个全局的结果集。</p><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言， Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款： Elasticsearch 和 Solr,这两款都是基于 Lucene 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><h3 id="副本Replicas"><a href="#副本Replicas" class="headerlink" title="副本Replicas"></a>副本Replicas</h3><p>在一个网络 &#x2F; 云的环境里，失败随时都可能发生，在某个分片&#x2F;节点不知怎么的就处于<br>离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的， Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)。</p><p>复制分片之所以重要，有两个主要原因：</p><ul><li>在分片&#x2F;节点失败的情况下，<strong>提供了高可用性</strong>。因为这个原因，注意到复制分片从不与原&#x2F;主要（original&#x2F;primary）分片置于同一节点上是非常重要的。</li><li>扩展你的搜索量&#x2F;吞吐量，因为搜索可以在所有的副本上并行运行。</li></ul><p>总之，每个索引可以被分成多个分片。一个索引也可以被复制 0 次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。</p><p>分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch 中的每个索引被分片 1 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2 个分片， 我们需要根据索引需要确定分片个数。</p><h3 id="分配Allocation"><a href="#分配Allocation" class="headerlink" title="分配Allocation"></a>分配Allocation</h3><p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p><h2 id="34-进阶-系统架构-简介"><a href="#34-进阶-系统架构-简介" class="headerlink" title="34-进阶-系统架构-简介"></a>34-进阶-系统架构-简介</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e4d13427545dc174eb9ccface85c1f0c.png" alt="img"></p><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同<br>cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p><p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、<br>删除索引，或者增加、删除节点等。 而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p><p>作为用户，我们可以将请求发送到集群中的任何节点 ，包括主节点。 每个节点都知道<br>任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p><h2 id="35-进阶-单节点集群"><a href="#35-进阶-单节点集群" class="headerlink" title="35-进阶-单节点集群"></a>35-进阶-单节点集群</h2><p>我们在包含一个空节点的集群内创建名为 users 的索引，为了演示目的，我们将分配 3个主分片和一份副本（每个主分片拥有一个副本分片）。</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1001/users</span><span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"number_of_shards"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567</span></code></pre><p>集群现在是拥有一个索引的单节点集群。所有 3 个主分片都被分配在 node-1 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/54ee6753be248cc7d345b38a0eae7d96.png" alt="img"></p><p>通过 elasticsearch-head 插件（一个Chrome插件）查看集群情况 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e8b15d0b243d486e91f478a220da63bf.png" alt="img"></p><ul><li>集群健康值:yellow( 3 of 6 )：表示当前集群的全部主分片都正常运行，但是副本分片没有全部处在正常状态。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/489b6de480112879a00067b793bde685.png" alt="img">：3 个主分片正常。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/3ce9a78d26ee762f0a7a8abf7817a58e.png" alt="img">：3 个副本分片都是 Unassigned，它们都没有被分配到任何节点。 在同 一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点 上的所有副本数据。</li></ul><p>当前集群是正常运行的，但存在丢失数据的风险。</p><hr><p><strong>elasticsearch-head chrome插件安装</strong></p><p><a href="https://github.com/mobz/elasticsearch-head">插件获取网址</a>，下载压缩包，解压后将内容放入自定义命名为elasticsearch-head文件夹。</p><p>接着点击Chrome右上角选项-&gt;工具-&gt;管理扩展（或则地址栏输入chrome:&#x2F;&#x2F;extensions&#x2F;），选择打开“开发者模式”，让后点击“加载已解压得扩展程序”，选择elasticsearch-head&#x2F;_site，即可完成chrome插件安装。</p><h2 id="36-进阶-故障转移"><a href="#36-进阶-故障转移" class="headerlink" title="36-进阶-故障转移"></a>36-进阶-故障转移</h2><p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 幸运的是，我们只需再启动一个节点即可防止数据丢失。当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上<br>运行的节点才会自动组成集群。</p><p>如果启动了第二个节点，集群将会拥有两个节点 : 所有主分片和副本分片都已被分配 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/bf76cb1bfbdf07555918d9055817ab44.png" alt="img"></p><p>通过 elasticsearch-head 插件查看集群情况</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/18db400822b83e727d6206f486b7b2ea.png" alt="img"></p><ul><li>集群健康值:green( 3 of 6 )：表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e485d8263a4aa3a94af0be951bd5a241.png" alt="img">：3 个主分片正常。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e485d8263a4aa3a94af0be951bd5a241.png" alt="img">：第二个节点加入到集群后， 3 个副本分片将会分配到这个节点上——每 个主分片对应一个副本分片。这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。所 有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们 既可以从主分片又可以从副本分片上获得文档。</li></ul><h2 id="37-进阶-水平扩容"><a href="#37-进阶-水平扩容" class="headerlink" title="37-进阶-水平扩容"></a>37-进阶-水平扩容</h2><p>怎样为我们的正在增长中的应用程序按需扩容呢？当启动了第三个节点，我们的集群将会拥有三个节点的集群 : 为了分散负载而对分片进行重新分配 。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/d527e26aa2bccdf54b11410024eadc92.png" alt="img"></p><p>通过 elasticsearch-head 插件查看集群情况。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/6985fe14454c1269204478320d089bd7.png" alt="img"></p><ul><li>集群健康值:green( 3 of 6 )：表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9494419153adb44bedb395ac5d7bc488.png" alt="img">Node 1 和 Node 2 上各有一个分片被迁移到了新的 Node 3 节点，现在每个节点上都拥有 2 个分片， 而不是之前的 3 个。 这表示每个节点的硬件资源（CPU, RAM, I&#x2F;O）将被更少的分片所共享，每个分片 的性能将会得到提升。</li></ul><p>分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有 6 个分 片（3 个主分片和 3 个副本分片）的索引可以最大扩容到 6 个节点，每个节点上存在一个分片，并且每个 分片拥有所在节点的全部资源。</p><p><strong>但是如果我们想要扩容超过 6 个节点怎么办呢？</strong></p><p>主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够<br>存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——<br>搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片<br>时，也将拥有越高的吞吐量。</p><p>在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群。让我们把<br>副本数从默认的 1 增加到 2。</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:1001/users/_settings</span><span class="token punctuation">&#123;</span>    <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>users 索引现在拥有 9 个分片： 3 个主分片和 6 个副本分片。 这意味着我们可以将集群<br>扩容到 9 个节点，每个节点上一个分片。相比原来 3 个节点时，集群搜索性能可以提升 3 倍。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/97fd01e34e5d8df23d226c4fef157801.png" alt="img"></p><p>通过 elasticsearch-head 插件查看集群情况：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/8bf9dbf0cec5b7875bf8aa9d17a9a67c.png" alt="img"></p><p>当然，如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每<br>个分片从节点上获得的资源会变少。 你需要增加更多的硬件资源来提升吞吐量。</p><p>但是更多的副本分片数提高了数据冗余量：按照上面的节点配置，我们可以在失去 2 个节点<br>的情况下不丢失任何数据。</p><h2 id="38-进阶-应对故障"><a href="#38-进阶-应对故障" class="headerlink" title="38-进阶-应对故障"></a>38-进阶-应对故障</h2><p>我们关闭第一个节点，这时集群的状态为:关闭了一个节点后的集群。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/44e841004be934e6bce08187ca3852bb.png" alt="img"></p><p>我们关闭的节点是一个主节点。而集群必须拥有一个主节点来保证正常工作，所以发生<br>的第一件事情就是选举一个新的主节点： Node 2 。在我们关闭 Node 1 的同时也失去了主<br>分片 1 和 2 ，并且在缺失主分片的时候索引也不能正常工作。 如果此时来检查集群的状况，我们看到的状态将会为 red ：不是所有主分片都在正常工作。</p><p>幸运的是，在其它节点上存在着这两个主分片的完整副本， 所以新的主节点立即将这些分片在 Node 2 和 Node 3 上对应的副本分片提升为主分片， 此时集群的状态将会为yellow。这个提升主分片的过程是瞬间发生的，如同按下一个开关一般。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/e956bda7e0d005699e27760d4193d101.png" alt="img"></p><p><strong>为什么我们集群状态是 yellow 而不是 green 呢？</strong></p><p>虽然我们拥有所有的三个主分片，但是同时设置了每个主分片需要对应 2 份副本分片，而此<br>时只存在一份副本分片。 所以集群不能为 green 的状态，不过我们不必过于担心：如果我<br>们同样关闭了 Node 2 ，我们的程序 依然 可以保持在不丢任何数据的情况下运行，因为<br>Node 3 为每一个分片都保留着一份副本。</p><p>如果想回复原来的样子，要确保Node-1的配置文件有如下配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9302"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9303"</span><span class="token punctuation">]</span>1</code></pre><p>集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。 如果 Node 1 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/37eea6a8dae7ba908312f2ebf0eced11.png" alt="img"></p><h2 id="39-进阶-路由计算-amp-分片控制"><a href="#39-进阶-路由计算-amp-分片控制" class="headerlink" title="39-进阶-路由计算 &amp; 分片控制"></a>39-进阶-路由计算 &amp; 分片控制</h2><h3 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h3><p>当索引一个文档的时候，文档会被存储到一个主分片中。 Elasticsearch 如何知道一个<br>文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片 1 还是分片 2 中呢？首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。实际上，这个过程是根据下面这个公式决定的：</p><pre class="language-none"><code class="language-none">shard &#x3D; hash(routing) % number_of_primary_shards1</code></pre><p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9c34e8603887c2bed475416e3b67cd9a.png" alt="img"></p><p>这就解释了为什么我们要在创建索引的时候就确定好主分片的数量并且永远不会改变这个数量:因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</p><p>所有的文档API ( get . index . delete 、 bulk , update以及 mget ）都接受一个叫做routing 的路由参数，通过这个参数我们可以自定义文档到分片的映射。一个自定义的路由参数可以用来确保所有相关的文档—一例如所有属于同一个用户的文档——都被存储到同一个分片中。</p><h3 id="分片控制"><a href="#分片控制" class="headerlink" title="分片控制"></a>分片控制</h3><p>我们可以发送请求到集群中的任一节点。每个节点都有能力处理任意请求。每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。在下面的例子中，如果将所有的请求发送到Node 1001，我们将其称为协调节点<strong>coordinating node</strong>。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/3940d6cdb197259368542b86384911a4.png" alt="img"></p><p>当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。</p><h2 id="40-进阶-数据写流程"><a href="#40-进阶-数据写流程" class="headerlink" title="40-进阶-数据写流程"></a>40-进阶-数据写流程</h2><p>新建、索引和删除请求都是写操作， 必须在主分片上面完成之后才能被复制到相关的副本分片。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/418356a32516c222a8d366df021276c2.png" alt="img"></p><p>在客户端收到成功响应时，文档变更已经在主分片和所有副本分片执行完成，变更是安全的。有一些可选的<strong>请求参数</strong>允许您影响这个过程，可能以数据安全为代价提升性能。这些选项很少使用，因为 Elasticsearch 已经很快，但是为了完整起见， 请参考下文：</p><ol><li>consistency</li></ol><ul><li>即一致性。在默认设置下，即使仅仅是在试图执行一个写操作之前，主分片都会要求必须要有规定数量quorum（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行写操作（其中分片副本 可以是主分片或者副本分片）。这是为了避免在发生网络分区故障（network partition）的时候进行写操作，进而导致数据不一致。 规定数量即： <strong>int((primary + number_of_replicas) &#x2F; 2 ) + 1</strong></li><li>consistency 参数的值可以设为：<ul><li>one ：只要主分片状态 ok 就允许执行写操作。</li><li>all：必须要主分片和所有副本分片的状态没问题才允许执行写操作。</li><li>quorum：默认值为quorum , 即大多数的分片副本状态没问题就允许执行写操作。</li></ul></li><li>注意，规定数量的计算公式中number_of_replicas指的是在索引设置中的设定副本分片数，而不是指当前处理活动状态的副本分片数。如果你的索引设置中指定了当前索引拥有3个副本分片，那规定数量的计算结果即：<strong>int((1 primary + 3 replicas) &#x2F; 2) + 1 &#x3D; 3</strong>，如果此时你只启动两个节点，那么处于活跃状态的分片副本数量就达不到规定数量，也因此您将无法索引和删除任何文档。</li></ul><ol><li>timeout<ul><li>如果没有足够的副本分片会发生什么？Elasticsearch 会等待，希望更多的分片出现。默认情况下，它最多等待 1 分钟。 如果你需要，你可以使用timeout参数使它更早终止：100是100 毫秒，30s是30秒。</li></ul></li></ol><p>新索引默认有1个副本分片，这意味着为满足规定数量应该需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当number_of_replicas 大于1的时候，规定数量才会执行。</p><h2 id="41-进阶-数据读流程"><a href="#41-进阶-数据读流程" class="headerlink" title="41-进阶-数据读流程"></a>41-进阶-数据读流程</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/7139df83ee6f7a59c5d3252d34cc8762.png" alt="img"></p><p>在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。</p><h2 id="42-进阶-更新流程-amp-批量操作流程"><a href="#42-进阶-更新流程-amp-批量操作流程" class="headerlink" title="42-进阶-更新流程 &amp; 批量操作流程"></a>42-进阶-更新流程 &amp; 批量操作流程</h2><h3 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h3><p>部分更新一个文档结合了先前说明的读取和写入流程：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/ca41993144aee98311671278725437cd.png" alt="img"></p><p>部分更新一个文档的步骤如下：</p><ol><li>客户端向Node 1发送更新请求。</li><li>它将请求转发到主分片所在的Node 3 。</li><li>Node 3从主分片检索文档，修改_source字段中的JSON，并且尝试重新索引主分片的文档。如果文档已经被另一个进程修改,它会重试步骤3 ,超过retry_on_conflict次后放弃。</li><li>如果 Node 3成功地更新文档，它将新版本的文档并行转发到Node 1和 Node 2上的副本分片，重新建立索引。一旦所有副本分片都返回成功，Node 3向协调节点也返回成功，协调节点向客户端返回成功。</li></ol><p>当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果 Elasticsearch 仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</p><h3 id="批量操作流程"><a href="#批量操作流程" class="headerlink" title="批量操作流程"></a>批量操作流程</h3><p><strong>mget和 bulk API的模式类似于单文档模式。</strong>区别在于协调节点知道每个文档存在于哪个分片中。它将整个多文档请求分解成每个分片的多文档请求，并且将这些请求并行转发到每个参与节点。</p><p>协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返回给客户端。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/b90ea9c79138d8361ca339cff205fdb0.png" alt="img"></p><p><strong>用单个 mget 请求取回多个文档所需的步骤顺序:</strong></p><ol><li>客户端向 Node 1 发送 mget 请求。</li><li>Node 1为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复，Node 1 构建响应并将其返回给客户端。</li></ol><p>可以对docs数组中每个文档设置routing参数。</p><p>bulk API， 允许在单个批量请求中执行多个创建、索引、删除和更新请求。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/83499315a7b8ab81471a88f3e142f0a8.png" alt="img"></p><p><strong>bulk API 按如下步骤顺序执行：</strong></p><ol><li>客户端向Node 1 发送 bulk请求。</li><li>Node 1为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。</li><li>主分片一个接一个按顺序执行每个操作。当每个操作成功时,主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。</li></ol><h2 id="43-进阶-倒排索引"><a href="#43-进阶-倒排索引" class="headerlink" title="43-进阶-倒排索引"></a>43-进阶-倒排索引</h2><p>分片是Elasticsearch最小的工作单元。但是究竟什么是一个分片，它是如何工作的？</p><p>传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值需求的数据结构是<strong>倒排索引</strong>。</p><h3 id="倒排索引原理"><a href="#倒排索引原理" class="headerlink" title="倒排索引原理"></a>倒排索引原理</h3><p>Elasticsearch使用一种称为倒排索引的结构，它适用于快速的全文搜索。</p><p>见其名，知其意，有倒排索引，肯定会对应有正向索引。正向索引（forward index），反向索引（inverted index）更熟悉的名字是<strong>倒排索引</strong>。</p><p>所谓的<strong>正向索引</strong>，就是搜索引擎会将待搜索的文件都对应一个文件ID，搜索时将这个ID和搜索关键字进行对应，形成K-V对，然后对关键字进行统计计数。（统计？？下文有解释）</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/cba02cc6d7c5f054dfe5d58fafac9a6a.png" alt="img"></p><p>但是互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a1f52e96e0ac218b5024d708202afba4.png" alt="img"></p><h3 id="倒排索引的例子"><a href="#倒排索引的例子" class="headerlink" title="倒排索引的例子"></a>倒排索引的例子</h3><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。例如，假设我们有两个文档，每个文档的content域包含如下内容：</p><ul><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ul><p>为了创建倒排索引，我们首先将每个文档的content域拆分成单独的词（我们称它为词条或tokens )，创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/3cc642e9bae776c3e617f9d117d41e21.png" alt="img"></p><p>现在，如果我们想搜索 <code>quick</code> <code>brown</code> ，我们只需要查找包含每个词条的文档：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/f26aaa01e011edfa68736956b2f1ddea.png" alt="img"></p><p>两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单相似性算法，那么我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。</p><p>但是，我们目前的倒排索引有一些问题：</p><ul><li><code>Quick</code>和<code>quick</code>以独立的词条出现，然而用户可能认为它们是相同的词。</li><li><code>fox</code>和<code>foxes</code>非常相似，就像<code>dog</code>和<code>dogs</code>；他们有相同的词根。</li><li><code>jumped</code>和<code>leap</code>，尽管没有相同的词根，但他们的意思很相近。他们是同义词。</li></ul><p>使用前面的索引搜索<code>+Quick</code> <code>+fox</code>不会得到任何匹配文档。(记住，＋前缀表明这个词必须存在）。</p><p>只有同时出现<code>Quick</code>和<code>fox</code> 的文档才满足这个查询条件，但是第一个文档包含<code>quick</code> <code>fox</code> ，第二个文档包含<code>Quick</code> <code>foxes</code> 。</p><p>我们的用户可以合理的期望两个文档与查询匹配。我们可以做的更好。</p><p>如果我们将词条规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。例如：</p><ul><li><code>Quick</code>可以小写化为<code>quick</code>。</li><li><code>foxes</code>可以词干提取变为词根的格式为<code>fox</code>。类似的，<code>dogs</code>可以为提取为<code>dog</code>。</li><li><code>jumped</code>和<code>leap</code>是同义词，可以索引为相同的单词<code>jump</code> 。</li></ul><p>现在索引看上去像这样：</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/19813d1918c89461303377444cf85c8c.png" alt="img"></p><p>这还远远不够。我们搜索<code>+Quick</code> <code>+fox</code> 仍然会失败，因为在我们的索引中，已经没有<code>Quick</code>了。但是，如果我们对搜索的字符串使用与content域相同的标准化规则，会变成查询<code>+quick</code> <code>+fox</code>，这样两个文档都会匹配！分词和标准化的过程称为<strong>分析</strong>，这非常重要。你只能搜索在索引中出现的词条，所以索引文本和查询字符串必须标准化为相同的格式。</p><h2 id="44-进阶-文档搜索"><a href="#44-进阶-文档搜索" class="headerlink" title="44-进阶-文档搜索"></a>44-进阶-文档搜索</h2><h3 id="不可改变的倒排索引"><a href="#不可改变的倒排索引" class="headerlink" title="不可改变的倒排索引"></a>不可改变的倒排索引</h3><p>早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。 一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。</p><p>倒排索引被写入磁盘后是不可改变的：它永远不会修改。</p><ul><li>不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</li><li>一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</li><li>其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。</li><li>写入单个大的倒排索引允许数据被压缩，减少磁盘IO和需要被缓存到内存的索引的使用量。</li></ul><p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p><h3 id="动态更新索引"><a href="#动态更新索引" class="headerlink" title="动态更新索引"></a>动态更新索引</h3><p>如何在保留不变性的前提下实现倒排索引的更新？</p><p>答案是：用更多的索引。通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到,从最早的开始查询完后再对结果进行合并。</p><p>Elasticsearch基于Lucene，这个java库引入了<strong>按段搜索</strong>的概念。每一段本身都是一个倒排索引，但索引在 Lucene 中除表示所有段的集合外，还增加了提交点的概念—一个列出了所有已知段的文件。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9ee1adbb2d55e710257e01b812a6d8cf.png" alt="img"></p><p>按段搜索会以如下流程执行：</p><p>一、新文档被收集到内存索引缓存。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/9d499fde966ee9825fa5a424d8357489.png" alt="img"></p><p>二、不时地, 缓存被提交。</p><ol><li>一个新的段，一个追加的倒排索引，被写入磁盘。</li><li>一个新的包含新段名字的提交点被写入磁盘。</li><li>磁盘进行同步，所有在文件系统缓存中等待的写入都刷新到磁盘，以确保它们被写入物理文件</li></ol><p>三、新的段被开启，让它包含的文档可见以被搜索。</p><p>四、内存缓存被清空，等待接收新的文档。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/f74828ff58cc4635a97e88706a221e50.png" alt="img"></p><p>当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。这种方式可以用相对较低的成本将新文档添加到索引。</p><p>段是不可改变的，所以既不能从把文档从旧的段中移除，也不能修改旧的段来进行反映文档的更新。取而代之的是，每个提交点会包含一个.del 文件，文件中会列出这些被删除文档的段信息。</p><p>当一个<strong>文档被“删除”</strong>时，它实际上只是在 .del 文件中被标记删除。一个被标记删除的文档仍然可以被查询匹配到，但它会在最终结果被返回前从结果集中移除。</p><p><strong>文档更新</strong>也是类似的操作方式:当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</p><h2 id="45-进阶-文档刷新-amp-文档刷写-amp-文档合并"><a href="#45-进阶-文档刷新-amp-文档刷写-amp-文档合并" class="headerlink" title="45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并"></a>45-进阶-文档刷新 &amp; 文档刷写 &amp; 文档合并</h2><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/b3b31c1e592d5aa794e7c9fcb259c924.png" alt="img"></p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/521c25f0f16247240234d1b8eb3c5f25.png" alt="img"></p><h3 id="近实时搜索"><a href="#近实时搜索" class="headerlink" title="近实时搜索"></a>近实时搜索</h3><p>随着按段（per-segment）搜索的发展，一个新的文档从索引到可被搜索的延迟显著降低了。新文档在几分钟之内即可被检索，但这样还是不够快。磁盘在这里成为了瓶颈。<strong>提交（Commiting）一个新的段到磁盘需要一个fsync来确保段被物理性地写入磁盘</strong>，这样在断电的时候就不会丢失数据。但是fsync操作代价很大；如果每次索引一个文档都去执行一次的话会造成很大的性能问题。</p><p>我们需要的是一个更轻量的方式来使一个文档可被搜索，这意味着fsync要从整个过程中被移除。在Elasticsearch和磁盘之间是<strong>文件系统缓存</strong>。像之前描述的一样，在内存索引缓冲区中的文档会被写入到一个新的段中。但是这里新段会被先写入到文件系统缓存—这一步代价会比较低，稍后再被刷新到磁盘—这一步代价比较高。不过只要文件已经在缓存中，就可以像其它文件一样被打开和读取了。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a679d4f5f4bfa6913a53316251beef2a.png" alt="img"></p><p>Lucene允许新段被写入和打开，使其包含的文档在未进行一次完整提交时便对搜索可见。这种方式比进行一次提交代价要小得多，并且在不影响性能的前提下可以被频繁地执行。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/673d3a77e254fa3a5a6f5293ffb125ab.png" alt="img"></p><p>在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做refresh。默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch是近实时搜索：文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。</p><p>这些行为可能会对新用户造成困惑：他们索引了一个文档然后尝试搜索它，但却没有搜到。这个问题的解决办法是用refresh API执行一次手动刷新：&#x2F;usersl_refresh</p><p>尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候，手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。相反，你的应用需要意识到Elasticsearch 的近实时的性质，并接受它的不足。</p><p>并不是所有的情况都需要每秒刷新。可能你正在使用Elasticsearch索引大量的日志文件，你可能想优化索引速度而不是近实时搜索，可以通过设置refresh_interval ，降低每个索引的刷新频率</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"refresh_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>refresh_interval可以在既存索引上进行动态更新。在生产环境中，当你正在建立一个大的新索引时，可以先关闭自动刷新，待开始使用该索引时，再把它们调回来。</p><pre class="language-none"><code class="language-none"># 关闭自动刷新PUT &#x2F;users&#x2F;_settings&#123; &quot;refresh_interval&quot;: -1 &#125;# 每一秒刷新PUT &#x2F;users&#x2F;_settings&#123; &quot;refresh_interval&quot;: &quot;1s&quot; &#125;1234567</code></pre><h3 id="持久化变更"><a href="#持久化变更" class="headerlink" title="持久化变更"></a>持久化变更</h3><p>如果没有用fsync把数据从文件系统缓存刷（flush）到硬盘，我们不能保证数据在断电甚至是程序正常退出之后依然存在。为了保证Elasticsearch 的可靠性，需要确保数据变化被持久化到磁盘。在动态更新索引，我们说一次完整的提交会将段刷到磁盘，并写入一个包含所有段列表的提交点。Elasticsearch 在启动或重新打开一个索引的过程中使用这个提交点来判断哪些段隶属于当前分片。</p><p>即使通过每秒刷新(refresh）实现了近实时搜索，我们仍然需要经常进行完整提交来确保能从失败中恢复。但在两次提交之间发生变化的文档怎么办?我们也不希望丢失掉这些数据。Elasticsearch 增加了一个translog ，或者叫事务日志，在每一次对Elasticsearch进行操作时均进行了日志记录。</p><p>整个流程如下:</p><p>一、一个文档被索引之后，就会被添加到内存缓冲区，并且追加到了 translog</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/baeab48c8d6b87660ac4fb954e9c9731.png" alt="img"></p><p>二、刷新（refresh）使分片每秒被刷新（refresh）一次：</p><ul><li>这些在内存缓冲区的文档被写入到一个新的段中，且没有进行fsync操作。</li><li>这个段被打开，使其可被搜索。</li><li>内存缓冲区被清空。</li></ul><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/17be4247e6b23f31b1e589c70d61e817.png" alt="img"></p><p>三、这个进程继续工作，更多的文档被添加到内存缓冲区和追加到事务日志。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/4b5c4a3a3ffb4c84625bb283f6a67018.png" alt="img"></p><p>四、每隔一段时间—例如translog变得越来越大，索引被刷新（flush）；一个新的translog被创建，并且一个全量提交被执行。</p><ul><li>所有在内存缓冲区的文档都被写入一个新的段。</li><li>缓冲区被清空。</li><li>一个提交点被写入硬盘。</li><li>文件系统缓存通过fsync被刷新（flush） 。</li><li>老的translog被删除。</li></ul><p>translog 提供所有还没有被刷到磁盘的操作的一个持久化纪录。当Elasticsearch启动的时候，它会从磁盘中使用最后一个提交点去恢复己知的段，并且会重放translog 中所有在最后一次提交后发生的变更操作。</p><p>translog 也被用来提供实时CRUD。当你试着通过ID查询、更新、删除一个文档，它会在尝试从相应的段中检索之前，首先检查 translog任何最近的变更。这意味着它总是能够实时地获取到文档的最新版本。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/11c7d2cc05244e669eb8402dd8049de9.png" alt="img"></p><p>执行一个提交并且截断translog 的行为在 Elasticsearch被称作一次flush。分片每30分钟被自动刷新（flush)，或者在 translog 太大的时候也会刷新。</p><p>你很少需要自己手动执行flush操作，通常情况下，自动刷新就足够了。这就是说，在重启节点或关闭索引之前执行 flush有益于你的索引。当Elasticsearch尝试恢复或重新打开一个索引，它需要重放translog中所有的操作，所以如果日志越短，恢复越快。</p><p>translog 的目的是保证操作不会丢失，在文件被fsync到磁盘前，被写入的文件在重启之后就会丢失。默认translog是每5秒被fsync刷新到硬盘，或者在每次写请求完成之后执行（e.g. index, delete, update, bulk）。这个过程在主分片和复制分片都会发生。最终，基本上，这意味着在整个请求被fsync到主分片和复制分片的translog之前，你的客户端不会得到一个200 OK响应。</p><p>在每次请求后都执行一个fsync会带来一些性能损失，尽管实践表明这种损失相对较小（特别是 bulk 导入，它在一次请求中平摊了大量文档的开销）。</p><p>但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。如果你决定使用异步translog 的话，你需要保证在发生 crash 时，丢失掉 sync_interval时间段的数据也无所谓。请在决定前知晓这个特性。如果你不确定这个行为的后果，最好是使用默认的参数{“index.translog.durability”: “request”}来避免数据丢失。</p><h3 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h3><p>由于自动刷新流程每秒会创建一个新的段，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。每一个段都会消耗文件句柄、内存和 cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。</p><p>Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。</p><p>段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。</p><p>启动段合并不需要你做任何事。进行索引和搜索时会自动进行。</p><p>一、当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。</p><p>二、合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/c907ca35bd7c0393d46aec2c7038af19.png" alt="img"></p><p>三、一旦合并结束，老的段被删除</p><ul><li>新的段被刷新(flush)到了磁盘。</li><li>写入一个包含新段且排除旧的和较小的段的新提交点。</li><li>新的段被打开用来搜索。老的段被删除。</li></ul><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/a00cc1c19652c47fcfb663aaf337a41b.png" alt="img"></p><p>合并大的段需要消耗大量的 I&#x2F;O 和 CPU 资源，如果任其发展会影响搜索性能。 Elasticsearch在默认情况下会对合并流程进行资源限制，所以搜索仍然有足够的资源很好地执行。</p><h2 id="46-进阶-文档分析"><a href="#46-进阶-文档分析" class="headerlink" title="46-进阶-文档分析"></a>46-进阶-文档分析</h2><p>分析包含下面的过程：</p><ul><li>将一块文本分成适合于倒排索引的独立的词条。</li><li>将这些词条统一化为标准格式以提高它们的“可搜索性”，或者recall。</li></ul><p>分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里：</p><ul><li>字符过滤器：首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 &amp; 转化成 and。</li><li>分词器：其次，字符串被分词器分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</li><li>Token 过滤器：最后，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像jump和leap这种同义词）</li></ul><h3 id="内置分析器"><a href="#内置分析器" class="headerlink" title="内置分析器"></a>内置分析器</h3><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><pre class="language-none"><code class="language-none">&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;1</code></pre><ul><li>标准分析器</li></ul><p>标准分析器是Elasticsearch 默认使用的分析器。它是分析各种语言文本最常用的选择。它根据Unicode 联盟定义的单词边界划分文本。删除绝大部分标点。最后，将词条小写。它会产生：</p><pre class="language-none"><code class="language-none">set, the, shape, to, semi, transparent, by, calling, set_trans, 51</code></pre><ul><li>简单分析器</li></ul><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生：</p><pre class="language-none"><code class="language-none">set, the, shape, to, semi, transparent, by, calling, set, trans1</code></pre><ul><li>空格分析器</li></ul><p>空格分析器在空格的地方划分文本。它会产生:</p><pre class="language-none"><code class="language-none">Set, the, shape, to, semi-transparent, by, calling, set_trans(5)1</code></pre><ul><li>语言分析器</li></ul><p>特定语言分析器可用于很多语言。它们可以考虑指定语言的特点。例如，英语分析器附带了一组英语无用词（常用单词，例如and或者the ,它们对相关性没有多少影响），它们会被删除。由于理解英语语法的规则，这个分词器可以提取英语单词的词干。</p><p>英语分词器会产生下面的词条：</p><pre class="language-none"><code class="language-none">set, shape, semi, transpar, call, set_tran, 51</code></pre><p>注意看transparent、calling和 set_trans已经变为词根格式。</p><h3 id="分析器使用场景"><a href="#分析器使用场景" class="headerlink" title="分析器使用场景"></a>分析器使用场景</h3><p>当我们索引一个文档，它的全文域被分析成词条以用来创建倒排索引。但是，当我们在全文域搜索的时候，我们需要将查询字符串通过相同的分析过程，以保证我们搜索的词条格式与索引中的词条格式一致。</p><p>全文查询，理解每个域是如何定义的，因此它们可以做正确的事：</p><ul><li>当你查询一个全文域时，会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</li><li>当你查询一个精确值域时，不会分析查询字符串，而是搜索你指定的精确值。</li></ul><h3 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h3><p>有些时候很难理解分词的过程和实际被存储到索引中的词条，特别是你刚接触Elasticsearch。为了理解发生了什么，你可以使用analyze API来看文本是如何被分析的。在消息体里，指定分析器和要分析的文本。</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Text to analyze"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>结果中每个元素代表一个单独的词条：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"to"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"analyze"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425</span></code></pre><ul><li>token是实际存储到索引中的词条。</li><li>start_ offset 和end_ offset指明字符在原始字符串中的位置。</li><li>position指明词条在原始文本中出现的位置。</li></ul><h3 id="指定分析器"><a href="#指定分析器" class="headerlink" title="指定分析器"></a>指定分析器</h3><p>当Elasticsearch在你的文档中检测到一个新的字符串域，它会自动设置其为一个全文字符串域，使用 标准 分析器对它进行分析。你不希望总是这样。可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域，不使用分析，直接索引你传入的精确值，例如用户 ID 或者一个内部的状态域或标签。要做到这一点，我们必须手动指定这些域的映射。</p><p>（细粒度指定分析器）</p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>首先通过 Postman 发送 GET 请求查询分词效果</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"测试单词"</span><span class="token punctuation">&#125;</span><span class="token number">1234</span></code></pre><p>ES 的默认分词器无法识别中文中测试、 单词这样的词汇，而是简单的将每个字拆完分为一个词。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"测"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"试"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"单"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"词"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;IDEOGRAPHIC>"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132</span></code></pre><p>这样的结果显然不符合我们的使用要求，所以我们需要下载 ES 对应版本的中文分词器。</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0">IK 中文分词器下载网址</a></p><p>将解压后的后的文件夹放入 ES 根目录下的 plugins 目录下，重启 ES 即可使用。</p><p>我们这次加入新的查询参数”analyzer”:“ik_max_word”。</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"测试单词"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><ul><li>ik_max_word：会将文本做最细粒度的拆分。</li><li>ik_smart：会将文本做最粗粒度的拆分。</li></ul><p>使用中文分词后的结果为：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"测试"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"单词"</span><span class="token punctuation">,</span>             <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>             <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718</span></code></pre><p>ES 中也可以进行扩展词汇，首先查询</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"弗雷尔卓德"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>仅仅可以得到每个字的分词结果，我们需要做的就是使分词器识别到弗雷尔卓德也是一个词语。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"弗"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"雷"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"尔"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"卓"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"德"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">4</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839</span></code></pre><ol><li>首先进入 ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config 目录，创建 custom.dic文件，写入“弗雷尔卓德”。</li><li>同时打开 IKAnalyzer.cfg.xml 文件，将新建的 custom.dic 配置其中。</li><li>重启 ES 服务器 。</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">"http://java.sun.com/dtd/properties.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用户可以在这里配置自己的扩展字典 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用户可以在这里配置远程扩展字典 --></span><span class="token comment">&lt;!-- &lt;entry key="remote_ext_dict">words_location&lt;/entry> --></span><span class="token comment">&lt;!--用户可以在这里配置远程扩展停止词字典--></span><span class="token comment">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>12345678910111213</code></pre><p>扩展后再次查询</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_analyze</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"测试单词"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>返回结果如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"弗雷尔卓德"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011</span></code></pre><h3 id="自定义分析器"><a href="#自定义分析器" class="headerlink" title="自定义分析器"></a>自定义分析器</h3><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。在分析与分析器我们说过，一个分析器就是在一个包里面组合了三种函数的一个包装器，三种函数按照顺序被执行：</p><h4 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h4><p>字符过滤器用来整理一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像<code>&lt;p&gt;</code>或者<code>&lt;div&gt;</code>这样的HTML标签，这些标签是我们不想索引的。我们可以使用html清除字符过滤器来移除掉所有的HTML标签，并且像把<code>Á</code>转换为相对应的Unicode字符Á 这样，转换HTML实体。一个分析器可能有0个或者多个字符过滤器。</p><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><p>一个分析器必须有一个唯一的分词器。分词器把字符串分解成单个词条或者词汇单元。标准分析器里使用的标准分词器把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p><p>例如，关键词分词器完整地输出接收到的同样的字符串，并不做任何分词。空格分词器只根据空格分割文本。正则分词器根据匹配正则表达式来分割文本。</p><h4 id="词单元过滤器"><a href="#词单元过滤器" class="headerlink" title="词单元过滤器"></a>词单元过滤器</h4><p>经过分词，作为结果的词单元流会按照指定的顺序通过指定的词单元过滤器。词单元过滤器可以修改、添加或者移除词单元。我们已经提到过lowercase和stop词过滤器，但是在Elasticsearch 里面还有很多可供选择的词单元过滤器。词干过滤器把单词遏制为词干。ascii_folding过滤器移除变音符，把一个像”très”这样的词转换为“tres”。</p><p>ngram和 edge_ngram词单元过滤器可以产生适合用于部分匹配或者自动补全的词单元。</p><h4 id="自定义分析器例子"><a href="#自定义分析器例子" class="headerlink" title="自定义分析器例子"></a>自定义分析器例子</h4><p>接下来，我们看看如何创建自定义的分析器：</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//localhost:9200/my_index</span><span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"analysis"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"char_filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"&amp;_to_and"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"mapping"</span><span class="token punctuation">,</span>                     <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"&amp;=> and "</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"my_stopwords"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"stop"</span><span class="token punctuation">,</span>                     <span class="token property">"stopwords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"the"</span><span class="token punctuation">,</span>                         <span class="token string">"a"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"my_analyzer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"custom"</span><span class="token punctuation">,</span>                     <span class="token property">"char_filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"html_strip"</span><span class="token punctuation">,</span>                         <span class="token string">"&amp;_to_and"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                     <span class="token property">"tokenizer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>                     <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"lowercase"</span><span class="token punctuation">,</span>                         <span class="token string">"my_stopwords"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839</span></code></pre><p>索引被创建以后，使用 analyze API 来 测试这个新的分析器：</p><pre class="language-json" data-language="json"><code class="language-json"># GET http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/my_index/_analyze</span><span class="token punctuation">&#123;</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"The quick &amp; brown fox"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"my_analyzer"</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>返回结果为：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tokens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"quick"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"and"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"brown"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"fox"</span><span class="token punctuation">,</span>            <span class="token property">"start_offset"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token property">"end_offset"</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"&lt;ALPHANUM>"</span><span class="token punctuation">,</span>            <span class="token property">"position"</span><span class="token operator">:</span> <span class="token number">4</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132</span></code></pre><h2 id="47-进阶-文档控制"><a href="#47-进阶-文档控制" class="headerlink" title="47-进阶-文档控制"></a>47-进阶-文档控制</h2><h3 id="文档冲突"><a href="#文档冲突" class="headerlink" title="文档冲突"></a>文档冲突</h3><p>当我们使用index API更新文档，可以一次性读取原始文档，做我们的修改，然后重新索引整个文档。最近的索引请求将获胜：无论最后哪一个文档被索引，都将被唯一存储在 Elasticsearch 中。如果其他人同时更改这个文档，他们的更改将丢失。</p><p>很多时候这是没有问题的。也许我们的主数据存储是一个关系型数据库，我们只是将数据复制到Elasticsearch中并使其可被搜索。也许两个人同时更改相同的文档的几率很小。或者对于我们的业务来说偶尔丢失更改并不是很严重的问题。</p><p>但有时丢失了一个变更就是非常严重的。试想我们使用Elasticsearch 存储我们网上商城商品库存的数量，每次我们卖一个商品的时候，我们在 Elasticsearch 中将库存数量减少。有一天，管理层决定做一次促销。突然地，我们一秒要卖好几个商品。假设有两个web程序并行运行，每一个都同时处理所有商品的销售。</p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/49ca2ec50db3ddd0fcd1f364ac600b96.png" alt="img"></p><p>web_1 对stock_count所做的更改已经丢失，因为 web_2不知道它的 stock_count的拷贝已经过期。结果我们会认为有超过商品的实际数量的库存，因为卖给顾客的库存商品并不存在，我们将让他们非常失望。</p><p>变更越频繁，读数据和更新数据的间隙越长，也就越可能丢失变更。在数据库领域中，有两种方法通常被用来确保并发更新时变更不会丢失：</p><ul><li>悲观并发控制：这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</li><li>乐观并发控制：Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</li></ul><h3 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h3><p>Elasticsearch是分布式的。当文档创建、更新或删除时，新版本的文档必须复制到集群中的其他节点。Elasticsearch也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许顺序是乱的。Elasticsearch需要一种方法确保文档的旧版本不会覆盖新的版本。</p><p>当我们之前讨论index , GET和DELETE请求时，我们指出每个文档都有一个_version（版本号），当文档被修改时版本号递增。Elasticsearch使用这个version号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</p><p>我们可以利用version号来确保应用中相互冲突的变更不会导致数据丢失。我们通过指定想要修改文档的 version号来达到这个目的。如果该版本不是当前版本号，我们的请求将会失败。</p><p>老的版本es使用version，但是新版本不支持了，会报下面的错误，提示我们用if_seq _no和if _primary_term</p><p>创建索引</p><pre class="language-json" data-language="json"><code class="language-json">#PUT http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_create/1001</span><span class="token number">1</span></code></pre><p>返回结果</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>更新数据</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_update/1001</span><span class="token punctuation">&#123;</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><p>旧版本使用的防止冲突更新方法：</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_update/1001?version=1</span><span class="token punctuation">&#123;</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机2"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"action_request_validation_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"action_request_validation_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213</span></code></pre><p>新版本使用的防止冲突更新方法：</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_update/1001?if_seq_no=11&amp;if_primary_term=15</span><span class="token punctuation">&#123;</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机2"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><h3 id="外部系统版本控制"><a href="#外部系统版本控制" class="headerlink" title="外部系统版本控制"></a>外部系统版本控制</h3><p>一个常见的设置是使用其它数据库作为主要的数据存储，使用Elasticsearch做数据检索，这意味着主数据库的所有更改发生时都需要被复制到Elasticsearch，如果多个进程负责这一数据同步，你可能遇到类似于之前描述的并发问题。</p><p>如果你的主数据库已经有了版本号，或一个能作为版本号的字段值比如timestamp，那么你就可以在 Elasticsearch 中通过增加 version_type&#x3D;extermal到查询字符串的方式重用这些相同的版本号，版本号必须是大于零的整数，且小于9.2E+18，一个Java中 long类型的正值。</p><p>外部版本号的处理方式和我们之前讨论的内部版本号的处理方式有些不同，Elasticsearch不是检查当前_version和请求中指定的版本号是否相同，而是检查当前_version是否小于指定的版本号。如果请求成功，外部的版本号作为文档的新_version进行存储。</p><pre class="language-json" data-language="json"><code class="language-json">#POST http<span class="token operator">:</span><span class="token comment">//127.0.0.1:9200/shopping/_doc/1001?version=300&amp;version_type=external</span><span class="token punctuation">&#123;</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机2"</span><span class="token punctuation">&#125;</span><span class="token number">1234</span></code></pre><p>返回结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314</span></code></pre><h2 id="48-进阶-文档展示-Kibana"><a href="#48-进阶-文档展示-Kibana" class="headerlink" title="48-进阶-文档展示-Kibana"></a>48-进阶-文档展示-Kibana</h2><p>Kibana是一个免费且开放的用户界面，能够让你对Elasticsearch 数据进行可视化，并让你在Elastic Stack 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如何流经你的整个应用，都能轻松完成。</p><p><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip">Kibana下载网址</a></p><p>一、解压缩下载的 zip 文件。</p><p>二、修改 config&#x2F;kibana.yml 文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 默认端口</span><span class="token key atrule">server.port</span><span class="token punctuation">:</span> <span class="token number">5601</span><span class="token comment"># ES 服务器的地址</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://localhost:9200"</span><span class="token punctuation">]</span><span class="token comment"># 索引名</span><span class="token key atrule">kibana.index</span><span class="token punctuation">:</span> <span class="token string">".kibana"</span><span class="token comment"># 支持中文</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span>12345678</code></pre><p>三、Windows 环境下执行 bin&#x2F;kibana.bat 文件。（首次启动有点耗时）</p><p>四、通过浏览器访问：<a href="http://localhost:5601。">http://localhost:5601。</a></p><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/d066ba5e26916624b5d056d04c5580ac.png" alt="img"></p><h1 id="第5章-Elasticsearch集成"><a href="#第5章-Elasticsearch集成" class="headerlink" title="第5章 Elasticsearch集成"></a>第5章 Elasticsearch集成</h1><h2 id="49-框架集成-SpringData-整体介绍"><a href="#49-框架集成-SpringData-整体介绍" class="headerlink" title="49-框架集成-SpringData-整体介绍"></a>49-框架集成-SpringData-整体介绍</h2><p>Spring Data是一个用于简化数据库、非关系型数据库、索引库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持 map-reduce框架和云计算数据服务。Spring Data可以极大的简化JPA(Elasticsearch…)的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD 外，还包括如分页、排序等一些常用的功能。</p><p><a href="https://spring.io/projects/spring-data">Spring Data 的官网</a></p><p>Spring Data 常用的功能模块如下：</p><ul><li>Spring Data JDBC</li><li>Spring Data JPA</li><li>Spring Data LDAP</li><li>Spring Data MongoDB</li><li>Spring Data Redis</li><li>Spring Data R2DBC</li><li>Spring Data REST</li><li>Spring Data for Apache Cassandra</li><li>Spring Data for Apache Geode</li><li>Spring Data for Apache Solr</li><li>Spring Data for Pivotal GemFire</li><li>Spring Data Couchbase</li><li>Spring Data Elasticsearch</li><li>Spring Data Envers</li><li>Spring Data Neo4j</li><li>Spring Data JDBC Extensions</li><li>Spring for Apache Hadoop</li></ul><h3 id="Spring-Data-Elasticsearch-介绍"><a href="#Spring-Data-Elasticsearch-介绍" class="headerlink" title="Spring Data Elasticsearch 介绍"></a>Spring Data Elasticsearch 介绍</h3><p>Spring Data Elasticsearch基于Spring Data API简化 Elasticsearch 操作，将原始操作Elasticsearch 的客户端API进行封装。Spring Data为Elasticsearch 项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储索引库数据访问层。</p><p><a href="https://spring.io/projects/spring-data-elasticsearch">Spring Data Elasticsearch 官网</a></p><h2 id="50-框架集成-SpringData-代码功能集成"><a href="#50-框架集成-SpringData-代码功能集成" class="headerlink" title="50-框架集成-SpringData-代码功能集成"></a>50-框架集成-SpringData-代码功能集成</h2><p>一、创建Maven项目。</p><p>二、修改pom文件，增加依赖关系。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringDataWithES<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</code></pre><p>三、增加配置文件。</p><p>在 resources 目录中增加application.properties文件</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># es 服务地址</span><span class="token key attr-name">elasticsearch.host</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span class="token comment"># es 服务端口</span><span class="token key attr-name">elasticsearch.port</span><span class="token punctuation">=</span><span class="token value attr-value">9200</span><span class="token comment"># 配置日志级别,开启 debug 日志</span><span class="token key attr-name">logging.level.com.atguigu.es</span><span class="token punctuation">=</span><span class="token value attr-value">debug</span>123456</code></pre><p>四、Spring Boot 主程序。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789</span></code></pre><p>五、数据实体类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">FieldType</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"shopping"</span><span class="token punctuation">,</span> shards <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> replicas <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//必须有 id,这里的 id 是全局唯一的标识，等同于 es 中的"_id"</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span class="token comment">//商品唯一标识</span>    <span class="token comment">/**     * type : 字段数据类型     * analyzer : 分词器类型     * index : 是否索引(默认:true)     * Keyword : 短语,不进行分词     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Text</span><span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token comment">//商品名称</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Keyword</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span><span class="token comment">//分类名称</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Double</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span><span class="token comment">//商品价格</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Keyword</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> images<span class="token punctuation">;</span><span class="token comment">//图片地址</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728293031323334353637</span></code></pre><p>六、配置类</p><ul><li>ElasticsearchRestTemplate是spring-data-elasticsearch项目中的一个类,和其他spring项目中的 template类似。</li><li>在新版的spring-data-elasticsearch 中，ElasticsearchRestTemplate 代替了原来的ElasticsearchTemplate。</li><li>原因是ElasticsearchTemplate基于TransportClient，TransportClient即将在8.x 以后的版本中移除。所以，我们推荐使用ElasticsearchRestTemplate。</li><li>ElasticsearchRestTemplate基于RestHighLevelClient客户端的。需要自定义配置类，继承AbstractElasticsearchConfiguration，并实现elasticsearchClient()抽象方法，创建RestHighLevelClient对象。</li></ul><p>AbstractElasticsearchConfiguration源码：</p><pre class="language-json" data-language="json"><code class="language-json">package org.springframework.data.elasticsearch.config;import org.elasticsearch.client.RestHighLevelClient;import org.springframework.context.annotation.Bean;import org.springframework.data.elasticsearch.core.ElasticsearchOperations;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;<span class="token comment">/** * @author Christoph Strobl * @author Peter-Josef Meisch * @since 3.2 * @see ElasticsearchConfigurationSupport */</span>public abstract class AbstractElasticsearchConfiguration extends ElasticsearchConfigurationSupport <span class="token punctuation">&#123;</span><span class="token comment">//需重写本方法</span>public abstract RestHighLevelClient elasticsearchClient();@Bean(name = <span class="token punctuation">&#123;</span> <span class="token string">"elasticsearchOperations"</span><span class="token punctuation">,</span> <span class="token string">"elasticsearchTemplate"</span> <span class="token punctuation">&#125;</span>)public ElasticsearchOperations elasticsearchOperations(ElasticsearchConverter elasticsearchConverter) <span class="token punctuation">&#123;</span>return new ElasticsearchRestTemplate(elasticsearchClient()<span class="token punctuation">,</span> elasticsearchConverter);<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324</span></code></pre><p>需要自定义配置类，继承AbstractElasticsearchConfiguration，并实现elasticsearchClient()抽象方法，创建RestHighLevelClient对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClientBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">AbstractElasticsearchConfiguration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticsearchConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractElasticsearchConfiguration</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port <span class="token punctuation">;</span>    <span class="token comment">//重写父类方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RestHighLevelClient</span> <span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestClientBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestHighLevelClient</span> restHighLevelClient <span class="token operator">=</span> <span class="token keyword">new</span>                <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425</span></code></pre><p>七、DAO 数据访问对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductDao</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">12345678</span></code></pre><h2 id="51-框架集成-SpringData-集成测试-索引操作"><a href="#51-框架集成-SpringData-集成测试-索引操作" class="headerlink" title="51-框架集成-SpringData-集成测试-索引操作"></a>51-框架集成-SpringData-集成测试-索引操作</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRestTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESIndexTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注入 ElasticsearchRestTemplate</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchRestTemplate</span> elasticsearchRestTemplate<span class="token punctuation">;</span>    <span class="token comment">//创建索引并增加映射配置</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建索引，系统初始化会自动创建索引</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建索引"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建索引，系统初始化会自动创建索引</span>        <span class="token keyword">boolean</span> flg <span class="token operator">=</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除索引 = "</span> <span class="token operator">+</span> flg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">12345678910111213141516171819202122232425262728</span></code></pre><p>用Postman 检测有没有创建和删除。</p><pre class="language-json" data-language="json"><code class="language-json">#GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/_cat/indices?v </span><span class="token number">1</span></code></pre><h2 id="52-框架集成-SpringData-集成测试-文档操作"><a href="#52-框架集成-SpringData-集成测试-文档操作" class="headerlink" title="52-框架集成-SpringData-集成测试-文档操作"></a>52-框架集成-SpringData-集成测试-文档操作</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ProductDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Sort</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESProductDaoTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductDao</span> productDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 新增     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">2999.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setImages</span><span class="token punctuation">(</span><span class="token string">"http://www.atguigu/hw.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//POSTMAN, GET http://localhost:9200/product/_doc/2</span>    <span class="token comment">//修改</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"小米 2 手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">9999.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setImages</span><span class="token punctuation">(</span><span class="token string">"http://www.atguigu/xm.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//POSTMAN, GET http://localhost:9200/product/_doc/2</span>    <span class="token comment">//根据 id 查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> products <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productDao<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//POSTMAN, GET http://localhost:9200/product/_doc/2</span>    <span class="token comment">//批量新增</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> productList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]小米手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1999.0</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span><span class="token function">setImages</span><span class="token punctuation">(</span><span class="token string">"http://www.atguigu/xm.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            productList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        productDao<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>productList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//分页查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByPageable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//设置排序(排序方式，正序还是倒序，排序的 id)</span>        <span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span>DESC<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentPage<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前页，第一页从 0 开始， 1 表示第二页</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//每页显示多少条</span>        <span class="token comment">//设置查询分页</span>        <span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分页查询</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> productPage <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> <span class="token class-name">Product</span> <span class="token operator">:</span> productPage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105</span></code></pre><h2 id="53-框架集成-SpringData-集成测试-文档搜索"><a href="#53-框架集成-SpringData-集成测试-文档搜索" class="headerlink" title="53-框架集成-SpringData-集成测试-文档搜索"></a>53-框架集成-SpringData-集成测试-文档搜索</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ProductDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lun<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Product</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryBuilders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">TermQueryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">PageRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDataESSearchTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductDao</span> productDao<span class="token punctuation">;</span>    <span class="token comment">/**     * term 查询     * search(termQueryBuilder) 调用搜索方法，参数查询构建器对象     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TermQueryBuilder</span> termQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"小米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> products <span class="token operator">=</span> productDao<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>termQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * term 查询加分页     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">termQueryByPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> currentPage<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment">//设置查询分页</span>        <span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TermQueryBuilder</span> termQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"小米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> products <span class="token operator">=</span>                        productDao<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>termQueryBuilder<span class="token punctuation">,</span>pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span></code></pre><h2 id="54-框架集成-SparkStreaming-集成"><a href="#54-框架集成-SparkStreaming-集成" class="headerlink" title="54-框架集成-SparkStreaming-集成"></a>54-框架集成-SparkStreaming-集成</h2><p>Spark Streaming 是Spark core API的扩展，支持实时数据流的处理，并且具有可扩展，高吞吐量，容错的特点。数据可以从许多来源获取,如Kafka， Flume，Kinesis或TCP sockets，并且可以使用复杂的算法进行处理，这些算法使用诸如 map，reduce，join和 window等高级函数表示。最后，处理后的数据可以推送到文件系统，数据库等。实际上，您可以将Spark的机器学习和图形处理算法应用于数据流。</p><p>一、创建Maven项目。</p><p>二、修改 pom 文件，增加依赖关系。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lun.es<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sparkstreaming-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-streaming_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- elasticsearch 的客户端 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- elasticsearch 依赖 2.x 的 log4j --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;dependency>--></span>        <span class="token comment">&lt;!-- &lt;groupId>com.fasterxml.jackson.core&lt;/groupId>--></span>        <span class="token comment">&lt;!-- &lt;artifactId>jackson-databind&lt;/artifactId>--></span>        <span class="token comment">&lt;!-- &lt;version>2.11.1&lt;/version>--></span>        <span class="token comment">&lt;!-- &lt;/dependency>--></span>        <span class="token comment">&lt;!-- &amp;lt;!&amp;ndash; junit 单元测试 &amp;ndash;&amp;gt;--></span>        <span class="token comment">&lt;!-- &lt;dependency>--></span>        <span class="token comment">&lt;!-- &lt;groupId>junit&lt;/groupId>--></span>        <span class="token comment">&lt;!-- &lt;artifactId>junit&lt;/artifactId>--></span>        <span class="token comment">&lt;!-- &lt;version>4.12&lt;/version>--></span>        <span class="token comment">&lt;!-- &lt;/dependency>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758</code></pre><p>三、功能实现</p><pre class="language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpHost<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span>SparkConf<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>dstream<span class="token punctuation">.</span></span>ReceiverInputDStream<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span>IndexRequest<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>indices<span class="token punctuation">.</span></span>CreateIndexRequest<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>RequestOptions<span class="token punctuation">,</span> RestClient<span class="token punctuation">,</span> RestHighLevelClient<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>xcontent<span class="token punctuation">.</span></span>XContentType<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date<span class="token keyword">object</span> SparkStreamingESTest <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"ESTest"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> ds<span class="token operator">:</span> ReceiverInputDStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>        ds<span class="token punctuation">.</span>foreachRDD<span class="token punctuation">(</span>            rdd <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>                println<span class="token punctuation">(</span><span class="token string">"*************** "</span> <span class="token operator">+</span> <span class="token keyword">new</span> Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>                    data <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token keyword">new</span> RestHighLevelClient<span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token keyword">new</span> HttpHost<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 新增文档 - 请求对象</span>                        <span class="token keyword">val</span> request <span class="token operator">=</span> <span class="token keyword">new</span> IndexRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">// 设置索引及唯一性标识</span>                        <span class="token keyword">val</span> ss <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>                        println<span class="token punctuation">(</span><span class="token string">"ss = "</span> <span class="token operator">+</span> ss<span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        request<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"sparkstreaming"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">(</span>ss<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token keyword">val</span> productJson <span class="token operator">=</span>                            <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"""                            | &#123; "data":"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">ss<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">" &#125;                            |"""</span></span><span class="token punctuation">.</span>stripMargin<span class="token punctuation">;</span>                                                <span class="token comment">// 添加文档数据，数据格式为 JSON 格式</span>                        request<span class="token punctuation">.</span>source<span class="token punctuation">(</span>productJson<span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">// 客户端发送请求，获取响应对象</span>                        <span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span>index<span class="token punctuation">(</span>request<span class="token punctuation">,</span>                        RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"_index:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>getIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"_id:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>getId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"_result:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>getResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253</span></code></pre><h2 id="55-框架集成-Flink-集成"><a href="#55-框架集成-Flink-集成" class="headerlink" title="55-框架集成-Flink-集成"></a>55-框架集成-Flink-集成</h2><p>Apache Spark是一-种基于内存的快速、通用、可扩展的大数据分析计算引擎。Apache Spark掀开了内存计算的先河，以内存作为赌注，贏得了内存计算的飞速发展。但是在其火热的同时，开发人员发现，在Spark中，计算框架普遍存在的缺点和不足依然没有完全解决，而这些问题随着5G时代的来临以及决策者对实时数据分析结果的迫切需要而凸显的更加明显：</p><ul><li>乱序数据，迟到数据</li><li>低延迟，高吞吐，准确性</li><li>容错性</li><li>数据精准一次性处理（Exactly-Once）</li></ul><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。在Spark火热的同时，也默默地发展自己，并尝试着解决其他计算框架的问题。慢慢地，随着这些问题的解决，Flink 慢慢被绝大数程序员所熟知并进行大力推广，阿里公司在2015年改进Flink，并创建了内部分支Blink，目前服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。</p><p>一、创建Maven项目。</p><p>二、修改 pom 文件，增加相关依赖类库。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lun.es<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-scala_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-streaming-scala_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-clients_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-elasticsearch7_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- jackson --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>12345678910111213141516171819202122232425262728293031323334353637383940414243</code></pre><p>三、功能实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">RuntimeContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchSinkFunction</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span></span><span class="token class-name">RequestIndexer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>elasticsearch7<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchSink</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">IndexRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Requests</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlinkElasticsearchSinkTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpHost</span><span class="token punctuation">></span></span> httpHosts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpHosts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//httpHosts.add(new HttpHost("10.2.3.1", 9200, "http"));</span><span class="token comment">// use a ElasticsearchSink.Builder to create an ElasticsearchSink</span><span class="token class-name">ElasticsearchSink<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> esSinkBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchSink<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>httpHosts<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchSinkFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">IndexRequest</span> <span class="token function">createIndexRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Requests</span><span class="token punctuation">.</span><span class="token function">indexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"my-index"</span><span class="token punctuation">)</span><span class="token comment">//.type("my-type")</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token punctuation">,</span> <span class="token class-name">RuntimeContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RequestIndexer</span> indexer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>indexer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createIndexRequest</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// configuration for the bulk requests; this instructs the sink to emit after every element, otherwise they would be buffered</span>esSinkBuilder<span class="token punctuation">.</span><span class="token function">setBulkFlushMaxActions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// provide a RestClientFactory for custom configuration on the internally createdREST client</span><span class="token comment">// esSinkBuilder.setRestClientFactory(</span><span class="token comment">// restClientBuilder -> &#123;</span><span class="token comment">// restClientBuilder.setDefaultHeaders(...)</span><span class="token comment">// restClientBuilder.setMaxRetryTimeoutMillis(...)</span><span class="token comment">// restClientBuilder.setPathPrefix(...)</span><span class="token comment">// restClientBuilder.setHttpClientConfigCallback(...)</span><span class="token comment">// &#125;</span><span class="token comment">// );</span>source<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>esSinkBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"flink-es"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859</span></code></pre><h1 id="第6章-Elasticsearch优化"><a href="#第6章-Elasticsearch优化" class="headerlink" title="第6章 Elasticsearch优化"></a>第6章 Elasticsearch优化</h1><h2 id="56-优化-硬件选择"><a href="#56-优化-硬件选择" class="headerlink" title="56-优化-硬件选择"></a>56-优化-硬件选择</h2><p>Elasticsearch 的基础是 Lucene，所有的索引和文档数据是存储在本地的磁盘中，具体的路径可在 ES 的配置文件…&#x2F;config&#x2F;elasticsearch.yml中配置，如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#</span><span class="token comment"># Path to directory where to store the data (separate multiple locations by comma):</span><span class="token comment">#</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /path/to/data<span class="token comment">#</span><span class="token comment"># Path to log files:</span><span class="token comment">#</span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /path/to/logs12345678</code></pre><p>磁盘在现代服务器上通常都是瓶颈。Elasticsearch重度使用磁盘，你的磁盘能处理的吞吐量越大，你的节点就越稳定。这里有一些优化磁盘I&#x2F;O的技巧：</p><ul><li>使用SSD就像其他地方提过的，他们比机械磁盘优秀多了。</li><li>使用RAID0。条带化RAID会提高磁盘IO，代价显然就是当一块硬盘故障时整个就故障了。不要使用镜像或者奇偶校验RAID，因为副本已经提供了这个功能。</li><li>另外，使用多块硬盘，并允许Elasticsearch 通过多个path data目录配置把数据条带化分配到它们上面。</li><li>不要使用远程挂载的存储，比如NFS或者SMB&#x2F;CIFS。这个引入的延迟对性能来说完全是背道而驰的。</li></ul><h2 id="57-优化-分片策略"><a href="#57-优化-分片策略" class="headerlink" title="57-优化-分片策略"></a>57-优化-分片策略</h2><h3 id="合理设置分片数"><a href="#合理设置分片数" class="headerlink" title="合理设置分片数"></a>合理设置分片数</h3><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后由于索引的路由机制，我们是不能重新修改分片数的。</p><p>可能有人会说，我不知道这个索引将来会变得多大，并且过后我也不能更改索引的大小，所以为了保险起见，还是给它设为 1000 个分片吧。但是需要知道的是，一个分片并不是没有代价的。需要了解：</p><ul><li>一个分片的底层即为一个 Lucene 索引，会消耗一定文件句柄、内存、以及 CPU运转。</li><li>每一个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好， 但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</li><li>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据会导致很低的相关度。</li></ul><p>一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断，横向扩展应当分阶段进行。为下一阶段准备好足够的资源。 只有当你进入到下一个阶段，你才有时间思考需要作出哪些改变来达到这个阶段。一般来说，我们遵循一些原则：</p><ul><li>控制每个分片占用的硬盘容量不超过 ES 的最大 JVM 的堆空间设置（一般设置不超过 32G，参考下文的 JVM 设置原则），因此，如果索引的总容量在 500G 左右，那分片大小在 16 个左右即可；当然，最好同时考虑原则 2。</li><li>考虑一下 node 数量，一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1 个以上的副本，同样有可能会导致数据丢失，集群无法恢复。所以， 一般都设置分片数不超过节点数的 3 倍。</li><li>主分片，副本和节点最大数之间数量，我们分配的时候可以参考以下关系：<br><code>节点数&lt;=主分片数 *（副本数+1）</code></li></ul><h3 id="推迟分片分配"><a href="#推迟分片分配" class="headerlink" title="推迟分片分配"></a>推迟分片分配</h3><p>对于节点瞬时中断的问题，默认情况，集群会等待一分钟来查看节点是否会重新加入，如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。这样就可以减少 ES 在自动再平衡可用分片时所带来的极大开销。</p><p>通过修改参数 delayed_timeout ，可以延长再均衡的时间，可以全局设置也可以在索引级别进行修改：</p><pre class="language-json" data-language="json"><code class="language-json">#PUT /_all/_settings<span class="token punctuation">&#123;</span><span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"index.unassigned.node_left.delayed_timeout"</span><span class="token operator">:</span> <span class="token string">"5m"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">123456</span></code></pre><h2 id="58-优化-路由选择"><a href="#58-优化-路由选择" class="headerlink" title="58-优化-路由选择"></a>58-优化-路由选择</h2><p>当我们查询文档的时候， Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？它其实是通过下面这个公式来计算出来：</p><pre class="language-none"><code class="language-none">shard &#x3D; hash(routing) % number_of_primary_shards1</code></pre><p>routing 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p><h3 id="不带routing查询"><a href="#不带routing查询" class="headerlink" title="不带routing查询"></a>不带routing查询</h3><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为2个步骤</p><ul><li>分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</li><li>聚合：协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</li></ul><h3 id="带routing查询"><a href="#带routing查询" class="headerlink" title="带routing查询"></a>带routing查询</h3><p>查询的时候，可以直接根据routing 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。向上面自定义的用户查询，如果routing 设置为userid 的话，就可以直接查询出数据来，效率提升很多。</p><h2 id="59-优化-写入速度优化"><a href="#59-优化-写入速度优化" class="headerlink" title="59-优化-写入速度优化"></a>59-优化-写入速度优化</h2><p>ES 的默认配置，是综合了数据可靠性、写入速度、搜索实时性等因素。实际使用时，我们需要根据公司要求，进行偏向性的优化。</p><p>针对于搜索性能要求不高，但是对写入要求较高的场景，我们需要尽可能的选择恰当写优化策略。综合来说，可以考虑以下几个方面来提升写索引的性能：</p><ul><li>加大Translog Flush，目的是降低Iops、Writeblock。</li><li>增加Index Refesh间隔，目的是减少Segment Merge的次数。</li><li>调整Bulk 线程池和队列。</li><li>优化节点间的任务分布。</li><li>优化Lucene层的索引建立，目的是降低CPU及IO。</li></ul><h3 id="优化存储设备"><a href="#优化存储设备" class="headerlink" title="优化存储设备"></a>优化存储设备</h3><p>ES 是一种密集使用磁盘的应用，在段合并的时候会频繁操作磁盘，所以对磁盘要求较高，当磁盘速度提升之后，集群的整体性能会大幅度提高。</p><h3 id="合理使用合并"><a href="#合理使用合并" class="headerlink" title="合理使用合并"></a>合理使用合并</h3><p>Lucene 以段的形式存储数据。当有新的数据写入索引时， Lucene 就会自动创建一个新的段。</p><p>随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU 就越多，查询效率就会下降。</p><p>由于 Lucene 段合并的计算量庞大，会消耗大量的 I&#x2F;O，所以 ES 默认采用较保守的策略，让后台定期进行段合并。</p><h3 id="减少-Refresh-的次数"><a href="#减少-Refresh-的次数" class="headerlink" title="减少 Refresh 的次数"></a>减少 Refresh 的次数</h3><p>Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的refresh_interval 为1 秒。</p><p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次 Refresh，然后 Refresh 会把内存中的的数据刷新到操作系统的文件缓存系统中。</p><p>如果我们对搜索的实效性要求不高，可以将 Refresh 周期延长，例如 30 秒。</p><p>这样还可以有效地减少段刷新次数，但这同时意味着需要消耗更多的 Heap 内存。</p><h3 id="加大-Flush-设置"><a href="#加大-Flush-设置" class="headerlink" title="加大 Flush 设置"></a>加大 Flush 设置</h3><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p><p>index.translog.flush_threshold_size 参数的默认值是 512MB，我们进行修改。</p><p>增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以我们需要为操作系统的文件缓存系统留下足够的空间。</p><h3 id="减少副本的数量"><a href="#减少副本的数量" class="headerlink" title="减少副本的数量"></a>减少副本的数量</h3><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以 Replicas 的数量会严重影响写索引的效率。</p><p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p><p>如果我们需要大批量进行写入操作，可以先禁止Replica复制，设置<br>index.number_of_replicas: 0 关闭副本。在写入完成后， Replica 修改回正常的状态。</p><h2 id="60-优化-内存设置"><a href="#60-优化-内存设置" class="headerlink" title="60-优化-内存设置"></a>60-优化-内存设置</h2><p>ES 默认安装后设置的内存是 1GB，对于任何一个现实业务来说，这个设置都太小了。如果是通过解压安装的 ES，则在 ES 安装文件中包含一个 jvm.option 文件，添加如下命令来设置 ES 的堆大小， Xms 表示堆的初始大小， Xmx 表示可分配的最大内存，都是 1GB。</p><p>确保 Xmx 和 Xms 的大小是相同的，其目的是为了能够在 Java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源，可以减轻伸缩堆大小带来的压力。</p><p>假设你有一个 64G 内存的机器，按照正常思维思考，你可能会认为把 64G 内存都给ES 比较好，但现实是这样吗， 越大越好？虽然内存对 ES 来说是非常重要的，但是答案是否定的！</p><p>因为 ES 堆内存的分配需要满足以下两个原则：</p><ul><li>不要超过物理内存的 50%： Lucene 的设计目的是把底层 OS 里的数据缓存到内存中。Lucene 的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问。如果我们设置的堆内存过大， Lucene 可用的内存将会减少，就会严重影响降低 Lucene 的全文本查询性能。</li><li>堆内存的大小最好不要超过 32GB：在 Java 中，所有对象都分配在堆上，然后有一个 Klass Pointer 指针指向它的类元数据。这个指针在 64 位的操作系统上为 64 位， 64 位的操作系统可以使用更多的内存（2^64）。在 32 位<br>的系统上为 32 位， 32 位的操作系统的最大寻址空间为 4GB（2^32）。<br>但是 64 位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的指针在主内存和缓存器（例如 LLC, L1 等）之间移动数据的时候，会占用更多的带宽。</li></ul><p>最终我们都会采用 31 G 设置</p><ul><li>-Xms 31g</li><li>-Xmx 31g</li></ul><p>假设你有个机器有 128 GB 的内存，你可以创建两个节点，每个节点内存分配不超过 32 GB。也就是说不超过 64 GB 内存给 ES 的堆内存，剩下的超过 64 GB 的内存给 Lucene。</p><h2 id="61-优化-重要配置"><a href="#61-优化-重要配置" class="headerlink" title="61-优化-重要配置"></a>61-优化-重要配置</h2><table><thead><tr><th>参数名</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>elasticsearch</td><td>配置 ES 的集群名称，默认值是 ES，建议改成与所存数据相关的名称， ES 会自动发现在同一网段下的 集群名称相同的节点。</td></tr><tr><td>node.name</td><td>node-1</td><td>集群中的节点名，在同一个集群中不能重复。节点 的名称一旦设置，就不能再改变了。当然，也可以 设 置 成 服 务 器 的 主 机 名 称 ， 例 如 node.name:${HOSTNAME}。</td></tr><tr><td>node.master</td><td>true</td><td>指定该节点是否有资格被选举成为 Master 节点，默 认是 True，如果被设置为 True，则只是有资格成为 Master 节点，具体能否成为 Master 节点，需要通 过选举产生。</td></tr><tr><td>node.data</td><td>true</td><td>指定该节点是否存储索引数据，默认为 True。数据 的增、删、改、查都是在 Data 节点完成的。</td></tr><tr><td>index.number_of_shards</td><td>1</td><td>设置都索引分片个数，默认是 1 片。也可以在创建 索引时设置该值，具体设置为多大都值要根据数据 量的大小来定。如果数据量不大，则设置成 1 时效 率最高</td></tr><tr><td>index.number_of_replicas</td><td>1</td><td>设置默认的索引副本个数，默认为 1 个。副本数越 多，集群的可用性越好，但是写索引时需要同步的 数据越多。</td></tr><tr><td>transport.tcp.compress</td><td>true</td><td>设置在节点间传输数据时是否压缩，默认为 False， 不压缩</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>1</td><td>设置在选举 Master 节点时需要参与的最少的候选 主节点数，默认为 1。如果使用默认值，则当网络 不稳定时有可能会出现脑裂。 合 理 的 数 值 为 (master_eligible_nodes&#x2F;2)+1 ， 其 中 master_eligible_nodes 表示集群中的候选主节点数</td></tr><tr><td>discovery.zen.ping.timeout</td><td>3s</td><td>设置在集群中自动发现其他节点时 Ping 连接的超 时时间，默认为 3 秒。 在较差的网络环境下需要设置得大一点，防止因误 判该节点的存活状态而导致分片的转移</td></tr></tbody></table><h1 id="第7章-Elasticsearch面试题"><a href="#第7章-Elasticsearch面试题" class="headerlink" title="第7章 Elasticsearch面试题"></a>第7章 Elasticsearch面试题</h1><h2 id="62-面试题"><a href="#62-面试题" class="headerlink" title="62-面试题"></a>62-面试题</h2><h3 id="为什么要使用-Elasticsearch？"><a href="#为什么要使用-Elasticsearch？" class="headerlink" title="为什么要使用 Elasticsearch？"></a>为什么要使用 Elasticsearch？</h3><p>系统中的数据， 随着业务的发展，时间的推移， 将会非常多， 而业务中往往采用模糊查询进行数据的搜索， 而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据库中，查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p><h3 id="Elasticsearch-的-master-选举流程？"><a href="#Elasticsearch-的-master-选举流程？" class="headerlink" title="Elasticsearch 的 master 选举流程？"></a>Elasticsearch 的 master 选举流程？</h3><ul><li>Elasticsearch的选主是ZenDiscovery模块负责的，主要包含Ping（节点之间通过这个RPC来发现彼此）<br>和Unicast（单播模块包含-一个主机列表以控制哪些节点需要ping通）这两部分。</li><li>对所有可以成为master的节点（node master: true）根据nodeId字典排序，每次选举每个节点都把自<br>己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是master节点。</li><li>如果对某个节点的投票数达到一定的值（可以成为master节点数n&#x2F;2+1）并且该节点自己也选举自己，<br>那这个节点就是master。否则重新选举一直到满足上述条件。</li><li>master节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data节点可以关闭http<br>功能。</li></ul><h3 id="Elasticsearch-集群脑裂问题？"><a href="#Elasticsearch-集群脑裂问题？" class="headerlink" title="Elasticsearch 集群脑裂问题？"></a>Elasticsearch 集群脑裂问题？</h3><p>“脑裂”问题可能的成因：</p><ul><li>网络问题：集群间的网络延迟导致一些节点访问不到master, 认为master 挂掉了从而选举出新的master,并对master上的分片和副本标红，分配新的主分片。</li><li>节点负载：主节点的角色既为master又为data,访问量较大时可能会导致ES停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</li><li>内存回收：data 节点上的ES进程占用的内存较大，引发JVM的大规模内存回收，造成ES进程失去响应。</li></ul><p>脑裂问题解决方案：</p><ul><li>减少误判：discovery.zen ping_ timeout 节点状态的响应时间，默认为3s，可以适当调大，如果master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如6s，discovery.zen.ping_timeout:6），可适当减少误判。</li><li>选举触发：discovery.zen.minimum. <em>master</em> nodes:1，该参數是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个數大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为(n &#x2F; 2) +1, n为主节点个数（即有资格成为主节点的节点个数）。</li><li>角色分离：即master节点与data节点分离，限制角色<ul><li>主节点配置为：node master: true，node data: false</li><li>从节点配置为：node master: false，node data: true</li></ul></li></ul><h3 id="Elasticsearch-索引文档的流程？"><a href="#Elasticsearch-索引文档的流程？" class="headerlink" title="Elasticsearch 索引文档的流程？"></a>Elasticsearch 索引文档的流程？</h3><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/1bdc6c30d1be9b1bff83a683c64d2ac7.png" alt="img"></p><ul><li>协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片：shard &#x3D; hash(document_id) % (num_of_primary_shards)</li><li>当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory Buffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 Memory Buffer 到 Filesystem Cache 的过程就叫做 refresh；</li><li>当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失， ES 是通过 translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystemcache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</li><li>在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync 将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。</li><li>flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；</li></ul><h3 id="Elasticsearch-更新和删除文档的流程？"><a href="#Elasticsearch-更新和删除文档的流程？" class="headerlink" title="Elasticsearch 更新和删除文档的流程？"></a>Elasticsearch 更新和删除文档的流程？</h3><ul><li>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</li><li>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</li><li>在新的文档被创建时， Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</li></ul><h3 id="Elasticsearch-搜索的流程？"><a href="#Elasticsearch-搜索的流程？" class="headerlink" title="Elasticsearch 搜索的流程？"></a>Elasticsearch 搜索的流程？</h3><p><img src="/2022/05/25/ElasticSearch%E7%AC%94%E8%AE%B0/053a14eee04ace7b4e5aec0ce53a5284.png" alt="img"></p><ul><li>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</li><li>在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。 PS：在搜索的时候是会查询Filesystem Cache 的，但是有部分数据还在 Memory Buffer，所以搜索是近实时的。</li><li>每个分片返回各自优先队列中 所有文档的 ID 和排序值 给协调节点，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li><li>接下来就是取回阶段， 协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并丰富文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。</li><li>Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少的时候可能不够准确， DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和 Document frequency，这个评分更准确，但是性能会变差。</li></ul><h3 id="Elasticsearch-在部署时，对-Linux-的设置有哪些优化方法？"><a href="#Elasticsearch-在部署时，对-Linux-的设置有哪些优化方法？" class="headerlink" title="Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？"></a>Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</h3><ul><li>64 GB 内存的机器是非常理想的， 但是 32 GB 和 16 GB 机器也是很常见的。少于 8 GB 会适得其反。</li><li>如果你要在更快的 CPUs 和更多的核心之间选择，选择更多的核心更好。多个内核提供的额外并发远胜过稍微快一点点的时钟频率。</li><li>如果你负担得起 SSD，它将远远超出任何旋转介质。 基于 SSD 的节点，查询和索引性能都有提升。如果你负担得起， SSD 是一个好的选择。</li><li>即使数据中心们近在咫尺，也要避免集群跨越多个数据中心。绝对要避免集群跨越大的地理距离。</li><li>请确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在 Elasticsearch 的几个地方，使用 Java 的本地序列化。</li><li>通过设置 gateway.recover_after_nodes、 gateway.expected_nodes、 gateway.recover_after_time 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟。</li><li>Elasticsearch 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。最好使用单播代替组播。</li><li>不要随意修改垃圾回收器（CMS）和各个线程池的大小。</li><li>把你的内存的（少于）一半给 Lucene（但不要超过 32 GB！），通过 ES_HEAP_SIZE 环境变量设置。</li><li>内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个 100 微秒的操作可能变成 10 毫秒。 再想想那么多 10 微秒的操作时延累加起来。 不难看出 swapping 对于性能是多么可怕。</li><li>Lucene 使用了大量的文件。同时， Elasticsearch 在节点和 HTTP 客户端之间进行通信也使用了大量的套接字。 所有这一切都需要足够的文件描述符。你应该增加你的文件描述符，设置一个很大的值，如 64,000。</li></ul><h3 id="GC-方面，在使用-Elasticsearch-时要注意什么？"><a href="#GC-方面，在使用-Elasticsearch-时要注意什么？" class="headerlink" title="GC 方面，在使用 Elasticsearch 时要注意什么？"></a>GC 方面，在使用 Elasticsearch 时要注意什么？</h3><p>倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segment memory 增长趋势。</p><p>各类缓存， field cache, filter cache, indexing cache, bulk queue 等等，要设置合理的大小，并且要应该根据最坏的情况来看 heap 是否够用，也就是各类缓存全部占满的时候，还有 heap 空间可以分配给其他任务吗？避免采用 clear cache 等“自欺欺人”的方式来释放内存。</p><p>避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用 scan &amp; scroll api 来实现。</p><p>cluster stats 驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过 tribe node 连接。</p><p>想知道 heap 够不够，必须结合实际应用场景，并对集群的 heap 使用情况做持续的监控。</p><h3 id="Elasticsearch-对于大数据量（上亿量级）的聚合如何实现？"><a href="#Elasticsearch-对于大数据量（上亿量级）的聚合如何实现？" class="headerlink" title="Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？"></a>Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？</h3><p>Elasticsearch 提供的首个近似聚合是 cardinality 度量。它提供一个字段的基数，即该字段的 distinct或者 unique 值的数目。它是基于 HLL 算法的。 HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</p><h3 id="在并发情况下，-Elasticsearch-如果保证读写一致？"><a href="#在并发情况下，-Elasticsearch-如果保证读写一致？" class="headerlink" title="在并发情况下， Elasticsearch 如果保证读写一致？"></a>在并发情况下， Elasticsearch 如果保证读写一致？</h3><ul><li>可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</li><li>另外对于写操作，一致性级别支持 quorum&#x2F;one&#x2F;all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。</li><li>对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片，确保文档是最新版本。</li></ul><h3 id="如何监控-Elasticsearch-集群状态？"><a href="#如何监控-Elasticsearch-集群状态？" class="headerlink" title="如何监控 Elasticsearch 集群状态？"></a>如何监控 Elasticsearch 集群状态？</h3><ol><li>elasticsearch-head 插件。</li><li>通过 Kibana 监控 Elasticsearch。你可以实时查看你的集群健康状态和性能，也可以分析过去的集群、索引和节点指标</li></ol><h3 id="是否了解字典树？"><a href="#是否了解字典树？" class="headerlink" title="是否了解字典树？"></a>是否了解字典树？</h3><p>字典树又称单词查找树， Trie 树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p><p>Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。它有 3 个基本性质：</p><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ul><p>对于中文的字典树，每个节点的子节点用一个哈希表存储，这样就不用浪费太大的空间，而且查询速度上可以保留哈希的复杂度 O(1)。</p><h3 id="Elasticsearch-中的集群、节点、索引、文档、类型是什么？"><a href="#Elasticsearch-中的集群、节点、索引、文档、类型是什么？" class="headerlink" title="Elasticsearch 中的集群、节点、索引、文档、类型是什么？"></a>Elasticsearch 中的集群、节点、索引、文档、类型是什么？</h3><ul><li>集群是一个或多个节点（服务器）的集合，它们共同保存您的整个数据，并提供跨所有节点的联合索引和搜索功能。群集由唯一名 称标识，默认情况下为”elasticsearch”。此名称很重要，因为如果节点设置为按名称加入群集，则该节点只能是群集的一部分。</li><li>节点是属于集群一部分的单个服务器。它存储数据并参与群集索引和搜索功能。</li><li>索引就像关系数据库中的“数据库”。它有一个定义多种类型的映射。索引是逻辑名称空间，映射到一个或多个主分片，并且可以有零个或多个副本分片。MySQL &#x3D;&gt;数据库，Elasticsearch&#x3D;&gt;索引。</li><li>文档类似于关系数据库中的一行。不同之处在于索引中的每个文档可以具有不同的结构(字段)，但是对于通用字段应该具有相同的数据类型。MySQL &#x3D;&gt; Databases &#x3D;&gt; Tables &#x3D;&gt; Columns &#x2F; Rows，Elasticsearch&#x3D;&gt; Indices &#x3D;&gt; Types &#x3D;&gt;具有属性的文档Doc。</li><li>类型是索引的逻辑类别&#x2F;分区，其语义完全取决于用户。</li></ul><h3 id="Elasticsearch-中的倒排索引是什么？"><a href="#Elasticsearch-中的倒排索引是什么？" class="headerlink" title="Elasticsearch 中的倒排索引是什么？"></a>Elasticsearch 中的倒排索引是什么？</h3><p>倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。ES中的倒排索引其实就是 lucene 的倒排索引，区别于传统的正向索引， 倒排索引会再存储数据时将关键词和数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker安装的mysql来安装hive</title>
      <link href="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/"/>
      <url>/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/</url>
      
        <content type="html"><![CDATA[<h1 id="首先安装mysql"><a href="#首先安装mysql" class="headerlink" title="首先安装mysql"></a>首先安装mysql</h1><h2 id="用mysql-5-7举例"><a href="#用mysql-5-7举例" class="headerlink" title="用mysql:5.7举例"></a>用mysql:5.7举例</h2><h3 id="1可以先在docker-hub上查找mysql的镜像"><a href="#1可以先在docker-hub上查找mysql的镜像" class="headerlink" title="1可以先在docker hub上查找mysql的镜像"></a>1可以先在docker hub上查找mysql的镜像</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">docker search mysql</code></pre><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190015919.png" alt="image-20220524190015919"></p><h3 id="2，我这次安装的mysql-5-7"><a href="#2，我这次安装的mysql-5-7" class="headerlink" title="2，我这次安装的mysql:5.7"></a>2，我这次安装的mysql:5.7</h3><p>所以直接从docker hub上拉取mysql:5.7</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7</code></pre><h3 id="3-运行mysql"><a href="#3-运行mysql" class="headerlink" title="3,运行mysql"></a>3,运行mysql</h3><blockquote><p>#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！<br>#官方测试：docker run –name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag<br>#启动：<br>-d        后台运行<br>-p        端口映射<br>-v        卷挂载<br>-e        环境配置<br>–name    容器名字</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql0 mysql:5.7</code></pre><h3 id="4-查看容器是否创建成功"><a href="#4-查看容器是否创建成功" class="headerlink" title="4,查看容器是否创建成功"></a>4,查看容器是否创建成功</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token function">docker</span> <span class="token function">ps</span></code></pre><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190023030.png" alt="image-20220524190023030"><br>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器的id /bin/bash</code></pre><h3 id="5，使用navicat连接服务器或虚拟机上的mysql"><a href="#5，使用navicat连接服务器或虚拟机上的mysql" class="headerlink" title="5，使用navicat连接服务器或虚拟机上的mysql"></a>5，使用navicat连接服务器或虚拟机上的mysql</h3><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190032705.png" alt="image-20220524190032705"></p><h2 id="开始安装hive"><a href="#开始安装hive" class="headerlink" title="开始安装hive"></a>开始安装hive</h2><p>前提条件：</p><blockquote><p>在虚拟机或是服务器上安装好hadoop 2.7.3的环境<br>安装好mysql5：7<br>在mysql中创建一个名为hive的数据库</p></blockquote><p><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190037826.png" alt="image-20220524190037826"></p><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><p>1，去官网下载hive安装文件，下载地址 ：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">hive 下载地址</a>apache-hive-2.3.9-bin.tar.gz<br>2，将hive安装文件上传到虚拟机或是服务器的~&#x2F;soft目录下，解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/soft$ <span class="token function">tar</span> -zxvf apache-hive-2.3.9-bin.tar.gz</code></pre><p>3，创建软连接：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s apache-hive-2.3.9-bin hive</code></pre><p>4，配置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc</code></pre><p>文件添加以下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意：一定不要打错！ 可以在操作之前拍个快照。</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=~</span>/soft/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HIVE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p>使配置文件生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>5，配置hive-site.xml(没有这个文件直接vim就可以创建)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hive/conf<span class="token function">vim</span> hive-site.xml</code></pre><p>将以下内容添加到xml文件中</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--数据库驱动  如果你使用的是8.x  驱动是：com.mysql.cj.jdbc.Driver--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--数据库的用户名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--数据库的密码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>6，将mysql的驱动文件拷贝到hive&#x2F;lib目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql-connection-java-5.1.46.jar ~/soft/hive/lib</code></pre><p>7，初始化Mysql</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name schematool/root/soft/apache-hive-2.3.9-bin/bin/schematool -dbType mysql -initSchema</code></pre><p>可以看到已经正确完成初始化了。<br><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190045119.png" alt="image-20220524190045119"></p><p>如果初始化不成功，可能是hadoop的版本问题。hadoop3.  * 和hive 3 .*会出现</p><pre class="language-bash" data-language="bash"><code class="language-bash">Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument<span class="token punctuation">(</span>ZLjava/lang/String<span class="token punctuation">;</span>Ljava/lang/Object<span class="token punctuation">;</span><span class="token punctuation">)</span>V    at org.apache.hadoop.conf.Configuration.set<span class="token punctuation">(</span>Configuration.java:1357<span class="token punctuation">)</span>    at org.apache.hadoop.conf.Configuration.set<span class="token punctuation">(</span>Configuration.java:1338<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.setJar<span class="token punctuation">(</span>JobConf.java:536<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.setJarByClass<span class="token punctuation">(</span>JobConf.java:554<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>JobConf.java:448<span class="token punctuation">)</span>    at org.apache.hadoop.hive.conf.HiveConf.initialize<span class="token punctuation">(</span>HiveConf.java:5141<span class="token punctuation">)</span>    at org.apache.hadoop.hive.conf.HiveConf.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveConf.java:5099<span class="token punctuation">)</span>    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4jCommon<span class="token punctuation">(</span>LogUtils.java:97<span class="token punctuation">)</span>    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4j<span class="token punctuation">(</span>LogUtils.java:81<span class="token punctuation">)</span>    at org.apache.hadoop.hive.cli.CliDriver.run<span class="token punctuation">(</span>CliDriver.java:699<span class="token punctuation">)</span>    at org.apache.hadoop.hive.cli.CliDriver.main<span class="token punctuation">(</span>CliDriver.java:683<span class="token punctuation">)</span>    at sun.reflect.NativeMethodAccessorImpl.invoke0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun.reflect.NativeMethodAccessorImpl.invoke<span class="token punctuation">(</span>NativeMethodAccessorImpl.java:62<span class="token punctuation">)</span>    at sun.reflect.DelegatingMethodAccessorImpl.invoke<span class="token punctuation">(</span>DelegatingMethodAccessorImpl.java:43<span class="token punctuation">)</span>    at java.lang.reflect.Method.invoke<span class="token punctuation">(</span>Method.java:483<span class="token punctuation">)</span>    at org.apache.hadoop.util.RunJar.run<span class="token punctuation">(</span>RunJar.java:323<span class="token punctuation">)</span>    at org.apache.hadoop.util.RunJar.main<span class="token punctuation">(</span>RunJar.java:236<span class="token punctuation">)</span></code></pre><p>错误原因：系统找不到这个类所在的jar包或者jar包的版本不一样系统不知道使用哪个。hive启动报错的原因是后者</p><p>解决办法：</p><p>1、com.google.common.base.Preconditions.checkArgument这个类所在的jar包为：guava.jar</p><p>2、hadoop-3.2.1（路径：hadoop\share\hadoop\common\lib）中该jar包为 guava-27.0-jre.jar；而hive-3.1.2(路径：hive&#x2F;lib)中该jar包为guava-19.0.1.jar</p><p>3、将jar包变成一致的版本：删除hive中低版本jar包，将hadoop中高版本的复制到hive的lib中。</p><p>再次启动问题得到解决！</p><p>可以测试hive是否安装成功，开启hive之前要先开启hadoop</p><p>可以测试hive是否安装成功，开启hive之前要先开启hadoop</p><pre class="language-bash" data-language="bash"><code class="language-bash">start-all.shhive</code></pre><p>可以看到安装成功了。<br><img src="/2022/05/24/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220524190049670.png" alt="image-20220524190049670"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> mysql </category>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> mysql </tag>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Springboot项目</title>
      <link href="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>首先：我是参考着几篇博客：</p><blockquote><p><a href="https://blog.csdn.net/hangao233/article/details/104395693">https://blog.csdn.net/hangao233/article/details/104395693</a><br><a href="https://www.jianshu.com/p/397929dbc27d">https://www.jianshu.com/p/397929dbc27d</a></p></blockquote><h2 id="第一步：先在虚拟机或服务器上安装docker服务"><a href="#第一步：先在虚拟机或服务器上安装docker服务" class="headerlink" title="第一步：先在虚拟机或服务器上安装docker服务"></a>第一步：先在虚拟机或服务器上安装docker服务</h2><blockquote><p>要安装Docker Engine，您需要CentOS 7或8的维护版本。不支持或未测试存档版本。</p></blockquote><h3 id="1，卸载旧版本"><a href="#1，卸载旧版本" class="headerlink" title="1，卸载旧版本"></a>1，卸载旧版本</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>yum报告没有安装这些软件包就可以了。</p><h3 id="2，安装docker软件包"><a href="#2，安装docker软件包" class="headerlink" title="2，安装docker软件包"></a>2，安装docker软件包</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum install <span class="token operator">-</span>y yum-utils</code></pre><h3 id="3-设置镜像仓库地址"><a href="#3-设置镜像仓库地址" class="headerlink" title="3,设置镜像仓库地址"></a>3,设置镜像仓库地址</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 默认是国外的</span>sudo yum-config-manager \    <span class="token operator">--</span><span class="token function">add-repo</span> \    https:<span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com/linux/centos/docker-ce<span class="token punctuation">.</span>repo    <span class="token comment"># 换成阿里云镜像地址</span>sudo yum-config-manager \    <span class="token operator">--</span><span class="token function">add-repo</span> \    http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/docker-ce/linux/centos/docker-ce<span class="token punctuation">.</span>repo</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391191.png" alt="在这里插入图片描述"></p><h3 id="4-安装最新版Docker-Engine容器"><a href="#4-安装最新版Docker-Engine容器" class="headerlink" title="4,安装最新版Docker Engine容器"></a>4,安装最新版Docker Engine容器</h3><p>安装前建议先将将服务器上的软件包信息现在本地缓存,以提高安装软件的速度</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum makecache fast</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391202.png" alt="在这里插入图片描述"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker-ce社区版(docker-ee企业版)</span>sudo yum install docker-ce docker-ce-<span class="token function">cli</span> containerd<span class="token punctuation">.</span>io</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391203.png" alt="在这里插入图片描述">安装完成后，Docker只安装但并未启动</p><h3 id="5，启动Docker"><a href="#5，启动Docker" class="headerlink" title="5，启动Docker"></a>5，启动Docker</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo systemctl <span class="token function">start</span> docker</code></pre><p>然后可用docker version命令测试Docker是否安装成功，并查看Docker的版本信息<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391204.png" alt="在这里插入图片描述"></p><h2 id="第二步：使用Docker安装mysql：5-7"><a href="#第二步：使用Docker安装mysql：5-7" class="headerlink" title="第二步：使用Docker安装mysql：5.7"></a>第二步：使用Docker安装mysql：5.7</h2><h3 id="1可以先在docker-hub上查找mysql的镜像"><a href="#1可以先在docker-hub上查找mysql的镜像" class="headerlink" title="1可以先在docker hub上查找mysql的镜像"></a>1可以先在docker hub上查找mysql的镜像</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">docker search mysql</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391205.png" alt="在这里插入图片描述"></p><h3 id="2，我这次安装的mysql-5-7"><a href="#2，我这次安装的mysql-5-7" class="headerlink" title="2，我这次安装的mysql:5.7"></a>2，我这次安装的mysql:5.7</h3><p>所以直接从docker hub上拉取mysql:5.7</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7</code></pre><h3 id="3-运行mysql"><a href="#3-运行mysql" class="headerlink" title="3,运行mysql"></a>3,运行mysql</h3><blockquote><p>#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！<br>#官方测试：docker run –name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag<br>#启动：<br>-d        后台运行<br>-p        端口映射<br>-v        卷挂载<br>-e        环境配置<br>–name    容器名字</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql0 mysql:5.7</code></pre><h3 id="4-查看容器是否创建成功"><a href="#4-查看容器是否创建成功" class="headerlink" title="4,查看容器是否创建成功"></a>4,查看容器是否创建成功</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token function">docker</span> <span class="token function">ps</span></code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/79fbe2e581464313ac4e2e16a5881de6.png" alt="在这里插入图片描述"><br>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器的id /bin/bash</code></pre><h3 id="5，使用navicat连接服务器或虚拟机上的mysql"><a href="#5，使用navicat连接服务器或虚拟机上的mysql" class="headerlink" title="5，使用navicat连接服务器或虚拟机上的mysql"></a>5，使用navicat连接服务器或虚拟机上的mysql</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_16,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h3 id="6，可以使用navicat提供的工具进行数据的传输"><a href="#6，可以使用navicat提供的工具进行数据的传输" class="headerlink" title="6，可以使用navicat提供的工具进行数据的传输"></a>6，可以使用navicat提供的工具进行数据的传输</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391206.png" alt="在这里插入图片描述"><br>然后可以看到数据已经传输成功：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_7,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h2 id="第三步：将springboot项目打包"><a href="#第三步：将springboot项目打包" class="headerlink" title="第三步：将springboot项目打包"></a>第三步：将springboot项目打包</h2><h3 id="1-准备springboot项目并进行打包"><a href="#1-准备springboot项目并进行打包" class="headerlink" title="1.准备springboot项目并进行打包"></a>1.准备springboot项目并进行打包</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/f53c09f8ac344b67a7bf12cc9523be51.png" alt="在这里插入图片描述"><br>打包成功会看到出现一个target的目录，里面的jar包就是我们刚刚打包好的<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_12,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>然后对yml文件进行编辑：<br><img src="https://img-blog.csdnimg.cn/00ff466ca3a44d45a72ef9bb31436eff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="2-编写DockerFile文件"><a href="#2-编写DockerFile文件" class="headerlink" title="2.编写DockerFile文件"></a>2.编写DockerFile文件</h3><p>在idea的插件市场搜索docker，并安装<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391218.png" alt="在这里插入图片描述"><br>然后在根目录下新建一个Dockerfile的文件：<br><img src="https://img-blog.csdnimg.cn/2ba3235b3d7447769b88c024bc970b91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>如果显示是这样的说明docker那个插件下载安装成功，然后编写Dockerfile文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">FROM            <span class="token comment">#基础镜像，一切从这里开始构建。</span>MAINTAINER      <span class="token comment">#镜像是谁写的，姓名+邮箱</span>RUN             <span class="token comment">#镜像构建的时候需要运行的命令</span>ADD             <span class="token comment">#步骤：tomcat镜像，这个tomcat压缩包！添加内容</span>WORKDIR         <span class="token comment">#镜像的工作目录</span>VOLUME          <span class="token comment">#挂载的目录</span>EXPOST          <span class="token comment">#保留端口配置</span>CMD             <span class="token comment">#指定这个容器启动的时候要运行的命令，只有一个会生效，可被替代。</span>ENTRYPOINT      <span class="token comment">#指定这个容器启动的时候要运行的命令，可以追加命令。</span>ONBUILD         <span class="token comment">#当构建一个被集成DockerFile这个时候就会运行ONBUILD的指令。触发指令。</span>COPY            <span class="token comment">#类似ADD，将我们文件拷贝到镜像中。</span>ENV             <span class="token comment">#构建的时候设置环境变量。</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0a3908d1f29d4d9da5ebb9ba5a575133.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/38da9bf783b040aebe4d99acac03e73e.png" alt="在这里插入图片描述"></p><h3 id="3-构建镜像"><a href="#3-构建镜像" class="headerlink" title="3.构建镜像"></a>3.构建镜像</h3><p>使用xftp将刚才打包的jar包还有编写的Dockerfile文件上传到虚拟机或是服务器</p><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-165328623912110.png" alt="在这里插入图片描述"><br>然后使用命令构建镜像：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment"># ls</span>Dockerfile  onlineExam-0.0.1-SNAPSHOT.jar<span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment"># docker build -t onlineexam .</span>Sending build context to Docker daemon  <span class="token number">16</span>.55MBStep <span class="token number">1</span>/5 <span class="token builtin class-name">:</span> FROM java:8<span class="token number">8</span>: Pulling from library/java5040bd298390: Pull complete fce5728aad85: Pull complete 76610ec20bf5: Pull complete 60170fec2151: Pull complete e98f73de8f0d: Pull complete 11f7af24ed9c: Pull complete 49e2d6393f32: Pull complete bb9cdec9c7f3: Pull complete Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9dStatus: Downloaded newer image <span class="token keyword">for</span> java:8 ---<span class="token operator">></span> d23bdf5b1b1bStep <span class="token number">2</span>/5 <span class="token builtin class-name">:</span> COPY *.jar /app.jar ---<span class="token operator">></span> 63fda5bdcb6dStep <span class="token number">3</span>/5 <span class="token builtin class-name">:</span> CMD <span class="token punctuation">[</span><span class="token string">"--server.port=8888"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 5e94d333492dRemoving intermediate container 5e94d333492d ---<span class="token operator">></span> 59bd2f4e0120Step <span class="token number">4</span>/5 <span class="token builtin class-name">:</span> EXPOSE <span class="token number">8888</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 99c4427313deRemoving intermediate container 99c4427313de ---<span class="token operator">></span> d4792bf4f884Step <span class="token number">5</span>/5 <span class="token builtin class-name">:</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> da3be5f92a55Removing intermediate container da3be5f92a55 ---<span class="token operator">></span> 2df101d6382cSuccessfully built a42985afa2f3Successfully tagged onlineexam:latest</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_18,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>然后可以使用docker images 展示刚刚构建好的镜像<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/cc0a3049f0aa4b72bd8c0e3d285bb031.png" alt="在这里插入图片描述"></p><h3 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment">#  docker run -d -p 8888:8888 onlineexam</span>-d参数是让容器后台运行 -p 是做端口映射，此时将服务器中的8888端口映射到容器中的8888<span class="token punctuation">(</span>项目中端口配置的是8888<span class="token punctuation">)</span>端口</code></pre><p>然后使用docker ps查看一下：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/21d51a487203489280b5bdbd1863d600.png" alt="在这里插入图片描述"><br>ok，到此启动成功了！<br>由于我此此的springboot项目使用了redis。你们可以选择使用docker安装，还可以参考一下我的这个<a href="https://blog.csdn.net/m0_49683806/article/details/123359905?spm=1001.2014.3001.5501">centos 7安装redis</a></p><h2 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h2><p>因为我springboot使用了swagger（现在是knife4j），所以我在浏览器测试是否可以打开：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-165328623912211.png" alt="在这里插入图片描述"><br>ok，测试一下功能都ok了。<br>到此就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ELK</title>
      <link href="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/"/>
      <url>/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装ElasticSearch"><a href="#Docker-安装ElasticSearch" class="headerlink" title="Docker 安装ElasticSearch"></a>Docker 安装ElasticSearch</h1><h2 id="我是参考这几篇博客。"><a href="#我是参考这几篇博客。" class="headerlink" title="我是参考这几篇博客。"></a>我是参考这几篇博客。</h2><p>参考这几篇博客，然后自己成功后，做一个记录。大家都可以去看看</p><blockquote><p><a href="https://blog.csdn.net/qq_40942490/article/details/111594267">https://blog.csdn.net/qq_40942490/article/details/111594267</a><br><a href="https://zhuanlan.zhihu.com/p/257867352">https://zhuanlan.zhihu.com/p/257867352</a><br><a href="https://www.cnblogs.com/fkaka/p/15205675.html">https://www.cnblogs.com/fkaka/p/15205675.html</a></p></blockquote><h2 id="第一步：确保你的虚拟机或者是服务器已经安装了Docker"><a href="#第一步：确保你的虚拟机或者是服务器已经安装了Docker" class="headerlink" title="第一步：确保你的虚拟机或者是服务器已经安装了Docker"></a>第一步：确保你的虚拟机或者是服务器已经安装了Docker</h2><p>没有安装的可以参考这个<a href="https://blog.csdn.net/m0_49683806/article/details/123687886">docker安装</a></p><h2 id="第二步：安装ElasticSearch"><a href="#第二步：安装ElasticSearch" class="headerlink" title="第二步：安装ElasticSearch"></a>第二步：安装ElasticSearch</h2><blockquote><p>这次安转的7.7.0的版本</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用docker 直接获取es的镜像</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull elasticsearch:7.7.0</code></pre><p>命令执行完后，使用docker images查看镜像是否拉取成功<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/31f368eec7704b16b146300b2e8c982c.png" alt="在这里插入图片描述"><br>ok，下载成功了！</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>镜像下载成功，使用镜像创建容器。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mydata/elasticsearch/config<span class="token function">mkdir</span> -p /mydata/elasticsearch/data/<span class="token function">mkdir</span> -p /mydata/elasticsearch/plugins<span class="token builtin class-name">echo</span> <span class="token string">"http.host: 0.0.0.0"</span> <span class="token operator">>></span> /mydata/elasticsearch/config/elasticsearch.yml<span class="token function">chmod</span> -R <span class="token number">777</span> <span class="token function">file</span></code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>注意：启动前需要在服务器新建下列文件夹，并且文件夹的权限要改成使用chmod -R 777 file修改文件读写权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 <span class="token punctuation">\</span>-e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span>  <span class="token punctuation">\</span>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\</span>-v /mydata/elasticsearch/data/:/usr/share/elasticsearch/data <span class="token punctuation">\</span>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span>-d elasticsearch:7.7.0</code></pre><p>参数说明：</p><pre class="language-bash" data-language="bash"><code class="language-bash">--name表示镜像启动后的容器名称  -d: 后台运行容器，并返回容器ID；-e: 指定容器内的环境变量-p: 指定端口映射，格式为：主机<span class="token punctuation">(</span>宿主<span class="token punctuation">)</span>端口:容器端口discovery.type<span class="token operator">=</span>single-node：单机运行如果启动不了，可以加大内存设置：-e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span></code></pre><p>使用<strong>docker ps</strong>查看一下：<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/bb814aac15b34062874942e5c796c697.png" alt="在这里插入图片描述"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>es默认端口为9200，只用ip地址+端口号直接访问，所以在浏览器中输入<strong>ip:9200</strong>，如果出现以下界面就是安装成功了！<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>ok！到此。ElasticSearch：7.7.0安装成功了！</p><h2 id="安装ElasticSeach的一些工具"><a href="#安装ElasticSeach的一些工具" class="headerlink" title="安装ElasticSeach的一些工具"></a>安装ElasticSeach的一些工具</h2><h3 id="安装ElasticSeach-head"><a href="#安装ElasticSeach-head" class="headerlink" title="安装ElasticSeach-head"></a>安装ElasticSeach-head</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>同样使用docker进行安装。先拉取镜像，使用下面的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拉取镜像</span><span class="token function">docker</span> pull mobz/elasticsearch-head:5</code></pre><p>使用docker images，查看镜像是否拉取成功<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/a91b2bdb91354507b28856d4294daa0b.png" alt="在这里插入图片描述"></p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建容器</span><span class="token function">docker</span> create --name elasticsearch-head -p <span class="token number">9100</span>:9100 mobz/elasticsearch-head:5<span class="token comment">#启动容器</span><span class="token function">docker</span> start elasticsearch-head</code></pre><ul><li>安装ElasticSearch时是容器创建成功后直接在后台就运行了，但在安装ElasticSearch-Head时并没有保持一致。</li><li>而是指定容器名，端口号就直接执行了，这样执行完成后是创建了一个容器，并没有运行。</li><li>所以还需要一个操作，那就是启动容器docker start 容器id。</li><li>安装完成直接使用域名加端口9100即可访问。<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532235677981.png" alt="在这里插入图片描述"><h4 id="处理跨域"><a href="#处理跨域" class="headerlink" title="处理跨域"></a>处理跨域</h4>在连接ElasticSearch会发现无法连接，由于时前后端分离开发，所以会存在跨域问题，需要在服务端做跨域处理。<br>执行命令<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it elasticsearch<span class="token punctuation">(</span>或者容器id<span class="token punctuation">)</span> /bin/bash</code></pre><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/dd291e0bc4404904a4de8a5be65fa5d2.png" alt="在这里插入图片描述"></li></ul><p>进入到第一步创建的ElasticSearch容器中，修改配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">vi/vim config/elasticsearch.yml</code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/f78978fb19f648c2b22c12f86a1d78e7.png" alt="在这里插入图片描述"><br>把这两行写进配置文件中(注意是yml配置文件)：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/2670d425cb5d4d3588300c71a10ffeb3.png" alt="在这里插入图片描述"><br>配置修改完后需执行命令exit退出容器，接着执行docker restart 容器ID重启容器即可。</p><h4 id="处理406和es-head不显示数据的问题"><a href="#处理406和es-head不显示数据的问题" class="headerlink" title="处理406和es-head不显示数据的问题"></a>处理406和es-head不显示数据的问题</h4><p>此时通过&#x3D;&#x3D; ElasticSearch-Head &#x3D;&#x3D;可以成功连接ElasticSearch了，但进行数据操作时会报406错误。</p><p>只需要修改&#x3D;&#x3D; ElasticSearch-Head &#x3D;&#x3D;容器中的配置即可，将配置文件复制到宿主机进行修改。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制vendor.js到外部</span><span class="token function">docker</span> <span class="token function">cp</span> 容器id:/usr/src/app/_site/vendor.js /usr/local/<span class="token comment">#修改vendor.js</span><span class="token function">vim</span> vendor.js</code></pre><p>进入到&#x2F;usr&#x2F;local即可看到从容器中复制出来的文件vendor.js。</p><p>修改文件第6886、7574行，将”application&#x2F;x-www-from-urlencodes”修改为”application&#x2F;json;charset&#x3D;UTF-8”即可<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532235677992.png" alt="在这里插入图片描述"></p><p>修改后再将文件复制到容器中，从容器复制文件到宿主机命令已经使用过了，那么现在只不过是把俩个目录反过来即可执行docker cp &#x2F;usr&#x2F;local&#x2F;vendor.js 容器ID:&#x2F;usr&#x2F;src&#x2F;app&#x2F;_site</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> /usr/local/vendor.js  容器id:/usr/src/app/_site</code></pre><p>最后一步重启ElasticSearch-Head容器就结束了。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart 容器id</code></pre><h3 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h3><blockquote><p>首先问一个问题，ElasticSearch中自带的有分词器为什么还要使用IK分词器？<br>在ElasticSearch中的分词器会把中文分为一个一个的字，例如”今天是周五”，会被分成“今”、“天”、“是”，“周”、“五”，这里很明显是不合适的，在大多数场景下需要的是词而不是字。<br>所以就需要安装中文分词器IK来解决这个问题。<br>IK提供了两个分词算法：ik_smart和ik_max_word，其中ik_smart为最少切分，ik_max_word为最细力度。<br>这里需要注意安装的版本需要跟ElasticSearch版本一致。</p></blockquote><h4 id="第一种离线安装"><a href="#第一种离线安装" class="headerlink" title="第一种离线安装"></a>第一种离线安装</h4><p>下载ik分词器压缩包：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip">ik分词器:7.7.0</a><br>使用xftp将分词器上传到服务器或者虚拟机中的&#x2F;tmp中</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将压缩包移动到容器中</span><span class="token function">docker</span> <span class="token function">cp</span> /tmp/elasticsearch-analysis-ik-7.7.0.zip elasticsearch:/usr/share/elasticsearch/plugins<span class="token comment">#进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it elasticsearch /bin/bash  <span class="token comment">#创建目录</span><span class="token function">mkdir</span> /usr/share/elasticsearch/plugins/ik<span class="token comment">#将文件压缩包移动到ik中</span><span class="token function">mv</span> /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-7.7.0.zip /usr/share/elasticsearch/plugins/ik<span class="token comment">#进入目录</span><span class="token builtin class-name">cd</span> /usr/share/elasticsearch/plugins/ik<span class="token comment">#解压</span><span class="token function">unzip</span> elasticsearch-analysis-ik-7.7.0.zip<span class="token comment">#删除压缩包</span><span class="token function">rm</span> -rf elasticsearch-analysis-ik-7.7.0.zip</code></pre><p>退出并重启镜像</p><h4 id="第二种使用wget进行安装"><a href="#第二种使用wget进行安装" class="headerlink" title="第二种使用wget进行安装"></a>第二种使用wget进行安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip</code></pre><p>当你使用wget安装出现Unable to establish SSL connection时执行以下俩个命令即可。</p><p>yum install opensslls</p><p>yum install openssl-devel</p><p>执行cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins来到插件目录创建一个IK目录。</p><p>将压缩包移动到IK目录中，执行解压指令elasticsearch-analysis-ik-7.7.0.zip</p><p>接着删除压缩包即可，此时你可以看到一个config包和几个jar包</p><p>最后退出容器，重启重启容器即可。</p><h3 id="安装拼音分词器"><a href="#安装拼音分词器" class="headerlink" title="安装拼音分词器"></a>安装拼音分词器</h3><h1 id="Docker安装Kibana"><a href="#Docker安装Kibana" class="headerlink" title="Docker安装Kibana"></a>Docker安装Kibana</h1><h2 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h2><p>一定要确保kibana的版本和你安装的ES的版本是一致的。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull kibana:7.7.0</code></pre><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mydata/kibana/config/<span class="token function">vi</span> /mydata/kibana/config/kibana.yml</code></pre><p>将以下内容写进去</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span><span class="token comment"># ** THIS IS AN AUTO-GENERATED FILE **</span><span class="token comment">#</span><span class="token comment"># Default Kibana configuration for docker target</span>server.name: kibanaserver.host: <span class="token string">"0"</span><span class="token comment"># ip 改成自己的</span>elasticsearch.hosts: <span class="token punctuation">[</span> <span class="token string">"http://10.111.43.55:9200"</span> <span class="token punctuation">]</span>xpack.monitoring.ui.container.elasticsearch.enabled: <span class="token boolean">true</span></code></pre><p><strong>注意：请根据实际情况，修改elasticsearch地址。</strong></p><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>  --name<span class="token operator">=</span>kibana <span class="token punctuation">\</span>  --restart<span class="token operator">=</span>always <span class="token punctuation">\</span>  -p <span class="token number">5601</span>:5601 <span class="token punctuation">\</span>  -v /mydata/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml <span class="token punctuation">\</span>  kibana:7.7.0</code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs -f kibana</code></pre><p>如果出现以下信息、说明启动成功了。</p><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210327307.png" alt="image-20220522210327307"></p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;10.111.43.55:5601</code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210416546.png" alt="image-20220522210416546"></p><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210443222.png" alt="image-20220522210443222"></p><p>ok 安装成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Kibana </tag>
            
            <tag> Docker </tag>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思想汇报</title>
      <link href="/2022/05/20/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/"/>
      <url>/2022/05/20/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>​        公元2021年，对于中国共产党和中国人民来说，是极度不平凡的一年。因为今年是中国共产党成立的一百周年。一百年前，浙江嘉兴南湖的一条小船上，先进的中国共产党应运而生，将中国这头沉睡已久的东方巨龙唤醒，犹如黑夜中的一道闪电在东方闪烁，照亮了当时黑暗的中国社会，同时也照亮了中国通向未来的繁荣大道的方向。自此，中国迎来了新的征程。</p><p>​        近代的中国可谓是受尽屈辱，从第一次鸦片战争开始，外国侵略者使用坚船利炮轰开中国的大门，迫使我们签署屈辱的不平等合约。我们这个国家，我们这个民族就一直在压迫和屈辱中度过。当然，我们不会坐以待毙，民族的很多有志之士进行了许许多多的自救行动，“洋务运动”、“戊戌变法”、“辛亥革命”、“新文化运动”等等。在经历了一个又一个的军阀想要复辟的情况下，中国正处于历史上最混乱，最黑暗的一段时期，人民的生活苦不堪言。随着俄国十月革命的一声炮响，        李大钊同志在研究了俄国历史后深受马克思主义的影响，在南下的逃亡中看到了无数苦难深重的人民，这些底层人民的暗无天日的生活，让李大钊痛心疾首。立志想要建立一个全国性质的能够拯救中国，能够让中国人民摆脱压迫，走出这种水深火热生活的政党。他将自己的所看到的，所思考的同自己的亲密“战友”陈独秀同志交流，两人一拍即合。而陈独秀在这么多年苦苦寻求能够拯救中国的药方的过程中，也逐渐确立了，只有马克思主义能够救中国，只有效仿俄国十月革命，才能使破旧不堪的救中国重获新生，在这样的情况下，南陈北李相约建党。</p><p>​        回顾党的百年历史。我们不仅要了解中国共产党的历史，更要从这百年历史中学习到很多宝贵的东西。要明白中国共产党这一路走来并不都是一帆风顺的，更多的是艰难险阻。而当遇到这些困难的时候，靠的就是那些不屈不挠的坚定的信念。</p><p>​        前段时间热播的电视剧《觉醒年代》，让我看的热泪盈眶，那些历史书上原本厚重的名字，现在一个个活灵活现的出现在我的面前。跟随着先辈们，一同在那些混乱黑暗的社会中经历。有一幕我记得特别清楚，李大钊和陈独秀去散发《北京市民宣言》，陈独秀自己则爬上顶楼，将传单奋力抛散并大声演说。呼吁同胞们团结起来，坚决抵制无耻的《巴黎和约》。不怕被警察逮捕，宁愿牺牲自己。也想让当时的人们觉醒。他们的信念是多么的坚定。</p><p>​        我们新时代的年轻人，要推崇这样的坚定的信念。我们应该在以后生活中不断的完善自己的信念，将自己和国家，和人民紧密的联系在一起。可以先从简单的做起，比如坚持，就拿我自己来说，好多时候都是三分钟热度。有些虽然也能坚持下去，但是到了后期就是会很乏力，虽然对自己这个方面有了解，但还是会放纵自己。所以一定要坚持。再比如担当，不能过分计较自己的那些小小的得失，大的方面应该是，将民族，国家时刻放在心中的第一位，要相信我们能成为中国社会主义的接班人。简单来说，就是在班级和宿舍生活中，为同学服务啊。当然最重要的还是要做好自己的本职工作，现在的身份是学生，当然是要学习，并且不能满足于课堂上的知识。要拓展自己的知识面，不能好高骛远，也不能妄自菲薄。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>尊敬的党组织：</p><p>​        当时光的脚步又一次来到九月，新的学年就又开始了，不知不觉之间大学又过去了一年的时间，但是当我上个学年成为一名入党积极分子，参加了入党积极分子的各种的培训后，我对于党员的认识又更近了一步，我明白了共产党的宗旨是“全心全意为人民服务”、我明白党的各种思想离我不再是那么的遥远，那么的晦涩和难懂。这些东西时时刻刻的体现在我们生活中的方方面面、明白了党员是很平凡的，他们从人民中产生，徘徊在群众之间。但是他们带领人民脱贫攻坚，在各个方面起着模范带头的作用。我想要成为一名光荣的共产党员的心情越来越热切。</p><p>​        回首刚刚过去的那个学年，有得有失，但是总体上还是积极向上的，在假期的时候，对于刚放假时制定的那些计划，只是完成的七七八八。对于没有完美的完成，对此我很懊恼，由此可以看出自己的自控力还没有很好，处于家里面那样安逸的环境中，总是会让人忘乎所以，变得颓废，我有愧于入党积极分子这个身份，以上是我对刚过去的假期的反思。</p><p>​        而在其他方面，尤其是政治理论基础很薄弱，理论联系实际的能力并不是很好。这应该是在上个学年中对这个方面的学习程度不够。</p><p>​        尤其是当上一次提交思想汇报的时候，书记向我们提问党章的有关内容，我们却一点都不清楚。身为入党积极分子的我们倍感羞愧。因此，我认真阅读了党章。对党的性质、理想目标、指导思想、基本要求以及党员义务权利有的更深的理解。更加坚定了自己的理想信念。</p><p>​         身为一名入党积极分子，我们应该时时刻刻以一名优秀党员的标准来要求自己，认真学习党的历史，性质，奋斗目标，建党宗旨，组织制度和组织原则等基本知识。遵守党章、贯彻党章，用党章指导实践，还应该经常阅读有关党建、党史及党员先进事迹的书籍和报刊等，不断加强对党路线、方针政策的认识和理解。提升自己的党性修养，认真学习全面提高能力，使我们能够在错综复杂的新时代有清楚的认知。</p><p>​        新的学期开始了，每个人都有自己的目标与计划，当然我也不例外。</p><p>​        虽然本学期的课程并不是很繁重，但是我知道并不能满足于完成课业就好，我还有很多的事情要去做。并且不能只停留在纸面计划或是脑海想象中，要在实际生活中严格做到。</p><p>​        因此，我对自己提出以下要求：在学习上，肯定是一点都不能马虎，认认真真的对待每一节课，在完成课程安排上的任务后，要把精力放在那些自己一直没有做好的事情上，比如自己的四级，还没有通过，所以一定要好好的准备，争取下次通过。然后就是考研，现在大三了。要开始准备了。在生活中，更加的乐于助人，乐观积极，为身边的同学做好表率。工作上，要主动的配合班级上的安排，要改变过去的那种“事不关己高高挂起”的态度，对每件事情都要态度认真，积极参与，为不断建设一个积极向上的班集体而努力。在思想上，要认真学习上级组织的各项精神，不断提升自己的思想面貌，并且多多关注国内外的大事，并多多思考，比如在学习强国上认真提升思想觉悟。争取早日达到党组织的要求成为一名光荣的共产党员。</p><p>​        以上是我这个季度的思想汇报，作为一名新时代的青年大学生，有志于用自己知识，技能去报效祖国，建设社会。身为入党积极分子要时刻不忘党章的要求，坚持做到自重、自警、自律。希望党组织在各个方面能够给予我批评和指正，我一定会虚心接受并积极改正，不断在各个方面严格要求自己，并为成为一名光荣的共产党员而努力，请党组织在实践中考验我！</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>敬爱的党组织：</p><p>​       通过这段时间的学习，我对党组织的了解也越来越多，无论是在党的理论方面的学习，还是思想方面的理解，我认为我都有了一定的进步。随着对中国共产党有了更多的了解，对党组织更加崇敬和热爱，也更加坚定了我努力学习的决心。</p><p>​       在对党组织的认识上， 作为一名积极分子，我积极学习党组织的新思想，努力向党组织靠拢。前段时间召开的中国共产党第19届中央委员会第六次全体会议，为了更加深刻地了解党组织，我搜索了许多关于此次会议的资料，我了解到，该会议的重点是关于研究总结党的百年奋斗的重大成就和历史经验问题。一年多来，国内疫情防控和经济社会发展各项任务非常的繁重和艰巨。但是在中国共产党的正确领导下，中华民族打赢了这场艰难的战役。纵观我们党的百年历史，我们能够经历磨难，不断地创造辉煌的重要的原因就是无数的共产党人不忘初心，牢记使命，坚定不移地为之奉献。所以我更要积极学习党的19届六中全会的精神，坚持以马克思列宁主义，毛泽东思想，中国特色社会主义理论体系为指导，将理论用于实践，在实践中学习这些思想。</p><p>​      在思想感悟上，我要加强思想道德修养，树立远大理想。在学习之余，我也经常通过网络，例如学习强国等软件，了解关于党的新消息，关心着国家大事。我要牢记历史，坚定理想信念，牢记党和人民的初心使命。随着《长津湖》《觉醒年代》等主旋律影视作品的大火，中国共产党的百年奋斗历史也深深地震撼着我。作为21世纪的新青年，我再次感觉到了中国共产党的伟大，每一个片段、每一次伟人的演讲，都让我热血沸腾、热泪盈眶。同时我也更加珍惜现在的幸福生活，现在的我们吃得饱穿得暖，能够享受良好的教育，无一不是伟大的中国共产党奋斗的结果。生活在这样美好的时代，我觉得自己很幸福，要让自己的生活更有意义，更应该树立远大的理想和追求，然后为了理想努力地奋斗。</p><p>​        在学习上，我要增强自己的创新精神，加强对实际应用知识的学习，提高自己的学习效率。还要提升专业知识能力，拓宽自己的知识面，并且要善于将理论与实际相结合，坚持实践才是检验真理的唯一标准，要相信实践出真知的道理，千万不能机械式地背书学习。我也认识到自己的学习与理解水平还有待提高，因此更加不能松懈，要做到严格要求自己，无论是日常的学习，期末考试，还是将来的研究生考试，都要付出百分之百的努力，不断奋斗，做到无愧于心。</p><p>​        通过以上总结，我也深刻认识到了自己的不足。虽然我对政治有一定的了解，但理解的很大一部分还是表面，没有认真领会其中的深刻含义，对理论的理解也没有及时地结合社会实践。除此之外，我还没有做到完全的自我约束和监督，在一些工作上的积极性不强，这些都是我需要改正的问题。我相信，跟随着党的脚步，我会努力改掉学习和生活中不良习惯，成为更好的自己。</p><p>​        以上便是我这段时间以来的思想情况，在学习了十九届六中会议后，我进一步加深了对于中国共产党的认识。所以我更要继续以一名优秀党员的身份严格要求自己，在各个方面争取发挥带头作用，不断的提升自己。恳请党组织给予批评和指正。我会认真吸取并改正。</p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>敬爱的党组织：</p><p>​        通过这段时间的学习。我对于党的思想和宗旨的学习和领悟又有了更深一层的理解。与此同时，在党的思想的指导下，我的思想道德行为素质也有了较大程度的提升。尤其是寒假在家与之后的志愿者服务之后，看到了许许多多优秀的共产党员为了老百姓的平安幸福，舍小家为大家。我更加明白中国共产党是一心为人民服务的，时刻保卫着人民的幸福安定生活，为人民谋幸福。</p><p>​        思想上，在学习了更多的党的知识与亲眼见证到了疫情隔离期间很多村委的优秀的共产党员努力的组织疫情防控工作后，我认识到中国共产党人一直是吃苦在前，享受在后的。当苦难来临的时候，当疫情又一次的气势汹汹的袭来的时候。冲锋在第一线的永远都是中国共产党员。为人民服务，中国共产党任何时候都是把把人民的利益放在第一位的，为此，无数共产党员前仆后继，不懈努力，为了人民的幸福，国家的富强而奋斗。我们身为新时代的青年，要有责任和担当，肩负起属于我们这一代人的责任。</p><p>​        学习上，仍旧保持着自律，因为开学就要大三下了。然后考研的时间也所剩不多。所以在家积极学习专业的知识，提升自己，在家的效率虽然不高，但是我仍然坚持学习了很多，比如：RabbitMq、Docker和ElasticSearch等。而且，在学校还有一些项目没有做完，在家也一直在坚持写。我的专业的技能有了很多的提高。同时，我也在进行文化课的学习，每天坚持背单词，然后四级终于过了。这让我明白，只有坚持。会有好的结果的。前提是自律。所以我们要保持的自律。始终督促自己向好的方向发展。所以在开学后，在决定考研之后，每天坚持早起，然后学习。虽然很累，但是一定要坚持。而且现在的程度比我的其他的同学根本不值一提。所以才更要更加努力。</p><p>​        在日常生活和工作中，我们要有不畏艰辛的拼搏精神和奉献精神。寒假期间我报名参加了社区的社区的志愿活动，虽然只是个在村口检查过往车辆的行程码和健康码这种微不足道的工作，但是，这种志愿活动让我感到很开心。因为我认为我正在向一个优秀共产党员的方向去靠拢。我体会到了党员的责任。我看到了我们中华民族在面对困难时的荣辱与共，看到了中国共产党能够齐心协力办大事的特质，看到了中国中产党为了人民的幸福平安的生活做出的不懈努力。身为新时代的青年，在党的思想和精神的指引下，我们原意，也有这个责任去为我们的国家、社会做出一些自己的贡献。</p><p>​        以上便是我近期在思想、学习、生活和工作等方面的汇报。在以后的学习和生活中，我会努力学习专业的文化知识、关心时事、努力提升自己，让自己能够可以为国家发展贡献出自己的力量。不断地向党组织靠拢，提升自己的觉悟，在日常生活中做一些自己力所能及的事情去帮助别人。当然，我现在还有许许多多的问题，距离成为一名优秀的共产党员还有很大的差距，希望党组织加强对我的培养和教育。</p>]]></content>
      
      
      <categories>
          
          <category> 思想汇报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思想汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 8 新特性</title>
      <link href="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="java-8"><a href="#java-8" class="headerlink" title="java 8"></a>java 8</h1><h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><blockquote><p>Lambda是一个&#x3D;&#x3D;匿名函数&#x3D;&#x3D;，我们可以把Lambda表达式理解为是一段&#x3D;&#x3D;可以传递的代码（将代码像数据一样传递）&#x3D;&#x3D;。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使java的语言表达能力得到了提升。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Intreger</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span><span class="token class-name">Integer</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Lambda 表达式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如：有个集合存储了员工信息。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如何将员工信息中工资，或年龄大于30的提取出来。</p><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//方式一</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//优化方式二： 匿名内部类</span>   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//优化方式三：Lambda 表达式</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//优化方式四：Stream API</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span><span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="Lambda-基础语法"><a href="#Lambda-基础语法" class="headerlink" title="Lambda 基础语法"></a>Lambda 基础语法</h2><blockquote><p>java8 中引入了一个新的操作符“-&gt;” ，该操作符称为箭头操作符或Lambda操作符。</p><p>​箭头操作符将Lambda表达式拆分为两部分。</p><p>左侧：Lambda 表达式中的参数列表</p><p>右侧：Lambda 表达式中所需执行的功能，即Lambda体</p></blockquote><h3 id="语法格式一"><a href="#语法格式一" class="headerlink" title="语法格式一"></a>语法格式一</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式一： 无参数，无返回值</span><span class="token comment">//() -> System.out.println("hello Lambda !");</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda02</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// jdk 1.7 之前。必须是final</span>        <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//System.out.println("hello world!"+ num++);  num++ 就报错。 默认 final int num = 0;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Lambda!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式-三"><a href="#语法格式-三" class="headerlink" title="语法格式 三"></a>语法格式 三</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式二：有一个参数，并且无返回值</span><span class="token comment">// (x) -> System.out.println(x);</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式三"><a href="#语法格式三" class="headerlink" title="语法格式三"></a>语法格式三</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式三：若只有一个参数，并且无返回值，肖括号可以省略不写</span><span class="token comment">// x -> System.out.println(x);</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式四"><a href="#语法格式四" class="headerlink" title="语法格式四"></a>语法格式四</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式五"><a href="#语法格式五" class="headerlink" title="语法格式五"></a>语法格式五</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式五：若Lambda体中只有一条语句。return 和 大括号都可以省略不写。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式六"><a href="#语法格式六" class="headerlink" title="语法格式六"></a>语法格式六</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为jvm的编译器可以通过上下文推断出，数据类型。即“类型推断”。</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span><span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Lambda-表达式需要“函数式接口”的支持"><a href="#Lambda-表达式需要“函数式接口”的支持" class="headerlink" title="Lambda 表达式需要“函数式接口”的支持"></a>Lambda 表达式需要“函数式接口”的支持</h2><blockquote><p>函数式接口：接口中只有一个抽象方法的接口，称为函数式接口。可以使用注解&#x3D;&#x3D;@FunctionalInterface&#x3D;&#x3D; 修饰</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">,</span><span class="token class-name">MyFun</span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda03</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先按照年龄排序，再按照姓名排序</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="对字符串进行处理"><a href="#对字符串进行处理" class="headerlink" title="对字符串进行处理"></a>对字符串进行处理</h3><pre class="language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//需求：用于处理字符串</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t\t\t\t\t\t hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">MyFunction</span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="对两个Long型的数据进行处理"><a href="#对两个Long型的数据进行处理" class="headerlink" title="对两个Long型的数据进行处理"></a>对两个Long型的数据进行处理</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span><span class="token class-name">T</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">op</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span> <span class="token operator">-></span> l1 <span class="token operator">+</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">op</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span> <span class="token operator">-></span> l1 <span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求：对于两个long类型的数字进行处理</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">op</span><span class="token punctuation">(</span><span class="token class-name">Long</span> l1<span class="token punctuation">,</span><span class="token class-name">Long</span> l2<span class="token punctuation">,</span><span class="token class-name">MyFunction2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h2><h3 id="Consumer-消费型接口-void-accept-T-t"><a href="#Consumer-消费型接口-void-accept-T-t" class="headerlink" title="Consumer : 消费型接口( void accept(T t);)"></a>Consumer<T> : 消费型接口( void accept(T t);)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Consumer&lt;T> 消费型接口</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">happy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> money <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happy</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>​     </p><h3 id="Supplier-供给型接口-T-get"><a href="#Supplier-供给型接口-T-get" class="headerlink" title="Supplier : 供给型接口(T get();)"></a>Supplier<T> : 供给型接口(T get();)</h3> <pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Supplier&lt;T> 供给型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numList <span class="token operator">=</span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：产生一些整数，并放入集合中</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Function-lt-T-R-gt-函数型接口-R-apply-T-t"><a href="#Function-lt-T-R-gt-函数型接口-R-apply-T-t" class="headerlink" title="Function &lt;T,R&gt;:  函数型接口(  R apply(T t);)"></a>Function &lt;T,R&gt;:  函数型接口(  R apply(T t);)</h3> <pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Function&lt;T, R> 函数型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t\thello"</span><span class="token punctuation">,</span> str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"成果成大事"</span><span class="token punctuation">,</span> str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：用于处理字符串</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> function<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Predicate-函数型接口（-boolean-test-T-t-）"><a href="#Predicate-函数型接口（-boolean-test-T-t-）" class="headerlink" title="Predicate :  函数型接口（ boolean test(T t);）"></a>Predicate <T>:  函数型接口（ boolean test(T t);）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Predicate&lt;T> 断言型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"ok"</span><span class="token punctuation">,</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token function">filterStr</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：将满足条件的数据放入集合中</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">filterStr</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stringList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><blockquote><p>若Lambda 体中的内容有方法已经实现了，我们可以使用“方法引用”（可以理解为方法引用是Lambda 表达式的另外一种表现形式）</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：</p><p>1，Lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中的抽象方法的函数列表和返回值类型保持一致！</p><p>2，若Lambda  参数列表中的第一参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用ClassName::method</p></blockquote><p>主要有三种语法格式：</p><h3 id="对象-实例方法名"><a href="#对象-实例方法名" class="headerlink" title="对象::实例方法名"></a>对象::实例方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//对象::实例方法名</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>       <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>       consumer2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Hello Lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> employee<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="类-静态方法名"><a href="#类-静态方法名" class="headerlink" title="类::静态方法名"></a>类::静态方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//类::静态方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505082305870.png" alt="image-20220505082305870"></p><h3 id="类-实例方法名"><a href="#类-实例方法名" class="headerlink" title="类::实例方法名"></a>类::实例方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//类::实例方法名</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bp <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bp2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505082346240.png" alt="image-20220505082346240"></p><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>注意：需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致！</p><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> integer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> integer<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//构造器引用</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造器引用</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee2 <span class="token operator">=</span> sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun3 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//数组引用</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apply <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apply2 <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h2><blockquote><p>Stream是 Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。<br>使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。也可以使用Stream API来并行执行操作。简而言之，Stream API提供了一种高效且易于使用的处理数据的方式。</p></blockquote><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505164354196.png" alt="image-20220505164354196"></p><h3 id="流（Steam-到底是什么？"><a href="#流（Steam-到底是什么？" class="headerlink" title="流（Steam)到底是什么？"></a>流（Steam)到底是什么？</h3><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。&#x3D;&#x3D;“集合讲的是数据，流讲的是计算”。&#x3D;&#x3D;</p><p>注意：</p><ul><li>Steanm 自己不会存储元素</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Steam</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ul><h3 id="Stream-的操作三个步骤"><a href="#Stream-的操作三个步骤" class="headerlink" title="Stream 的操作三个步骤"></a>Stream 的操作三个步骤</h3><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505164909488.png" alt="image-20220505164909488"></p><h4 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h4><p>一个数据源（如：集合、数组），获取一个流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，可以通过Collection 系列集合提供的stream()或parallelStream()</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，通过Arrays 中的静态方法stream() 获取数组流</span><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3，通过Stream类中的静态方法of()</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4，创建无限流</span><span class="token comment">//迭代</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><blockquote><p> 一个中间操作链，对数据源的数据进行处理</p><p> 多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为&#x3D;&#x3D;“惰性求值”。&#x3D;&#x3D;</p></blockquote><pre class="language-none"><code class="language-none">筛选与切片filter-接收Lambda，从流中排除某些元素limit-截断流 ，使其元素不超过给定数量skip(n)-跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补distinct-筛选，通过流所生成元素的hashCode()和equals()去除重复元素</code></pre><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-接收Lambda，从流中排除某些元素    </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//内部迭代：迭代操作由Stream API完成</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//中间操作:不会执行任何操作(定义操作)</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stream API的中间操作！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//终止操作：一次性执行全部内容(执行操作)</span>        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//外部迭代</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>满足条件就打印！</p><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505171439132.png" alt="image-20220505171439132"></p><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-截断流 ，使其元素不超过给定数量</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505172553136.png" alt="image-20220505172553136"></p><h5 id="skip-n"><a href="#skip-n" class="headerlink" title="skip(n)"></a>skip(n)</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//筛选，通过流所生成元素的hashCode()和equals()去除重复元素    </span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="Stream-映射"><a href="#Stream-映射" class="headerlink" title="Stream 映射"></a>Stream 映射</h5><blockquote><p>map—接收Lambda ，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505175227066.png" alt="image-20220505175227066"></p><blockquote><p>flatMap—接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">TestStreamApi03</span><span class="token operator">::</span><span class="token function">filterCharacter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> characterStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">TestStreamApi03</span><span class="token operator">::</span><span class="token function">filterCharacter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> <span class="token function">filterCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Character</span> ch <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h5 id="中间排序"><a href="#中间排序" class="headerlink" title="中间排序"></a>中间排序</h5><p>sorted() - 自然排序(Comparable)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre><p>sorted(Comparator com) – 定制排序(Comparator)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="终止操作（终端操作）"><a href="#终止操作（终端操作）" class="headerlink" title="终止操作（终端操作）"></a>终止操作（终端操作）</h4><p>一个终止操作，执行中间操作链，并产生结果</p><h5 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5><blockquote><pre class="language-none"><code class="language-none">&#x2F;*    allMatch—检查是否匹配所有元素anyMatch——检查是否至少匹配一个元素noneMatch—检查是否没有匹配所有元素findFirst——返回第一个元素findAny——返回当前流中的任意元素count——返回流中元素的总个数max——返回流中最大值min——返回流中最小值*&#x2F;</code></pre></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五wu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> any <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>any<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h5><blockquote><p>reduce(T identity,BinaryOperator) &#x2F;reduce(BinaryOperator) – 可以将流中的元素反复结合起来，得到一个值</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//reduce  归约</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reduce1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h5><blockquote><p>collect–将流转换成其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法。</p><p>Collector接口中的方法的实现决定了如何对流执行收集操作（如收集到List、set、Map)。但是&#x3D;&#x3D;Collectors&#x3D;&#x3D;使用类提供了很多静态的方法，可以方便的创建常见收集器实例。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//总数</span>    <span class="token class-name">Long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//平均值</span>    <span class="token class-name">Double</span> avg <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//总和</span>    <span class="token class-name">Double</span> sum <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最大值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最小值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//收集</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集到指定的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多级分组</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token string">"青年"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token string">"中年"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"==="</span><span class="token punctuation">,</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DoubleSummaryStatistics</span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="并行流和顺序流"><a href="#并行流和顺序流" class="headerlink" title="并行流和顺序流"></a>并行流和顺序流</h2><blockquote><p>并行流就是把一个内容分成多个数据快，并用不同的线程分别处理每个数据块的流。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 学习笔记</title>
      <link href="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p>MQ（Message Quene）：消息队列，通过典型的生产者和消费者模型不断向消息队列中生产消息，消费者不断从队列中获取消息。因为消息的生产和消费是异步的，而且只关系消息的发送和接收，没有业务逻辑的侵入，轻松地实现系统间解耦。别名为消息中间件，通过利用高效可靠的消息传递机制进行平台无关的数据交流，并给予数据通信进行分布式系统的集成。</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><p>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:<br><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085612216.png" alt="image-20220518085612216"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085548646.png" alt="image-20220518085548646"></p><h3 id="不同MQ特点："><a href="#不同MQ特点：" class="headerlink" title="不同MQ特点："></a>不同MQ特点：</h3><ul><li>ActiveMQ：是Apache出品，是最流行，能力强劲的开源消息总线。它是一个完全支持JMS规范的消息中间件。有丰富的API，多种集群架构模式让ActiveMQ称为老牌成熟的消息中间件，中小企业使用广泛</li><li>Kafka：是LinkedIn开源的分布式发布-订阅消息系统，目前属于Apache顶级项目。主要特点是基于Pull的模式处理消息消费，追求吞吐量。一开始的目的就是用于日志收集和传输，0.8版本之后开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务</li><li>RocketMQ：是阿里开源的消息中间件，纯java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ起源于Kafka，对消息的可靠传输及事务性做了优化，在阿里被广泛用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景</li><li>RabbitMQ：使用Erlang语言开发的消息队列系统。基于AMQP协议来实现。主要特征是面向消息、队列、路由(包括点对点和发布&#x2F;订阅)、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求在其次。</li></ul><blockquote><p><a href="https://so.csdn.net/so/search?q=RabbitMQ&spm=1001.2101.3001.7020">RabbitMQ</a>比Kafka更可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性(少量延迟)，可靠性(少量丢失数据)要求稍低的场景使用，比如ELK日志收集</p></blockquote><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><blockquote><p><a href="https://www.rabbitmq.com/">RabbitMQ官网</a></p><p><a href="https://www.rabbitmq.com/news.html">RabbitMQ下载</a> (注意与erlang版本对应关系)</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">Releases · rabbitmq&#x2F;rabbitmq-server (github.com)</a></p><p><a href="https://github.com/rabbitmq/erlang-rpm/releases">Releases · rabbitmq&#x2F;erlang-rpm (github.com)</a></p></blockquote><pre class="language-java" data-language="java"><code class="language-java"># <span class="token number">1.</span>将安装包上传到服务器erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">2.</span>安装erlang依赖包yum install <span class="token operator">-</span>y erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm# <span class="token number">3.</span>安装rabbitmqyum install <span class="token operator">-</span>y rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">4.</span>配置文件#见下方配置文件说明# <span class="token number">5.</span>修改配置文件loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span># <span class="token number">6.</span>启动rabbitmq中的插件管理rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management# <span class="token number">7.</span>启动rabbitmqsystemctl start rabbitmq<span class="token operator">-</span>server # 启动rabbitmq服务systemctl restart rabbitmq<span class="token operator">-</span>server # 重启服务systemctl stop rabbitmq<span class="token operator">-</span>server  # 停止服务# <span class="token number">8.</span>查看rabbitmq状态systemctl status rabbitmq<span class="token operator">-</span>server# <span class="token number">9.</span>访问rabbitmq的web管理界面#开放端口访问firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">15672</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanentfirewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reloadhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.232</span><span class="token number">.134</span><span class="token operator">:</span><span class="token number">15672</span><span class="token operator">/</span>  #访问# <span class="token number">10.</span>初始登录guest guest</code></pre><blockquote><p>rabbitmq-server-3.8.13配置文件</p><p>安装之后&#x2F;etc&#x2F;rabbitmq&#x2F;目录下没有rabbitmq的配置文件，在&#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.8.13&#x2F;目录下也没有提供配置文件模板</p><p>可以到github上下载将其拷贝到目录下</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs">https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs</a></p><p>因为没有多少配置，此处直接在&#x2F;etc&#x2F;rabbitmq&#x2F;目录下新建rabbit.conf，添加</p><pre class="language-java" data-language="java"><code class="language-java">loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><p>我个人使用这个：<a href="https://blog.csdn.net/weixin_40584261/article/details/106826044">https://blog.csdn.net/weixin_40584261/article/details/106826044</a></p></blockquote><p>登录成功显示：</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h2><p>web界面连接rabbitmq端口：15672</p><p>java连接rabbitmq端口：5672</p><h3 id="RabbitMQ管理命令行"><a href="#RabbitMQ管理命令行" class="headerlink" title="RabbitMQ管理命令行"></a>RabbitMQ管理命令行</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1,服务启动相关</span>systemctl start <span class="token operator">|</span> restart <span class="token operator">|</span> stop <span class="token operator">|</span> status rabbitmq-server<span class="token comment">#2,管理命令行 用来在不适用web管理界面情况下操作RabbitMQ</span>rabbitmq <span class="token builtin class-name">help</span> 可以查看更多命令<span class="token comment">#3，插件管理命令行</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> <span class="token operator">|</span> list <span class="token operator">|</span> disable</code></pre><h3 id="web管理界面介绍"><a href="#web管理界面介绍" class="headerlink" title="web管理界面介绍"></a>web管理界面介绍</h3><h4 id="导航栏介绍"><a href="#导航栏介绍" class="headerlink" title="导航栏介绍"></a>导航栏介绍</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206292.png" alt="在这里插入图片描述"></p><h4 id="常见概念："><a href="#常见概念：" class="headerlink" title="常见概念："></a>常见概念：</h4><blockquote><p>Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。</p><p>Virtual Host：虚拟主机，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host</p><p>Connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才能完成消息的生产和消费，在这里可以查看连接情况。对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。</p><p>Channels：通道，建立连接后会形成通道，消息的传递获取依赖于通道</p><p>Exchanges：交换机，用来实现消息的路由。接收生产者发送的消息，并根据一定规则将消息路由给服务器中的队列</p><p>Message Queues：消息队列，消息存放在队列中，等待消费，消费后被移除队列</p><p>Message：由Header和Body组成。Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。</p></blockquote><h4 id="Admin用户管理和虚拟主机管理"><a href="#Admin用户管理和虚拟主机管理" class="headerlink" title="Admin用户管理和虚拟主机管理"></a>Admin用户管理和虚拟主机管理</h4><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206293.png" alt="在这里插入图片描述"></p><h5 id="Tags选项用户可选类型"><a href="#Tags选项用户可选类型" class="headerlink" title="Tags选项用户可选类型"></a>Tags选项用户可选类型</h5><ul><li>Admin：超级管理员，可登录管理控制台，可查看所有信息，并且可以对用户，策略(policy)进行操作</li><li>Monitoring：监控者，可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li>Policymaker：策略制定者，可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)</li><li>Management：普通管理者， 仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理</li><li>其他：无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h5 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h5><p>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206304.png" alt="在这里插入图片描述"></p><h5 id="绑定虚拟主机和用户"><a href="#绑定虚拟主机和用户" class="headerlink" title="绑定虚拟主机和用户"></a>绑定虚拟主机和用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206305.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ支持的消息模型"><a href="#RabbitMQ支持的消息模型" class="headerlink" title="RabbitMQ支持的消息模型"></a>RabbitMQ支持的消息模型</h2><blockquote><p><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p></blockquote><p>添加端口访问：</p><blockquote><p>firewall-cmd –add-port&#x3D;5672&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;15672&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>firewall-cmd –list-all</p></blockquote><p>rabbitmq依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="第一种模型（直连）"><a href="#第一种模型（直连）" class="headerlink" title="第一种模型（直连）"></a>第一种模型（直连）</h3><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117142437407.png" alt="image-20220117142437407"></p><p>在上图的模型中，有以下概念：</p><ul><li>P:生产者，也就是要发送消息的程序</li><li>C:消费者：消息的接收者，会一直等待消息的到来</li><li>queue:消息队列，图中红色的部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h4 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *发布消息         * 参数1； exchange    交换机名称         * 参数2： routinqKey   队列名称         * 参数3：传递消息额外设置         * 参数4：消息的具体内容         */</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将队列中的消息持久化</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2.开发消费者"></a>2.开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *消费消息         * 参数1：消费那个队列的消息  队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//最后一个参数：消息队列中取出的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new String(body) = "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3,参数的说明"></a>3,参数的说明</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第二种模型（work-queue）"><a href="#第二种模型（work-queue）" class="headerlink" title="第二种模型（work queue）"></a>第二种模型（work queue）</h3><p>Work queues ，也被称为（Task queues），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时可以使用work模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117145602393.png" alt="image-20220117145602393"></p><p>角色：</p><ul><li>P:生产者：任务的发布者</li><li>C1:消费者：领取任务并且完成任务，假设完成任务速度较慢</li><li>C2:消费者2：领取任务并且完成任务，假设完成速度快</li></ul><h4 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"====>:MSG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152604409.png" alt="image-20220117152604409"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152617846.png" alt="image-20220117152617846"></p><blockquote><p>总结：默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</p></blockquote><h4 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5,消息自动确认机制"></a>5,消息自动确认机制</h4><blockquote><p>​Doing a taskcan tale a few seconds.Ylou may wonder what happens if one of the consumers starts a longtask and dies with itonly partly done. .ith our curent code, once<br>Rabitue delvesamessageto the consume it imeditely marks it fordeleton. n thiscase,f y il aworker we il lose the message itwas just processing W ell alse lose al themessages that were dispatched to this particular worker but were not yet handled.<br>​But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一次只接受一条未确认的消息</span><span class="token comment">//参数2：关闭自动确认消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//手动确认消息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>这是通道一次只能消费一个消息</li><li>关闭消息的自动确认。开启手动确认消息。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154610522.png" alt="image-20220117154610522"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154621828.png" alt="image-20220117154621828"></p><h3 id="第三种模型（fanout）"><a href="#第三种模型（fanout）" class="headerlink" title="第三种模型（fanout）"></a>第三种模型（fanout）</h3><p><font color="red">fanout 也称为广播</font></p><p>Putting it all together</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154957193.png" alt="image-20220117154957193"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个消费者。</li><li>每个消费者有自己的queue（队列）。</li><li>每个队列都要绑定到Exchange（交换机）。</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。</li><li>交换机把消息发送给绑定过的所有队列。</li><li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费。</li></ul><h4 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//广播 一条消息多个消费者同时消费</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2.开发消费者 -1"></a>2.开发消费者 -1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3.开发消费者 -2"></a>3.开发消费者 -2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4,开发消费者-3"></a>4,开发消费者-3</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5,测试结果"></a>5,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161350681.png" alt="image-20220117161350681"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161404352.png" alt="image-20220117161404352"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161420304.png" alt="image-20220117161420304"></p><h3 id="第四种模型（route）"><a href="#第四种模型（route）" class="headerlink" title="第四种模型（route）"></a>第四种模型（route）</h3><h4 id="1-Routing之订阅模型-Direct"><a href="#1-Routing之订阅模型-Direct" class="headerlink" title="1,Routing之订阅模型-Direct"></a>1,Routing之订阅模型-Direct</h4><p><font color="orange">在Fanout模式中，一条消息，会被所有订阅的队列消费。但是，在某种场景下，我们希望不同的消息被不同的队列消费。这是就要用到Direct类型的Exchange。</font></p><p>在Direct模型中：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是指定一个RoutingKey（路由Key）。</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的RoutingKey。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会接收到消息。</p><p>流程：</p></li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161449322.png" alt="image-20220117161449322"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X: Exchange(交换机)，在接收生产者的消息，然后把消息递交给routing key完全匹配的队列。</li><li>C1:消费者，其所在队列指定了需要routing key为error的消息</li><li>C2:消费者，其所在队列指定了需要routing key为info、error、warning的消息</li></ul><h4 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机 参数1：交换机名称  参数2：交换机类型  基于指令的RoutingKey转发</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>#发布消息channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"指定的route key"</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2,开发消费者-1"></a>2,开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><h5 id="发布info消息"><a href="#发布info消息" class="headerlink" title="发布info消息"></a>发布info消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165459262.png" alt="image-20220117165459262"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165508443.png" alt="image-20220117165508443"></p><h5 id="发布error消息"><a href="#发布error消息" class="headerlink" title="发布error消息"></a>发布error消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165633333.png" alt="image-20220117165633333"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165642971.png" alt="image-20220117165642971"></p><h5 id="发布没有绑定的"><a href="#发布没有绑定的" class="headerlink" title="发布没有绑定的"></a>发布没有绑定的</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165726987.png" alt="image-20220117165726987"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165735835.png" alt="image-20220117165735835"></p><h3 id="第五种模型-Routing之订阅模式-Topic"><a href="#第五种模型-Routing之订阅模式-Topic" class="headerlink" title="第五种模型 Routing之订阅模式-Topic"></a>第五种模型 Routing之订阅模式-Topic</h3><p>Topic类型的Exchange与Direct相比，都是可以根据Routingkey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候使用通配符!这种模型Routingkey一般都是由一个或多个单词组成，多个单词之间以””分割，例如: item.insert</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117170033173.png" alt="image-20220117170033173"></p><pre class="language-java" data-language="java"><code class="language-java"># 通配符<span class="token operator">*</span> <span class="token punctuation">(</span>star<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> exactly one word       匹配不多不少恰好一个单词<span class="token operator">*</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> zero or more word      匹配一个或多个词# 如    audit<span class="token punctuation">.</span>#           匹配audit<span class="token punctuation">.</span>irs<span class="token punctuation">.</span>corporate 或者audit<span class="token punctuation">.</span>irs等    audit<span class="token punctuation">.</span>*           只能匹配audit<span class="token punctuation">.</span>irs</code></pre><h4 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//生命交换机和交换机类型 topic 使用动态路由（通配符方式）</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> routeKey <span class="token operator">=</span> <span class="token string">"user.save"</span><span class="token punctuation">;</span>    <span class="token comment">//动态路由</span></code></pre><h4 id="2，开发消费者-1"><a href="#2，开发消费者-1" class="headerlink" title="2，开发消费者-1"></a>2，开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重量级资源，类加载执行h之后执行一次。</span>        connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq的主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义提供连接对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭通道和关闭连接工具方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnectionAndChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Springboot-集成-RabbitMQ"><a href="#Springboot-集成-RabbitMQ" class="headerlink" title="Springboot 集成 RabbitMQ"></a>Springboot 集成 RabbitMQ</h2><h3 id="搭建初始环境"><a href="#搭建初始环境" class="headerlink" title="搭建初始环境"></a>搭建初始环境</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1,引入依赖"></a>1,引入依赖</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--rabbitmq 集成的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2,配置配置文件"></a>2,配置配置文件</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.200.130    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> ems    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /ems</code></pre><p><font color="orange">RabbitTemplate</font>用来简化操作，使用的时候，直接在项目中注入即可使用。</p><h3 id="第一种Hello-world模型使用"><a href="#第一种Hello-world模型使用" class="headerlink" title="第一种Hello world模型使用"></a>第一种Hello world模型使用</h3><h4 id="1-开发生产者-5"><a href="#1-开发生产者-5" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//hello world</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>durable <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">,</span>autoDelete <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> helloCustomer <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receivel</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118133734854.png" alt="image-20220118133734854"></p><h3 id="第二种work模型的使用"><a href="#第二种work模型的使用" class="headerlink" title="第二种work模型的使用"></a>第二种work模型的使用</h3><h4 id="1-开发生产者-6"><a href="#1-开发生产者-6" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//work 模型</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"work 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-2"><a href="#2-开发消费者-2" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-1"><a href="#3-测试结果-1" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134030447.png" alt="image-20220118134030447"></p><h3 id="第三种fanout（广播）模型使用"><a href="#第三种fanout（广播）模型使用" class="headerlink" title="第三种fanout（广播）模型使用"></a>第三种fanout（广播）模型使用</h3><h4 id="1-开发生产者-7"><a href="#1-开发生产者-7" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//fanout 广播</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"fanout 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-3"><a href="#2-开发消费者-3" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试的结果"><a href="#3-测试的结果" class="headerlink" title="3,测试的结果"></a>3,测试的结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134317791.png" alt="image-20220118134317791"></p><h3 id="第四种Route模型"><a href="#第四种Route模型" class="headerlink" title="第四种Route模型"></a>第四种Route模型</h3><h4 id="1-开发生产者-8"><a href="#1-开发生产者-8" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 路由模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"发送info的key 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-4"><a href="#2-开发消费者-4" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"warn"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-2"><a href="#3-测试结果-2" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><h5 id="error信息"><a href="#error信息" class="headerlink" title="error信息"></a>error信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134531098.png" alt="image-20220118134531098"></p><h5 id="info信息"><a href="#info信息" class="headerlink" title="info信息"></a>info信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134602104.png" alt="image-20220118134602104"></p><h5 id="warn信息"><a href="#warn信息" class="headerlink" title="warn信息"></a>warn信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134644195.png" alt="image-20220118134644195"></p><h3 id="第五种Topic模型"><a href="#第五种Topic模型" class="headerlink" title="第五种Topic模型"></a>第五种Topic模型</h3><h4 id="1-开发生产者-9"><a href="#1-开发生产者-9" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 动态路由 订阅模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user.save 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-5"><a href="#2-开发消费者-5" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.save"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"order.#"</span><span class="token punctuation">,</span><span class="token string">"produce.*"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-3"><a href="#3-测试结果-3" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118143907267.png" alt="image-20220118143907267"></p><h2 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><font color ="orange">场景说明：用户注册后，需要发送注册邮件和注册短信，传统的做法有两种： 1，串行的方式；2，并行的方式</font></p><ul><li><font color="orange">串行方式：</font>将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144429472.png" alt="image-20220118144429472"></p><ul><li><font color="orange">并行方式：</font>将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的事件。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144556401.png" alt="image-20220118144556401"></p><ul><li><font color = "orange">消息队列：</font>·假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并行已经提高的处理时间,但是前面说过邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功应该是写入数据库后就返回．<font color = "orange">消息队列：</font>引入消息队列后，把发送邮件短信不是必须的业务逻辑异步处理</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144854793.png" alt="image-20220118144854793"></p><blockquote><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间（可以忽略不计），引入消息队列后处理后，响应时间是串行的三倍，是并行的两倍。</p></blockquote><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><font color="orange">场景：双十一，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口。</font></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145133031.png" alt="image-20220118145133031"></p><p>这种做法有一个缺点：</p><p>当库存系统出现故障时，订单就会失败。订单系统和库存系统高耦合，引入消息队列。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145230792.png" alt="image-20220118145230792"></p><ul><li><font color = "orange">订单系统：</font>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。</li><li><font color = "orange">库存系统：</font>订阅下单的消息，获取下单的消息，进行库操作。就算库存系统出现故障，消息队列能保证消息的可靠投递，不会导致消息的丢失。</li></ul><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p><font color = "orange">场景：</font>秒杀活动，一般会因为流量过大，导致应用挂掉，为解决这个问题，一般在应用前端加入消息队列。</p><p><font color = "orange">作用：</font></p><ul><li>可以控制活动人数，超过此一定阈值的订单直接丢弃。</li><li>可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118150245500.png" alt="image-20220118150245500"></p><blockquote><p>1，用户的请求，服务器收到之后，首先写入消息队列，假如消息队列长度超过最大值，则直接抛弃用户请求或跳转到错误页面。</p><p>2，秒杀业务根据消息队列中的请求信息，再做后续处理。</p></blockquote><h2 id="RabbiMQ的集群"><a href="#RabbiMQ的集群" class="headerlink" title="RabbiMQ的集群"></a>RabbiMQ的集群</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><h4 id="普通集群（副本集群）"><a href="#普通集群（副本集群）" class="headerlink" title="普通集群（副本集群）"></a>普通集群（副本集群）</h4><blockquote><p>All data&#x2F;state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this message queues,which by default reside on one node,though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster  –摘自官网</p></blockquote><p><font color = "orange">默认情况下：RabbitMQ代理操作所需的所有数据&#x2F;状态都将跨所有节点复制，这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</font></p><h5 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1, 架构图"></a>1, 架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118151113890.png" alt="image-20220118151113890"></p><p>核心解决问题：<font color = "orange">当集群中某一时刻master节点宕机，可以对Queue中信息，进行备份。</font></p><h5 id="2-集群搭建"><a href="#2-集群搭建" class="headerlink" title="2, 集群搭建"></a>2, 集群搭建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.集群规划</span>    node1: <span class="token number">192.168</span>.200.130  mq1 master  主节点    node2: <span class="token number">192.168</span>.200.131  mq2 repl1  副本节点    node3: <span class="token number">192.168</span>.200.132  mq3 repl2  副本节点<span class="token comment"># 1,克隆三台机器主机名和ip映射</span><span class="token function">vim</span> /etc/hosts 加入：<span class="token number">192.168</span>.200.130  mq1<span class="token number">192.168</span>.200.131  mq2<span class="token number">192.168</span>.200.132  mq3node1: <span class="token function">vim</span> /etc/hostname 加入: mq1node2: <span class="token function">vim</span> /etc/hostname 加入: mq2node3: <span class="token function">vim</span> /etc/hostname 加入: mq3<span class="token comment">#2,三个机器安装rabbitmq，并同步cookie文件，在node1上执行：</span><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/<span class="token comment">#3,查看cookie是否一致</span>node1: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode2: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode3: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie<span class="token comment">#4,后台启动rabbitmq所有节点执行如下命令，启动成功访问管理界面：</span>rabbitmq-server -detached<span class="token comment">#5,在node2和node3执行加入集群命令：</span><span class="token number">1</span>,关闭               rabbitmqctl stop_app<span class="token number">2</span>,加入集群           rabbitmqctl join_cluster rabbit@mq1<span class="token number">3</span>,启动服务           rabbitmqctl start_app<span class="token comment">#6,查看集群状态，任意节点执行：</span>rabbitmqctl cluster_status<span class="token comment">#7,如果出现如下显示，汲取搭建成功：</span> Cluster status of <span class="token function">node</span> rabbit@mq3 <span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>nodes,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>disc,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>running_nodes,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>cluster_name,<span class="token operator">&lt;&lt;</span><span class="token string">"rabbit@mq1"</span><span class="token operator">>></span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>partitions,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>alarms,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>rabbit@mq1,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq2,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq3,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 8,登录管理界面，展示如下状态：</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220523140558358.png" alt="image-20220523140558358"></p><h6 id="测试集群在node1上，创建队列"><a href="#测试集群在node1上，创建队列" class="headerlink" title="测试集群在node1上，创建队列"></a>测试集群在node1上，创建队列</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h6 id="查看node2和node3节点"><a href="#查看node2和node3节点" class="headerlink" title="查看node2和node3节点"></a>查看node2和node3节点</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206337.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206338.png" alt="在这里插入图片描述"></p><h6 id="关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3"><a href="#关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3" class="headerlink" title="关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3"></a>关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206339.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063310.png" alt="在这里插入图片描述"></p><h4 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes.<br>–摘自官网<br>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</p></blockquote><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center-165283472063311.png" alt="在这里插入图片描述"></p><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.策略说明</span>rabbitmqctl set_policy <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>vhost<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--priority <span class="token operator">&lt;</span>priority<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--apply-to <span class="token operator">&lt;</span>apply-to<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>definition<span class="token operator">></span>-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name:     policy的名称Pattern: queue的匹配模式<span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-modeha-mode:指明镜像队列的模式，有效值为 all/exactly/nodesall：表示在集群中所有的节点上进行镜像exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定ha-params：ha-mode模式需要用到的参数ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual              priority：可选参数，policy的优先级                             <span class="token comment"># 1.查看当前策略</span>rabbitmqctl list_policies<span class="token comment"># 2.添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hello'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> 说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列<span class="token comment"># 3.删除策略</span>rabbitmqctl clear_policy ha-all<span class="token comment"># 4.测试集群</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063312.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063313.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063314.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop 大数据集群的搭建以及使用</title>
      <link href="/2022/05/16/hadoop/"/>
      <url>/2022/05/16/hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-hadoop集群搭建及使用"><a href="#1-hadoop集群搭建及使用" class="headerlink" title="1.hadoop集群搭建及使用"></a>1.hadoop集群搭建及使用</h1><h2 id="1-集群规划；"><a href="#1-集群规划；" class="headerlink" title="(1).集群规划；"></a>(1).集群规划；</h2><p><img src="/2022/05/16/hadoop/image-20220516121650308.png" alt="image-20220516121650308"></p><h2 id="2-虚拟机准备；"><a href="#2-虚拟机准备；" class="headerlink" title="(2).虚拟机准备；"></a>(2).虚拟机准备；</h2><h3 id="1、创建虚拟机（具体步骤不再展示）；"><a href="#1、创建虚拟机（具体步骤不再展示）；" class="headerlink" title="1、创建虚拟机（具体步骤不再展示）；"></a>1、创建虚拟机（具体步骤不再展示）；</h3><p><img src="/2022/05/16/hadoop/image-20220516121741768.png" alt="image-20220516121741768"> </p><h3 id="2-、配置网络；"><a href="#2-、配置网络；" class="headerlink" title="2 、配置网络；"></a>2 、配置网络；</h3><h4 id="ping外网：ping-baidu-com"><a href="#ping外网：ping-baidu-com" class="headerlink" title="ping外网：ping baidu.com"></a>ping外网：ping baidu.com</h4><p><img src="/2022/05/16/hadoop/image-20220516121747924.png" alt="image-20220516121747924"> </p><h4 id="如果ping不通"><a href="#如果ping不通" class="headerlink" title="如果ping不通"></a>如果ping不通</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改如下文件：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121754932.png" alt="image-20220516121754932"> </p><h4 id="重启网络服务："><a href="#重启网络服务：" class="headerlink" title="重启网络服务："></a>重启网络服务：</h4><p>service network restart</p><p><img src="/2022/05/16/hadoop/image-20220516121802380.png" alt="image-20220516121802380"> </p><h4 id="配置静态IP："><a href="#配置静态IP：" class="headerlink" title="配置静态IP："></a>配置静态IP：</h4><p>打开VMware-&gt;编辑-&gt;虚拟机网络编辑器</p><p><img src="/2022/05/16/hadoop/image-20220516121810372.png" alt="image-20220516121810372"> </p><p><img src="/2022/05/16/hadoop/image-20220516121816889.png" alt="image-20220516121816889"> </p><p><img src="/2022/05/16/hadoop/image-20220516121824390.png" alt="image-20220516121824390"> </p><p>查看IP：ip addr</p><p><img src="/2022/05/16/hadoop/image-20220516140004855.png" alt="image-20220516140004855"> </p><h4 id="修改网卡的配置文件"><a href="#修改网卡的配置文件" class="headerlink" title="修改网卡的配置文件"></a>修改网卡的配置文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#修改并添加：（IP为静态）</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.132<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2</code></pre><p>如图所示</p><p><img src="/2022/05/16/hadoop/image-20220516121832458.png" alt="image-20220516121832458"> </p><p>重启网络服务：service network restart</p><p>ping外网（查看是否可以ping通）：ping baidu.com </p><h3 id="3-克隆两台上述已配置的虚拟机；"><a href="#3-克隆两台上述已配置的虚拟机；" class="headerlink" title="3).克隆两台上述已配置的虚拟机；"></a>3).克隆两台上述已配置的虚拟机；</h3><p>关闭虚拟机：</p><p><img src="/2022/05/16/hadoop/image-20220516121836984.png" alt="image-20220516121836984"> </p><p>点击下一页，</p><p>选择克隆类型时，创建完整克隆：</p><p><img src="/2022/05/16/hadoop/image-20220516121842574.png" alt="image-20220516121842574"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打开第二、三台虚拟机，进入：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#更改</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.133  <span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.134</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121847510.png" alt="image-20220516121847510"> </p><p>重启网络服务并查看是否可以ping通外网。</p><h2 id="3-修改主机名；"><a href="#3-修改主机名；" class="headerlink" title="(3).修改主机名；"></a>(3).修改主机名；</h2><p>查看主机名：hostname</p><p>修改第一台主机名：sudo hostnamectl set-hostname hadoop1</p><p><img src="/2022/05/16/hadoop/image-20220516121854101.png" alt="image-20220516121854101"> </p><p>修改第二台主机名：sudo hostnamectl set-hostname hadoop2</p><p><img src="/2022/05/16/hadoop/image-20220516121858625.png" alt="image-20220516121858625"> </p><p>修改第三台主机名：sudo hostnamectl set-hostname hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121903823.png" alt="image-20220516121903823"> </p><p>三台都要修改ip与主机名的映射：sudo vi &#x2F;etc&#x2F;hosts</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加：</span><span class="token number">192.168</span>.246.132 hadoop1<span class="token number">192.168</span>.246.134 hadoop2<span class="token number">192.168</span>.246.133 hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121908682.png" alt="image-20220516121908682"> </p><p>重启虚拟机生效：reboot</p><h2 id="4-配置免密登录"><a href="#4-配置免密登录" class="headerlink" title="(4).配置免密登录"></a>(4).配置免密登录</h2><p>在hadoop1机器上操作：ssh-keygen -t rsa</p><p>执行命令后，连续敲击三次回车键，生成公钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拷贝公钥：</span>ssh-copy-id hadoop1ssh-copy-id hadoop2ssh-copy-id hadoop3</code></pre><p>由于我已拷贝过，所以显示已存在</p><p><img src="/2022/05/16/hadoop/image-20220516121913155.png" alt="image-20220516121913155"> </p><p>进入hadoop2、hadoop3同样操作，实现可以使用ssh hadoop2、ssh hadoop3，不需要密码就能进入hadoop2、hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121917445.png" alt="image-20220516121917445"> </p><h2 id="5-编写分发脚本；"><a href="#5-编写分发脚本；" class="headerlink" title="(5).编写分发脚本；"></a>(5).编写分发脚本；</h2><p>输入：rsync –help</p><p><img src="/2022/05/16/hadoop/image-20220516121922280.png" alt="image-20220516121922280"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台虚拟机安装rsync命令：</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">rsync</span> -y<span class="token comment">#rsync与scp区别：用rsync做文件的复制比scp快，rsync只对差异文件作更新</span><span class="token comment">#在主目录创建bin目录：</span><span class="token function">mkdir</span> ~/bin<span class="token comment">#创建分发脚本脚本：</span><span class="token function">vim</span> ~/bin/xsync</code></pre><p>脚本内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token comment">#1. 判断参数个数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> Not Enough Arguement<span class="token operator">!</span>    <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#2. 遍历集群所有机器</span><span class="token comment">#注意，如果你的主机名命名和我不一样，下面这三个更换成你的主机名</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3<span class="token keyword">do</span>     <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>  <span class="token variable">$host</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>        <span class="token comment">#3. 遍历所有目录，挨个发送</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span>    <span class="token keyword">do</span>    <span class="token comment">#4 判断文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>             <span class="token comment">#5. 获取父目录</span>                <span class="token assign-left variable">pdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> -P <span class="token punctuation">$(</span>dirname $file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>                <span class="token assign-left variable">fname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $file<span class="token variable">)</span></span>                <span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">"mkdir -p <span class="token variable">$pdir</span>"</span>                <span class="token function">rsync</span> -av <span class="token variable">$pdir</span>/<span class="token variable">$fname</span> <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>            <span class="token keyword">else</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$file</span> does not exists<span class="token operator">!</span>                        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span>    </code></pre><p><img src="/2022/05/16/hadoop/image-20220516121927761.png" alt="image-20220516121927761"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改权限：</span><span class="token function">chmod</span> +x ~/bin/xsync<span class="token comment">#测试：把xsync命令发送到hadoop2、hadoop3</span><span class="token comment">#进入目录：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#将xsync脚本发送到hadoop2、hadoop3：</span>xsync xsync</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121932285.png" alt="image-20220516121932285"> </p><h2 id="6-安装JDK"><a href="#6-安装JDK" class="headerlink" title="(6).安装JDK;"></a>(6).安装JDK;</h2><p>进入官网下载匹配的jdk8安装包，上传至linux：cd</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> soft<span class="token function">mkdir</span> installfile<span class="token builtin class-name">cd</span> ~/installfile</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121937403.png" alt="image-20220516121937403"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压：</span><span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz.crdownload -C ~/soft<span class="token comment">#切换到soft目录下：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s jdk1.8.0_281 jdk</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121942242.png" alt="image-20220516121942242"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=~</span>/soft/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="token variable">$&#123;JRE_HOME&#125;</span>/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516121946353.png" alt="image-20220516121946353"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>java -version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121950307.png" alt="image-20220516121950307"> </p><p>进入hadoop2、hadoop3按照上述步骤配置jdk、环境变量并验证</p><h2 id="7-安装hadoop"><a href="#7-安装hadoop" class="headerlink" title="(7).安装hadoop"></a>(7).安装hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至installfile目录解压hadoop安装包：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下</span><span class="token function">tar</span> -zxvf hadoop-3.1.3.tar.gz -C ~/soft<span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121954599.png" alt="image-20220516121954599"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121958454.png" alt="image-20220516121958454"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122002381.png" alt="image-20220516122002381"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入hadoop配置目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span class="token comment">#在hadoop-env.sh中配置JAVA_HOME路径：</span><span class="token function">vi</span> hadoop-env.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122006516.png" alt="image-20220516122006516"> </p><p>配置core-site.xml：vi core-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Abase for other temporary directories.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token comment">&lt;!-- hadoop1的内网IP地址 --></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 指定NameNode的地址 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122011920.png" alt="image-20220516122011920"> </p><p>配置hdfs-site.xml：vi hdfs-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定NameNode的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 设置SecondaryNameNode(2NN)的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop3:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>need not permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122016807.png" alt="image-20220516122016807"> </p><p><img src="/2022/05/16/hadoop/image-20220516122021019.png" alt="image-20220516122021019"> </p><p>配置yarn-site.xml：vi yarn-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定MapReduce走shuffle --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.aux-services<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>mapreduce_shuffle<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定ResourceManager的地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.hostname<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>hadoop<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the applications manager interface <span class="token keyword">in</span> the RM.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the scheduler interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.scheduler.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The http address of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:808<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The https adddress of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.https.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:809<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.resource-tracker.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the RM admin interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.admin.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.scheduler.maximum-allocation-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span>  <span class="token operator">&lt;</span>discription<span class="token operator">></span>每个节点可用内存,单位MB,默认8182MB<span class="token operator">&lt;</span>/discription<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-pmem-ratio<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">2</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.resource.memory-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-check-enabled<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>false<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122026970.png" alt="image-20220516122026970"> </p><p><img src="/2022/05/16/hadoop/image-20220516122030561.png" alt="image-20220516122030561"> </p><p><img src="/2022/05/16/hadoop/image-20220516122034104.png" alt="image-20220516122034104"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制并且配置mapred-site.xml：</span><span class="token function">cp</span> mapred-site.xml mapred-site.xml.template<span class="token function">vi</span> mapred-site.xml</code></pre><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定MapReduce程序运行在Yarn上的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:49001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.local.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/var<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122039094.png" alt="image-20220516122039094"> </p><p>配置workers，将三个主机名添加进去：vi workers</p><p><img src="/2022/05/16/hadoop/image-20220516122042633.png" alt="image-20220516122042633"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入/sbin目录下：</span><span class="token builtin class-name">cd</span> /root/soft/hadoop/sbin/<span class="token comment">#修改start-dfs.sh和stop-dfs.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_SECURE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122046435.png" alt="image-20220516122046435"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改start-yarn.sh和stop-yarn.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_DN_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122050361.png" alt="image-20220516122050361"> </p><p>切换到soft目录下：cd &#x2F;root&#x2F;soft</p><p>使用xsync脚本将hadoop-3.1.3发送到hadoop2、hadoop3：</p><p><img src="/2022/05/16/hadoop/image-20220516122054081.png" alt="image-20220516122054081"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换hadoop2、hadoop3在soft目录下创建hadoop-3.1.3的软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop<span class="token comment">#配置hadoop环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122058346.png" alt="image-20220516122058346"> </p><p><img src="/2022/05/16/hadoop/image-20220516122102094.png" alt="image-20220516122102094"> </p><h2 id="8-启动hadoop"><a href="#8-启动hadoop" class="headerlink" title="(8).启动hadoop"></a>(8).启动hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#格式化hadoop：</span>hadoop namenode -format</code></pre><p>注：hadoop只能格式化一次，在下面出现successfully formatted为格式化成功，这里由于我已经格式化了，就不附截图了。</p><p>在hadoop1启动hdfs：start-dfs.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122107291.png" alt="image-20220516122107291"> </p><p>在hadoop2启动yarn：start-yarn.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122112228.png" alt="image-20220516122112228"> </p><p>验证进程：</p><p>在hadoop1、hadoop2、hadoop3分别输入：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122116494.png" alt="image-20220516122116494"> </p><p><img src="/2022/05/16/hadoop/image-20220516122120013.png" alt="image-20220516122120013"> </p><p><img src="/2022/05/16/hadoop/image-20220516122123607.png" alt="image-20220516122123607"> </p><p>关闭防火墙：systemctl stop firewalld</p><p>在浏览器输入：192.168.246.132:9870</p><p><img src="/2022/05/16/hadoop/image-20220516140133885.png" alt="image-20220516140133885"> </p><p><img src="/2022/05/16/hadoop/image-20220516122128674.png" alt="image-20220516122128674"> </p><p>在浏览器输入：192.168.246.134:8088</p><p><img src="/2022/05/16/hadoop/image-20220516122132496.png" alt="image-20220516122132496"> </p><p>在浏览器端可查看每台服务器状态：</p><p><img src="/2022/05/16/hadoop/image-20220516122138080.png" alt="image-20220516122138080"> </p><h2 id="9-简单使用hadoop"><a href="#9-简单使用hadoop" class="headerlink" title="(9).简单使用hadoop"></a>(9).简单使用hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看hdfs的根目录：</span>hdfs dfs -ls /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122143737.png" alt="image-20220516122143737"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在根目录下创建文件夹：</span>hdfs dfs -mkdir /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122147922.png" alt="image-20220516122147922"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将linux本地文件上传到hdfs：</span>hdfs dfs -put emp.csv /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122151618.png" alt="image-20220516122151618"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#移动emp.csv的位置到/data目录下：</span>hdfs dfs -mv /emp.csv /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122155106.png" alt="image-20220516122155106"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将data目录下的emp.csv复制到hdfs的根目录下：</span>hdfs dfs -cp /data/emp.csv /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122159630.png" alt="image-20220516122159630"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看emp.csv文件内容：</span>hdfs dfs -cat /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122204310.png" alt="image-20220516122204310"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除文件emp-copy.csv：</span>hdfs dfs -rm /emp-copy.csv <span class="token comment">#删除data文件夹:</span>hdfs dfs -rm -r /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122209350.png" alt="image-20220516122209350"> </p><p><img src="/2022/05/16/hadoop/image-20220516122212683.png" alt="image-20220516122212683"> </p><p>使用wordcount脚本（自己编写的），对某个文件里面的字符进行统计</p><p>在linux本地创建1.txt文件并上传到hdfs根目录下的input（上面已有步骤，直接附截图）：</p><p><img src="/2022/05/16/hadoop/image-20220516122216665.png" alt="image-20220516122216665"> </p><p><img src="/2022/05/16/hadoop/image-20220516122220619.png" alt="image-20220516122220619"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#运行脚本：</span>hadoop jar wordcount-1.0-SNAPSHOT.jar org.example.MyMain /input/1.txt /output/wordcount</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122224444.png" alt="image-20220516122224444"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看结果：</span>hdfs dfs -cat /output/wordcount/part-r-00000</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122228709.png" alt="image-20220516122228709"> </p><p>在浏览器界面（9870）也可查看hdfs的文件存放情况：</p><p><img src="/2022/05/16/hadoop/image-20220516122232821.png" alt="image-20220516122232821"> </p><h1 id="2-ZooKeeper集群搭建及使用"><a href="#2-ZooKeeper集群搭建及使用" class="headerlink" title="2.ZooKeeper集群搭建及使用"></a>2.ZooKeeper集群搭建及使用</h1><h2 id="1-下载zookeeper安装包并解压"><a href="#1-下载zookeeper安装包并解压" class="headerlink" title="(1).下载zookeeper安装包并解压"></a>(1).下载zookeeper安装包并解压</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf zookeeper-3.4.9.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122236855.png" alt="image-20220516122236855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s zookeeper-3.4.9 zookeeper<span class="token comment">#同步zookeeper至其他机器：</span>xsync zookeeper-3.4.9</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="(2).配置环境变量"></a>(2).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/root/soft/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122242022.png" alt="image-20220516122242022"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（2）步骤</p><p><img src="/2022/05/16/hadoop/image-20220516122246648.png" alt="image-20220516122246648"> </p><h2 id="3-配置zoo-cfg"><a href="#3-配置zoo-cfg" class="headerlink" title="(3).配置zoo.cfg"></a>(3).配置zoo.cfg</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入conf目录：</span><span class="token builtin class-name">cd</span> zookeeper/conf/<span class="token comment">#复制zoo_sample.cf：</span><span class="token function">cp</span> zoo_sample.cfg zoo.cfg</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122251044.png" alt="image-20220516122251044"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑zoo.cfg：</span><span class="token function">vi</span> zoo.cfg<span class="token comment">#修改：</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/root/soft/zookeeper/zkData</code></pre><p><img src="/2022/05/16/hadoop/image-20225171803.png" alt="img"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#末尾添加：</span>server.1<span class="token operator">=</span>hadoop1:2888:3888server.2<span class="token operator">=</span>hadoop2:2888:3888server.3<span class="token operator">=</span>hadoop3:2888:3888</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122258768.png" alt="image-20220516122258768"> </p><p>server.A&#x3D;B: C: D。</p><p>A:机器编号  </p><p>B:主机名  </p><p>C: Leader与Follower的访问端口 </p><p>D:选举Leader接口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#同步zoo.cfg：</span>xsync zoo.cfg</code></pre><p>配置服务器编号：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入zookeeper：</span><span class="token builtin class-name">cd</span> <span class="token variable">$ZOOKEEPER_HOME</span><span class="token comment">#创建数据存放目录：</span><span class="token function">mkdir</span> zkData<span class="token comment">#编辑myid：.</span><span class="token function">vi</span> zkData/myid</code></pre><p>内容为：1</p><p><img src="/2022/05/16/hadoop/image-20220516122303679.png" alt="image-20220516122303679"> </p><p><img src="/2022/05/16/hadoop/image-20220516122307298.png" alt="image-20220516122307298"> </p><p>在hadoop2中的myid添加内容为：2</p><p>在hadoop3中的myid添加内容为：3</p><h2 id="4-编写zookeeper脚本"><a href="#4-编写zookeeper脚本" class="headerlink" title="(4).编写zookeeper脚本"></a>(4).编写zookeeper脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> zk.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh start "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------状态 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh status"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122311485.png" alt="image-20220516122311485"> </p><p>添加脚本执行权限：chmod u+x zk.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122316821.png" alt="image-20220516122316821"> </p><h2 id="5-启动zookeeper集群"><a href="#5-启动zookeeper集群" class="headerlink" title="(5).启动zookeeper集群"></a>(5).启动zookeeper集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群（启动前先检查防火墙。没关的关一下）：</span>zk.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122320281.png" alt="image-20220516122320281"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看各机器状态：</span>zk.sh status</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122324340.png" alt="image-20220516122324340"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止zookeeper集群：</span>zk.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122328422.png" alt="image-20220516122328422"> </p><h2 id="6-zookeeper集群的简单使用"><a href="#6-zookeeper集群的简单使用" class="headerlink" title="(6).zookeeper集群的简单使用"></a>(6).zookeeper集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群：</span>zk.sh start<span class="token comment">#进入zookeeper命令行：</span>zkCli.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122331781.png" alt="image-20220516122331781"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建节点（节点有四种类型，永久节点、临时节点、永久序列化节点、临时序列化节点）：</span><span class="token comment"># -s 序列化 -e 临时节点 path  创建路径  data 节点数据</span>create <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> path data  <span class="token comment">#创建demo临时节点：</span>create -e /demo <span class="token number">321</span><span class="token comment">#查看根下的所有节点：</span><span class="token function">ls</span> /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122336640.png" alt="image-20220516122336640"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看path下所有znode,以及zonde的属性：</span>ls2 /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122340206.png" alt="image-20220516122340206"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拿到/demo的数据：</span>get /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122344420.png" alt="image-20220516122344420"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改/demo的数据：</span><span class="token builtin class-name">set</span> /demo <span class="token number">456</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122348066.png" alt="image-20220516122348066"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#递归删除节点：</span>rmr /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122352849.png" alt="image-20220516122352849"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看历史记录：</span><span class="token function">history</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122356338.png" alt="image-20220516122356338"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出zookeeper命令行：</span>quit</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122400137.png" alt="image-20220516122400137"> </p><h1 id="3-HBase集群搭建及使用"><a href="#3-HBase集群搭建及使用" class="headerlink" title="3.HBase集群搭建及使用"></a>3.HBase集群搭建及使用</h1><h2 id="1-查看hbase与jdk、hadoop的版本匹配；"><a href="#1-查看hbase与jdk、hadoop的版本匹配；" class="headerlink" title="(1).查看hbase与jdk、hadoop的版本匹配；"></a>(1).查看hbase与jdk、hadoop的版本匹配；</h2><p><img src="/2022/05/16/hadoop/image-20220516122405362.png" alt="image-20220516122405362"> </p><p><img src="/2022/05/16/hadoop/image-20220516122409109.png" alt="image-20220516122409109"> </p><h2 id="2-集群规划"><a href="#2-集群规划" class="headerlink" title="(2).集群规划"></a>(2).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516122412571.png" alt="image-20220516122412571"> </p><h2 id="3-下载、解压hbase安装包"><a href="#3-下载、解压hbase安装包" class="headerlink" title="(3).下载、解压hbase安装包"></a>(3).下载、解压hbase安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf hbase-2.4.11-bin.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122416499.png" alt="image-20220516122416499"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hbase-2.4.11 hbase<span class="token comment">#同步zookeeper至其他机器：</span>xsync hbase-2.4.11<span class="token comment">#切换hadoop2、hadoop3创建软连接</span></code></pre><p> (4).配置环境变量；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_HOME</span><span class="token operator">=~</span>/soft/hbase-2.4.11<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HBASE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122421127.png" alt="image-20220516122421127"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hbase version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122426092.png" alt="image-20220516122426092"> </p><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（4）步骤</p><h2 id="5-配置hbase-site-xml"><a href="#5-配置hbase-site-xml" class="headerlink" title="(5).配置hbase-site.xml"></a>(5).配置hbase-site.xml</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到conf目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HBASE_HOME</span>/conf<span class="token comment">#编辑hbase-site.xml：</span><span class="token function">vi</span> hbase-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122430589.png" alt="image-20220516122430589"> </p><p>(先将原有配置全部删除)在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1,hadoop2,hadoop3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/zookeeper/zkData<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/hbase-2.4.11/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 在分布式的情况下一定要设置，不然容易出现Hmaster起不来的情况 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.unsafe.stream.capability.enforce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122435139.png" alt="image-20220516122435139"> </p><h2 id="6-配置regionservers"><a href="#6-配置regionservers" class="headerlink" title="(6).配置regionservers"></a>(6).配置regionservers</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑regionservers：</span><span class="token function">vi</span> regionservers <span class="token comment">#删除原有的localhost，添加如下内容： </span>hadoop1hadoop2hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122439505.png" alt="image-20220516122439505"> </p><h2 id="7-配置备用master"><a href="#7-配置备用master" class="headerlink" title="(7).配置备用master"></a>(7).配置备用master</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑backup-masters：</span><span class="token function">vi</span> backup-masters <span class="token comment">#添加内容为：</span>hadoop2</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122443768.png" alt="image-20220516122443768"> </p><p><img src="/2022/05/16/hadoop/image-20220516122447722.png" alt="image-20220516122447722"> </p><h2 id="8-软连接hadoop配置文件到hbase配置目录并分发hbase；"><a href="#8-软连接hadoop配置文件到hbase配置目录并分发hbase；" class="headerlink" title="(8).软连接hadoop配置文件到hbase配置目录并分发hbase；"></a>(8).软连接hadoop配置文件到hbase配置目录并分发hbase；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#软连接hadoop的core-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/core-site.xml core-site.xml<span class="token comment">#软连接hadoop的hdfs-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/hdfs-site.xml hdfs-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122452063.png" alt="image-20220516122452063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#返回上一级目录：</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">#同步conf文件夹：</span>xsync conf</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122456356.png" alt="image-20220516122456356"> </p><h2 id="9-启动hbase集群"><a href="#9-启动hbase集群" class="headerlink" title="(9).启动hbase集群"></a>(9).启动hbase集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase前需要先启动zookeeper、hadoop：</span>zk.sh startstart-all.shstart-hbase.sh<span class="token comment">#或者分开启动hbase：</span>hbase-daemon.sh start masterhbase-daemon.sh start regionserver</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122500574.png" alt="image-20220516122500574"> </p><p>分别在hadoop1、hadoop2、hadoop3输入jps查看节点：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122505347.png" alt="image-20220516122505347"> </p><p><img src="/2022/05/16/hadoop/image-20220516122508629.png" alt="image-20220516122508629"> </p><p><img src="/2022/05/16/hadoop/image-20220516122512505.png" alt="image-20220516122512505"> </p><p><img src="/2022/05/16/hadoop/image-20220516122517185.png" alt="image-20220516122517185"> </p><p>进入浏览器查看：192.168.246.132:16010</p><p><img src="/2022/05/16/hadoop/image-20220516122524759.png" alt="image-20220516122524759"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止hbase集群：</span>stop-hbase.sh<span class="token comment">#如果无法关闭就分别关闭master、regionserver：</span>hbase-daemons.sh stop regionserverhbase-daemons.sh stop master</code></pre><h2 id="10-hbase集群的简单使用；"><a href="#10-hbase集群的简单使用；" class="headerlink" title="(10).hbase集群的简单使用；"></a>(10).hbase集群的简单使用；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase集群：</span>start-hbase.sh<span class="token comment">#进入hbase命令行：</span>hbase shell</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122531557.png" alt="image-20220516122531557"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有表：</span>list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122537346.png" alt="image-20220516122537346"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建stu表：</span>create <span class="token string">'stu'</span>,<span class="token string">'info'</span>,<span class="token string">'no'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122542755.png" alt="image-20220516122542755"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看表结构：</span>describe <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122546736.png" alt="image-20220516122546736"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启用或禁用表：</span>is_enabled <span class="token string">'stu'</span>is_disabled <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122551001.png" alt="image-20220516122551001"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1001'</span>,<span class="token string">'info:name'</span>,<span class="token string">'HYX'</span><span class="token comment">#扫描表数据：</span>scan <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122555113.png" alt="image-20220516122555113"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#继续向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:name'</span>,<span class="token string">'Jack'</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:age'</span>,<span class="token string">'22'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122559328.png" alt="image-20220516122559328"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#统计表记录数：</span>count <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122604057.png" alt="image-20220516122604057"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除stu表需要禁用表：</span>disable <span class="token string">'stu'</span><span class="token comment">#删除表：</span>drop <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122607441.png" alt="image-20220516122607441"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出hbase命令行：</span><span class="token builtin class-name">exit</span> 或 quit</code></pre><h1 id="4-Kafka集群搭建及使用"><a href="#4-Kafka集群搭建及使用" class="headerlink" title="4.Kafka集群搭建及使用"></a>4.Kafka集群搭建及使用</h1><h2 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="(1).集群规划"></a>(1).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516140250117.png" alt="image-20220516140250117"> </p><h2 id="2-下载并解压安装包"><a href="#2-下载并解压安装包" class="headerlink" title="(2).下载并解压安装包"></a>(2).下载并解压安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile目录：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf kafka_2.11-2.4.1.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122622290.png" alt="image-20220516122622290"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s kafka_2.11-2.4.1 kafka<span class="token comment">#同步kafka至其他机器：</span>xsync kafka_2.11-2.4.1</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="(3).配置环境变量"></a>(3).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HOME</span><span class="token operator">=</span>/root/soft/kafka<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KAFKA_HOME</span>/bin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122628614.png" alt="image-20220516122628614"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（3）步骤</p><h2 id="4-分别在三台机器上创建logs目录"><a href="#4-分别在三台机器上创建logs目录" class="headerlink" title="(4).分别在三台机器上创建logs目录"></a>(4).分别在三台机器上创建logs目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#创建logs目录：</span><span class="token function">mkdir</span> logs</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122633371.png" alt="image-20220516122633371"> </p><h2 id="5-修改配置文件server-properties"><a href="#5-修改配置文件server-properties" class="headerlink" title="(5).修改配置文件server.properties"></a>(5).修改配置文件server.properties</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至config目录：</span><span class="token builtin class-name">cd</span> config<span class="token comment">#编辑server.properties：</span><span class="token function">vi</span> server.properties</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122637275.png" alt="image-20220516122637275"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改内容如下：</span>broker.id<span class="token operator">=</span><span class="token number">0</span><span class="token comment">#删除topic功能</span>delete.topic.enable<span class="token operator">=</span>truelog.dirs<span class="token operator">=</span>/root/soft/kafka/logszookeeper.connect<span class="token operator">=</span>hadoop1:2181,hadoop2:2181,hadoop3:2181/kafka</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122641096.png" alt="image-20220516122641096"> </p><p><img src="/2022/05/16/hadoop/image-20220516122644972.png" alt="image-20220516122644972"> </p><p><img src="/2022/05/16/hadoop/image-20220516122649136.png" alt="image-20220516122649136"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#分发server.properties到hadoop2、hadoop3：</span>xsync server.properties<span class="token comment">#修改hadoop2的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#修改hadoop3的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">2</span></code></pre><h2 id="6-编写kafka脚本"><a href="#6-编写kafka脚本" class="headerlink" title="(6).编写kafka脚本"></a>(6).编写kafka脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> kf.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-start.sh -daemon /root/soft/kafka/config/server.properties "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-stop.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122655855.png" alt="image-20220516122655855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加脚本执行权限：</span><span class="token function">chmod</span> u+x kf.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122701672.png" alt="image-20220516122701672"> </p><h2 id="7-启动kafka集群"><a href="#7-启动kafka集群" class="headerlink" title="(7).启动kafka集群"></a>(7).启动kafka集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash">启<span class="token comment">#动kafka集群需要先启动zookeeper集群：</span>zk.sh start <span class="token operator">|</span>  kf.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122705626.png" alt="image-20220516122705626"> </p><p>使用jps查看三台机器的节点是否启动：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122709528.png" alt="image-20220516122709528"> </p><p><img src="/2022/05/16/hadoop/image-20220516122713433.png" alt="image-20220516122713433"> </p><p><img src="/2022/05/16/hadoop/image-20220516122716947.png" alt="image-20220516122716947"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭kafka集群：</span>kf.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122721107.png" alt="image-20220516122721107"> </p><h2 id="8-kafka集群的简单使用"><a href="#8-kafka集群的简单使用" class="headerlink" title="(8).kafka集群的简单使用"></a>(8).kafka集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动kafka集群：</span>kf.sh start<span class="token comment">#进入kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#查看kafka topic列表：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122725063.png" alt="image-20220516122725063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--create --replication-factor <span class="token number">3</span> --partitions <span class="token number">1</span> --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122729379.png" alt="image-20220516122729379"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--delete --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122733878.png" alt="image-20220516122733878"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#发送消息：</span>bin/kafka-console-producer.sh <span class="token punctuation">\</span>--broker-list hadoop1:9092 --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122737468.png" alt="image-20220516122737468"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#消费消息：</span>bin/kafka-console-consumer.sh <span class="token punctuation">\</span>--bootstrap-server hadoop1:9092 --from-beginning --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122741682.png" alt="image-20220516122741682"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看某个topic的详情：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span> --describe --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122746568.png" alt="image-20220516122746568"> </p><p><img src="/2022/05/16/hadoop/image-20220516122750832.png" alt="image-20220516122750832"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改分区数：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --alter --topic demo --partitions <span class="token number">6</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122757161.png" alt="image-20220516122757161"></p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> zookeeper </tag>
            
            <tag> kafka </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

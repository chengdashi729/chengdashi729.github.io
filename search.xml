<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Docker安装的mysql来安装hive</title>
      <link href="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/"/>
      <url>/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/</url>
      
        <content type="html"><![CDATA[<h1 id="首先安装mysql"><a href="#首先安装mysql" class="headerlink" title="首先安装mysql"></a>首先安装mysql</h1><h2 id="用mysql-5-7举例"><a href="#用mysql-5-7举例" class="headerlink" title="用mysql:5.7举例"></a>用mysql:5.7举例</h2><h3 id="1可以先在docker-hub上查找mysql的镜像"><a href="#1可以先在docker-hub上查找mysql的镜像" class="headerlink" title="1可以先在docker hub上查找mysql的镜像"></a>1可以先在docker hub上查找mysql的镜像</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">docker search mysql</code></pre><p><img src="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h3 id="2，我这次安装的mysql-5-7"><a href="#2，我这次安装的mysql-5-7" class="headerlink" title="2，我这次安装的mysql:5.7"></a>2，我这次安装的mysql:5.7</h3><p>所以直接从docker hub上拉取mysql:5.7</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7</code></pre><h3 id="3-运行mysql"><a href="#3-运行mysql" class="headerlink" title="3,运行mysql"></a>3,运行mysql</h3><blockquote><p>#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！<br>#官方测试：docker run –name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag<br>#启动：<br>-d        后台运行<br>-p        端口映射<br>-v        卷挂载<br>-e        环境配置<br>–name    容器名字</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql0 mysql:5.7</code></pre><h3 id="4-查看容器是否创建成功"><a href="#4-查看容器是否创建成功" class="headerlink" title="4,查看容器是否创建成功"></a>4,查看容器是否创建成功</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token function">docker</span> <span class="token function">ps</span></code></pre><p><img src="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/79fbe2e581464313ac4e2e16a5881de6.png" alt="在这里插入图片描述"><br>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器的id /bin/bash</code></pre><h3 id="5，使用navicat连接服务器或虚拟机上的mysql"><a href="#5，使用navicat连接服务器或虚拟机上的mysql" class="headerlink" title="5，使用navicat连接服务器或虚拟机上的mysql"></a>5，使用navicat连接服务器或虚拟机上的mysql</h3><p><img src="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_16,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h2 id="开始安装hive"><a href="#开始安装hive" class="headerlink" title="开始安装hive"></a>开始安装hive</h2><p>前提条件：</p><blockquote><p>在虚拟机或是服务器上安装好hadoop 2.7.3的环境<br>安装好mysql5：7<br>在mysql中创建一个名为hive的数据库</p></blockquote><p><img src="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_13,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><p>1，去官网下载hive安装文件，下载地址 ：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">hive 下载地址</a>apache-hive-2.3.9-bin.tar.gz<br>2，将hive安装文件上传到虚拟机或是服务器的~&#x2F;soft目录下，解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/soft$ <span class="token function">tar</span> -zxvf apache-hive-2.3.9-bin.tar.gz</code></pre><p>3，创建软连接：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s apache-hive-2.3.9-bin hive</code></pre><p>4，配置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc</code></pre><p>文件添加以下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意：一定不要打错！ 可以在操作之前拍个快照。</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=~</span>/soft/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HIVE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p>使配置文件生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>5，配置hive-site.xml(没有这个文件直接vim就可以创建)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hive/conf<span class="token function">vim</span> hive-site.xml</code></pre><p>将以下内容添加到xml文件中</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--数据库驱动  如果你使用的是8.x  驱动是：com.mysql.cj.jdbc.Driver--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--数据库的用户名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--数据库的密码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>6，将mysql的驱动文件拷贝到hive&#x2F;lib目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mysql-connection-java-5.1.46.jar ~/soft/hive/lib</code></pre><p>7，初始化Mysql</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name schematool/root/soft/apache-hive-2.3.9-bin/bin/schematool -dbType mysql -initSchema</code></pre><p>可以看到已经正确完成初始化了。<br><img src="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/image-20220523142046853.png" alt="image-20220523142046853"></p><p>如果初始化不成功，可能是hadoop的版本问题。hadoop3.  * 和hive 3 .*会出现</p><pre class="language-bash" data-language="bash"><code class="language-bash">Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument<span class="token punctuation">(</span>ZLjava/lang/String<span class="token punctuation">;</span>Ljava/lang/Object<span class="token punctuation">;</span><span class="token punctuation">)</span>V    at org.apache.hadoop.conf.Configuration.set<span class="token punctuation">(</span>Configuration.java:1357<span class="token punctuation">)</span>    at org.apache.hadoop.conf.Configuration.set<span class="token punctuation">(</span>Configuration.java:1338<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.setJar<span class="token punctuation">(</span>JobConf.java:536<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.setJarByClass<span class="token punctuation">(</span>JobConf.java:554<span class="token punctuation">)</span>    at org.apache.hadoop.mapred.JobConf.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>JobConf.java:448<span class="token punctuation">)</span>    at org.apache.hadoop.hive.conf.HiveConf.initialize<span class="token punctuation">(</span>HiveConf.java:5141<span class="token punctuation">)</span>    at org.apache.hadoop.hive.conf.HiveConf.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveConf.java:5099<span class="token punctuation">)</span>    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4jCommon<span class="token punctuation">(</span>LogUtils.java:97<span class="token punctuation">)</span>    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4j<span class="token punctuation">(</span>LogUtils.java:81<span class="token punctuation">)</span>    at org.apache.hadoop.hive.cli.CliDriver.run<span class="token punctuation">(</span>CliDriver.java:699<span class="token punctuation">)</span>    at org.apache.hadoop.hive.cli.CliDriver.main<span class="token punctuation">(</span>CliDriver.java:683<span class="token punctuation">)</span>    at sun.reflect.NativeMethodAccessorImpl.invoke0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun.reflect.NativeMethodAccessorImpl.invoke<span class="token punctuation">(</span>NativeMethodAccessorImpl.java:62<span class="token punctuation">)</span>    at sun.reflect.DelegatingMethodAccessorImpl.invoke<span class="token punctuation">(</span>DelegatingMethodAccessorImpl.java:43<span class="token punctuation">)</span>    at java.lang.reflect.Method.invoke<span class="token punctuation">(</span>Method.java:483<span class="token punctuation">)</span>    at org.apache.hadoop.util.RunJar.run<span class="token punctuation">(</span>RunJar.java:323<span class="token punctuation">)</span>    at org.apache.hadoop.util.RunJar.main<span class="token punctuation">(</span>RunJar.java:236<span class="token punctuation">)</span></code></pre><p>错误原因：系统找不到这个类所在的jar包或者jar包的版本不一样系统不知道使用哪个。hive启动报错的原因是后者</p><p>解决办法：</p><p>1、com.google.common.base.Preconditions.checkArgument这个类所在的jar包为：guava.jar</p><p>2、hadoop-3.2.1（路径：hadoop\share\hadoop\common\lib）中该jar包为 guava-27.0-jre.jar；而hive-3.1.2(路径：hive&#x2F;lib)中该jar包为guava-19.0.1.jar</p><p>3、将jar包变成一致的版本：删除hive中低版本jar包，将hadoop中高版本的复制到hive的lib中。</p><p>再次启动问题得到解决！</p><p>可以测试hive是否安装成功，开启hive之前要先开启hadoop</p><pre class="language-bash" data-language="bash"><code class="language-bash">start-all.shhive</code></pre><p>可以看到安装成功了。<br><img src="/2022/05/23/%E5%9F%BA%E4%BA%8EDocker%E5%AE%89%E8%A3%85%E7%9A%84mysql%E6%9D%A5%E5%AE%89%E8%A3%85hive/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532867240432.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> mysql </category>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> mysql </tag>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Springboot项目</title>
      <link href="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>首先：我是参考着几篇博客：</p><blockquote><p><a href="https://blog.csdn.net/hangao233/article/details/104395693">https://blog.csdn.net/hangao233/article/details/104395693</a><br><a href="https://www.jianshu.com/p/397929dbc27d">https://www.jianshu.com/p/397929dbc27d</a></p></blockquote><h2 id="第一步：先在虚拟机或服务器上安装docker服务"><a href="#第一步：先在虚拟机或服务器上安装docker服务" class="headerlink" title="第一步：先在虚拟机或服务器上安装docker服务"></a>第一步：先在虚拟机或服务器上安装docker服务</h2><blockquote><p>要安装Docker Engine，您需要CentOS 7或8的维护版本。不支持或未测试存档版本。</p></blockquote><h3 id="1，卸载旧版本"><a href="#1，卸载旧版本" class="headerlink" title="1，卸载旧版本"></a>1，卸载旧版本</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>yum报告没有安装这些软件包就可以了。</p><h3 id="2，安装docker软件包"><a href="#2，安装docker软件包" class="headerlink" title="2，安装docker软件包"></a>2，安装docker软件包</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum install <span class="token operator">-</span>y yum-utils</code></pre><h3 id="3-设置镜像仓库地址"><a href="#3-设置镜像仓库地址" class="headerlink" title="3,设置镜像仓库地址"></a>3,设置镜像仓库地址</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 默认是国外的</span>sudo yum-config-manager \    <span class="token operator">--</span><span class="token function">add-repo</span> \    https:<span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com/linux/centos/docker-ce<span class="token punctuation">.</span>repo    <span class="token comment"># 换成阿里云镜像地址</span>sudo yum-config-manager \    <span class="token operator">--</span><span class="token function">add-repo</span> \    http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/docker-ce/linux/centos/docker-ce<span class="token punctuation">.</span>repo</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391191.png" alt="在这里插入图片描述"></p><h3 id="4-安装最新版Docker-Engine容器"><a href="#4-安装最新版Docker-Engine容器" class="headerlink" title="4,安装最新版Docker Engine容器"></a>4,安装最新版Docker Engine容器</h3><p>安装前建议先将将服务器上的软件包信息现在本地缓存,以提高安装软件的速度</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo yum makecache fast</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391202.png" alt="在这里插入图片描述"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker-ce社区版(docker-ee企业版)</span>sudo yum install docker-ce docker-ce-<span class="token function">cli</span> containerd<span class="token punctuation">.</span>io</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391203.png" alt="在这里插入图片描述">安装完成后，Docker只安装但并未启动</p><h3 id="5，启动Docker"><a href="#5，启动Docker" class="headerlink" title="5，启动Docker"></a>5，启动Docker</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo systemctl <span class="token function">start</span> docker</code></pre><p>然后可用docker version命令测试Docker是否安装成功，并查看Docker的版本信息<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391204.png" alt="在这里插入图片描述"></p><h2 id="第二步：使用Docker安装mysql：5-7"><a href="#第二步：使用Docker安装mysql：5-7" class="headerlink" title="第二步：使用Docker安装mysql：5.7"></a>第二步：使用Docker安装mysql：5.7</h2><h3 id="1可以先在docker-hub上查找mysql的镜像"><a href="#1可以先在docker-hub上查找mysql的镜像" class="headerlink" title="1可以先在docker hub上查找mysql的镜像"></a>1可以先在docker hub上查找mysql的镜像</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">docker search mysql</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391205.png" alt="在这里插入图片描述"></p><h3 id="2，我这次安装的mysql-5-7"><a href="#2，我这次安装的mysql-5-7" class="headerlink" title="2，我这次安装的mysql:5.7"></a>2，我这次安装的mysql:5.7</h3><p>所以直接从docker hub上拉取mysql:5.7</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7</code></pre><h3 id="3-运行mysql"><a href="#3-运行mysql" class="headerlink" title="3,运行mysql"></a>3,运行mysql</h3><blockquote><p>#运行容器，需要做数据挂载！ #安装启动MySQL，需要配置密码，这是要注意点！<br>#官方测试：docker run –name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag<br>#启动：<br>-d        后台运行<br>-p        端口映射<br>-v        卷挂载<br>-e        环境配置<br>–name    容器名字</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql0 mysql:5.7</code></pre><h3 id="4-查看容器是否创建成功"><a href="#4-查看容器是否创建成功" class="headerlink" title="4,查看容器是否创建成功"></a>4,查看容器是否创建成功</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker  ps 命令</span>      <span class="token comment">#列出当前正在运行的容器</span>-a    <span class="token comment">#列出当前正在运行的容器+带出历史运行过的容器</span>-n<span class="token operator">=</span>?  <span class="token comment">#显示最近创建的容器</span>-q    <span class="token comment">#只显示容器的编号</span><span class="token function">docker</span> <span class="token function">ps</span></code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/79fbe2e581464313ac4e2e16a5881de6.png" alt="在这里插入图片描述"><br>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器的id /bin/bash</code></pre><h3 id="5，使用navicat连接服务器或虚拟机上的mysql"><a href="#5，使用navicat连接服务器或虚拟机上的mysql" class="headerlink" title="5，使用navicat连接服务器或虚拟机上的mysql"></a>5，使用navicat连接服务器或虚拟机上的mysql</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_16,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h3 id="6，可以使用navicat提供的工具进行数据的传输"><a href="#6，可以使用navicat提供的工具进行数据的传输" class="headerlink" title="6，可以使用navicat提供的工具进行数据的传输"></a>6，可以使用navicat提供的工具进行数据的传输</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391206.png" alt="在这里插入图片描述"><br>然后可以看到数据已经传输成功：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_7,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h2 id="第三步：将springboot项目打包"><a href="#第三步：将springboot项目打包" class="headerlink" title="第三步：将springboot项目打包"></a>第三步：将springboot项目打包</h2><h3 id="1-准备springboot项目并进行打包"><a href="#1-准备springboot项目并进行打包" class="headerlink" title="1.准备springboot项目并进行打包"></a>1.准备springboot项目并进行打包</h3><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/f53c09f8ac344b67a7bf12cc9523be51.png" alt="在这里插入图片描述"><br>打包成功会看到出现一个target的目录，里面的jar包就是我们刚刚打包好的<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_12,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>然后对yml文件进行编辑：<br><img src="https://img-blog.csdnimg.cn/00ff466ca3a44d45a72ef9bb31436eff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="2-编写DockerFile文件"><a href="#2-编写DockerFile文件" class="headerlink" title="2.编写DockerFile文件"></a>2.编写DockerFile文件</h3><p>在idea的插件市场搜索docker，并安装<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532862391218.png" alt="在这里插入图片描述"><br>然后在根目录下新建一个Dockerfile的文件：<br><img src="https://img-blog.csdnimg.cn/2ba3235b3d7447769b88c024bc970b91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>如果显示是这样的说明docker那个插件下载安装成功，然后编写Dockerfile文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">FROM            <span class="token comment">#基础镜像，一切从这里开始构建。</span>MAINTAINER      <span class="token comment">#镜像是谁写的，姓名+邮箱</span>RUN             <span class="token comment">#镜像构建的时候需要运行的命令</span>ADD             <span class="token comment">#步骤：tomcat镜像，这个tomcat压缩包！添加内容</span>WORKDIR         <span class="token comment">#镜像的工作目录</span>VOLUME          <span class="token comment">#挂载的目录</span>EXPOST          <span class="token comment">#保留端口配置</span>CMD             <span class="token comment">#指定这个容器启动的时候要运行的命令，只有一个会生效，可被替代。</span>ENTRYPOINT      <span class="token comment">#指定这个容器启动的时候要运行的命令，可以追加命令。</span>ONBUILD         <span class="token comment">#当构建一个被集成DockerFile这个时候就会运行ONBUILD的指令。触发指令。</span>COPY            <span class="token comment">#类似ADD，将我们文件拷贝到镜像中。</span>ENV             <span class="token comment">#构建的时候设置环境变量。</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0a3908d1f29d4d9da5ebb9ba5a575133.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/38da9bf783b040aebe4d99acac03e73e.png" alt="在这里插入图片描述"></p><h3 id="3-构建镜像"><a href="#3-构建镜像" class="headerlink" title="3.构建镜像"></a>3.构建镜像</h3><p>使用xftp将刚才打包的jar包还有编写的Dockerfile文件上传到虚拟机或是服务器</p><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-165328623912110.png" alt="在这里插入图片描述"><br>然后使用命令构建镜像：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment"># ls</span>Dockerfile  onlineExam-0.0.1-SNAPSHOT.jar<span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment"># docker build -t onlineexam .</span>Sending build context to Docker daemon  <span class="token number">16</span>.55MBStep <span class="token number">1</span>/5 <span class="token builtin class-name">:</span> FROM java:8<span class="token number">8</span>: Pulling from library/java5040bd298390: Pull complete fce5728aad85: Pull complete 76610ec20bf5: Pull complete 60170fec2151: Pull complete e98f73de8f0d: Pull complete 11f7af24ed9c: Pull complete 49e2d6393f32: Pull complete bb9cdec9c7f3: Pull complete Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9dStatus: Downloaded newer image <span class="token keyword">for</span> java:8 ---<span class="token operator">></span> d23bdf5b1b1bStep <span class="token number">2</span>/5 <span class="token builtin class-name">:</span> COPY *.jar /app.jar ---<span class="token operator">></span> 63fda5bdcb6dStep <span class="token number">3</span>/5 <span class="token builtin class-name">:</span> CMD <span class="token punctuation">[</span><span class="token string">"--server.port=8888"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 5e94d333492dRemoving intermediate container 5e94d333492d ---<span class="token operator">></span> 59bd2f4e0120Step <span class="token number">4</span>/5 <span class="token builtin class-name">:</span> EXPOSE <span class="token number">8888</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 99c4427313deRemoving intermediate container 99c4427313de ---<span class="token operator">></span> d4792bf4f884Step <span class="token number">5</span>/5 <span class="token builtin class-name">:</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> da3be5f92a55Removing intermediate container da3be5f92a55 ---<span class="token operator">></span> 2df101d6382cSuccessfully built a42985afa2f3Successfully tagged onlineexam:latest</code></pre><p><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_18,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>然后可以使用docker images 展示刚刚构建好的镜像<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/cc0a3049f0aa4b72bd8c0e3d285bb031.png" alt="在这里插入图片描述"></p><h3 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost project<span class="token punctuation">]</span><span class="token comment">#  docker run -d -p 8888:8888 onlineexam</span>-d参数是让容器后台运行 -p 是做端口映射，此时将服务器中的8888端口映射到容器中的8888<span class="token punctuation">(</span>项目中端口配置的是8888<span class="token punctuation">)</span>端口</code></pre><p>然后使用docker ps查看一下：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/21d51a487203489280b5bdbd1863d600.png" alt="在这里插入图片描述"><br>ok，到此启动成功了！<br>由于我此此的springboot项目使用了redis。你们可以选择使用docker安装，还可以参考一下我的这个<a href="https://blog.csdn.net/m0_49683806/article/details/123359905?spm=1001.2014.3001.5501">centos 7安装redis</a></p><h2 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h2><p>因为我springboot使用了swagger（现在是knife4j），所以我在浏览器测试是否可以打开：<br><img src="/2022/05/23/Docker%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-165328623912211.png" alt="在这里插入图片描述"><br>ok，测试一下功能都ok了。<br>到此就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ELK</title>
      <link href="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/"/>
      <url>/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装ElasticSearch"><a href="#Docker-安装ElasticSearch" class="headerlink" title="Docker 安装ElasticSearch"></a>Docker 安装ElasticSearch</h1><h2 id="我是参考这几篇博客。"><a href="#我是参考这几篇博客。" class="headerlink" title="我是参考这几篇博客。"></a>我是参考这几篇博客。</h2><p>参考这几篇博客，然后自己成功后，做一个记录。大家都可以去看看</p><blockquote><p><a href="https://blog.csdn.net/qq_40942490/article/details/111594267">https://blog.csdn.net/qq_40942490/article/details/111594267</a><br><a href="https://zhuanlan.zhihu.com/p/257867352">https://zhuanlan.zhihu.com/p/257867352</a><br><a href="https://www.cnblogs.com/fkaka/p/15205675.html">https://www.cnblogs.com/fkaka/p/15205675.html</a></p></blockquote><h2 id="第一步：确保你的虚拟机或者是服务器已经安装了Docker"><a href="#第一步：确保你的虚拟机或者是服务器已经安装了Docker" class="headerlink" title="第一步：确保你的虚拟机或者是服务器已经安装了Docker"></a>第一步：确保你的虚拟机或者是服务器已经安装了Docker</h2><p>没有安装的可以参考这个<a href="https://blog.csdn.net/m0_49683806/article/details/123687886">docker安装</a></p><h2 id="第二步：安装ElasticSearch"><a href="#第二步：安装ElasticSearch" class="headerlink" title="第二步：安装ElasticSearch"></a>第二步：安装ElasticSearch</h2><blockquote><p>这次安转的7.7.0的版本</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用docker 直接获取es的镜像</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull elasticsearch:7.7.0</code></pre><p>命令执行完后，使用docker images查看镜像是否拉取成功<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/31f368eec7704b16b146300b2e8c982c.png" alt="在这里插入图片描述"><br>ok，下载成功了！</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>镜像下载成功，使用镜像创建容器。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mydata/elasticsearch/config<span class="token function">mkdir</span> -p /mydata/elasticsearch/data/<span class="token function">mkdir</span> -p /mydata/elasticsearch/plugins<span class="token builtin class-name">echo</span> <span class="token string">"http.host: 0.0.0.0"</span> <span class="token operator">>></span> /mydata/elasticsearch/config/elasticsearch.yml<span class="token function">chmod</span> -R <span class="token number">777</span> <span class="token function">file</span></code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>注意：启动前需要在服务器新建下列文件夹，并且文件夹的权限要改成使用chmod -R 777 file修改文件读写权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 <span class="token punctuation">\</span>-e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span>  <span class="token punctuation">\</span>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\</span>-v /mydata/elasticsearch/data/:/usr/share/elasticsearch/data <span class="token punctuation">\</span>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span>-d elasticsearch:7.7.0</code></pre><p>参数说明：</p><pre class="language-bash" data-language="bash"><code class="language-bash">--name表示镜像启动后的容器名称  -d: 后台运行容器，并返回容器ID；-e: 指定容器内的环境变量-p: 指定端口映射，格式为：主机<span class="token punctuation">(</span>宿主<span class="token punctuation">)</span>端口:容器端口discovery.type<span class="token operator">=</span>single-node：单机运行如果启动不了，可以加大内存设置：-e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span></code></pre><p>使用<strong>docker ps</strong>查看一下：<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/bb814aac15b34062874942e5c796c697.png" alt="在这里插入图片描述"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>es默认端口为9200，只用ip地址+端口号直接访问，所以在浏览器中输入<strong>ip:9200</strong>，如果出现以下界面就是安装成功了！<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"><br>ok！到此。ElasticSearch：7.7.0安装成功了！</p><h2 id="安装ElasticSeach的一些工具"><a href="#安装ElasticSeach的一些工具" class="headerlink" title="安装ElasticSeach的一些工具"></a>安装ElasticSeach的一些工具</h2><h3 id="安装ElasticSeach-head"><a href="#安装ElasticSeach-head" class="headerlink" title="安装ElasticSeach-head"></a>安装ElasticSeach-head</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>同样使用docker进行安装。先拉取镜像，使用下面的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拉取镜像</span><span class="token function">docker</span> pull mobz/elasticsearch-head:5</code></pre><p>使用docker images，查看镜像是否拉取成功<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/a91b2bdb91354507b28856d4294daa0b.png" alt="在这里插入图片描述"></p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建容器</span><span class="token function">docker</span> create --name elasticsearch-head -p <span class="token number">9100</span>:9100 mobz/elasticsearch-head:5<span class="token comment">#启动容器</span><span class="token function">docker</span> start elasticsearch-head</code></pre><ul><li>安装ElasticSearch时是容器创建成功后直接在后台就运行了，但在安装ElasticSearch-Head时并没有保持一致。</li><li>而是指定容器名，端口号就直接执行了，这样执行完成后是创建了一个容器，并没有运行。</li><li>所以还需要一个操作，那就是启动容器docker start 容器id。</li><li>安装完成直接使用域名加端口9100即可访问。<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532235677981.png" alt="在这里插入图片描述"><h4 id="处理跨域"><a href="#处理跨域" class="headerlink" title="处理跨域"></a>处理跨域</h4>在连接ElasticSearch会发现无法连接，由于时前后端分离开发，所以会存在跨域问题，需要在服务端做跨域处理。<br>执行命令<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it elasticsearch<span class="token punctuation">(</span>或者容器id<span class="token punctuation">)</span> /bin/bash</code></pre><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/dd291e0bc4404904a4de8a5be65fa5d2.png" alt="在这里插入图片描述"></li></ul><p>进入到第一步创建的ElasticSearch容器中，修改配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">vi/vim config/elasticsearch.yml</code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/f78978fb19f648c2b22c12f86a1d78e7.png" alt="在这里插入图片描述"><br>把这两行写进配置文件中(注意是yml配置文件)：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/2670d425cb5d4d3588300c71a10ffeb3.png" alt="在这里插入图片描述"><br>配置修改完后需执行命令exit退出容器，接着执行docker restart 容器ID重启容器即可。</p><h4 id="处理406和es-head不显示数据的问题"><a href="#处理406和es-head不显示数据的问题" class="headerlink" title="处理406和es-head不显示数据的问题"></a>处理406和es-head不显示数据的问题</h4><p>此时通过&#x3D;&#x3D; ElasticSearch-Head &#x3D;&#x3D;可以成功连接ElasticSearch了，但进行数据操作时会报406错误。</p><p>只需要修改&#x3D;&#x3D; ElasticSearch-Head &#x3D;&#x3D;容器中的配置即可，将配置文件复制到宿主机进行修改。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制vendor.js到外部</span><span class="token function">docker</span> <span class="token function">cp</span> 容器id:/usr/src/app/_site/vendor.js /usr/local/<span class="token comment">#修改vendor.js</span><span class="token function">vim</span> vendor.js</code></pre><p>进入到&#x2F;usr&#x2F;local即可看到从容器中复制出来的文件vendor.js。</p><p>修改文件第6886、7574行，将”application&#x2F;x-www-from-urlencodes”修改为”application&#x2F;json;charset&#x3D;UTF-8”即可<br><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ0gtU2VyZW5kaXBpdHk=,size_20,color_FFFFFF,t_70,g_se,x_16-16532235677992.png" alt="在这里插入图片描述"></p><p>修改后再将文件复制到容器中，从容器复制文件到宿主机命令已经使用过了，那么现在只不过是把俩个目录反过来即可执行docker cp &#x2F;usr&#x2F;local&#x2F;vendor.js 容器ID:&#x2F;usr&#x2F;src&#x2F;app&#x2F;_site</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> /usr/local/vendor.js  容器id:/usr/src/app/_site</code></pre><p>最后一步重启ElasticSearch-Head容器就结束了。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart 容器id</code></pre><h3 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h3><blockquote><p>首先问一个问题，ElasticSearch中自带的有分词器为什么还要使用IK分词器？<br>在ElasticSearch中的分词器会把中文分为一个一个的字，例如”今天是周五”，会被分成“今”、“天”、“是”，“周”、“五”，这里很明显是不合适的，在大多数场景下需要的是词而不是字。<br>所以就需要安装中文分词器IK来解决这个问题。<br>IK提供了两个分词算法：ik_smart和ik_max_word，其中ik_smart为最少切分，ik_max_word为最细力度。<br>这里需要注意安装的版本需要跟ElasticSearch版本一致。</p></blockquote><h4 id="第一种离线安装"><a href="#第一种离线安装" class="headerlink" title="第一种离线安装"></a>第一种离线安装</h4><p>下载ik分词器压缩包：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip">ik分词器:7.7.0</a><br>使用xftp将分词器上传到服务器或者虚拟机中的&#x2F;tmp中</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将压缩包移动到容器中</span><span class="token function">docker</span> <span class="token function">cp</span> /tmp/elasticsearch-analysis-ik-7.7.0.zip elasticsearch:/usr/share/elasticsearch/plugins<span class="token comment">#进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it elasticsearch /bin/bash  <span class="token comment">#创建目录</span><span class="token function">mkdir</span> /usr/share/elasticsearch/plugins/ik<span class="token comment">#将文件压缩包移动到ik中</span><span class="token function">mv</span> /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-7.7.0.zip /usr/share/elasticsearch/plugins/ik<span class="token comment">#进入目录</span><span class="token builtin class-name">cd</span> /usr/share/elasticsearch/plugins/ik<span class="token comment">#解压</span><span class="token function">unzip</span> elasticsearch-analysis-ik-7.7.0.zip<span class="token comment">#删除压缩包</span><span class="token function">rm</span> -rf elasticsearch-analysis-ik-7.7.0.zip</code></pre><p>退出并重启镜像</p><h4 id="第二种使用wget进行安装"><a href="#第二种使用wget进行安装" class="headerlink" title="第二种使用wget进行安装"></a>第二种使用wget进行安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip</code></pre><p>当你使用wget安装出现Unable to establish SSL connection时执行以下俩个命令即可。</p><p>yum install opensslls</p><p>yum install openssl-devel</p><p>执行cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins来到插件目录创建一个IK目录。</p><p>将压缩包移动到IK目录中，执行解压指令elasticsearch-analysis-ik-7.7.0.zip</p><p>接着删除压缩包即可，此时你可以看到一个config包和几个jar包</p><p>最后退出容器，重启重启容器即可。</p><h3 id="安装拼音分词器"><a href="#安装拼音分词器" class="headerlink" title="安装拼音分词器"></a>安装拼音分词器</h3><h1 id="Docker安装Kibana"><a href="#Docker安装Kibana" class="headerlink" title="Docker安装Kibana"></a>Docker安装Kibana</h1><h2 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h2><p>一定要确保kibana的版本和你安装的ES的版本是一致的。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull kibana:7.7.0</code></pre><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mydata/kibana/config/<span class="token function">vi</span> /mydata/kibana/config/kibana.yml</code></pre><p>将以下内容写进去</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span><span class="token comment"># ** THIS IS AN AUTO-GENERATED FILE **</span><span class="token comment">#</span><span class="token comment"># Default Kibana configuration for docker target</span>server.name: kibanaserver.host: <span class="token string">"0"</span><span class="token comment"># ip 改成自己的</span>elasticsearch.hosts: <span class="token punctuation">[</span> <span class="token string">"http://10.111.43.55:9200"</span> <span class="token punctuation">]</span>xpack.monitoring.ui.container.elasticsearch.enabled: <span class="token boolean">true</span></code></pre><p><strong>注意：请根据实际情况，修改elasticsearch地址。</strong></p><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>  --name<span class="token operator">=</span>kibana <span class="token punctuation">\</span>  --restart<span class="token operator">=</span>always <span class="token punctuation">\</span>  -p <span class="token number">5601</span>:5601 <span class="token punctuation">\</span>  -v /mydata/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml <span class="token punctuation">\</span>  kibana:7.7.0</code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs -f kibana</code></pre><p>如果出现以下信息、说明启动成功了。</p><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210327307.png" alt="image-20220522210327307"></p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;10.111.43.55:5601</code></pre><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210416546.png" alt="image-20220522210416546"></p><p><img src="/2022/05/22/Docker%E5%AE%89%E8%A3%85ELK/image-20220522210443222.png" alt="image-20220522210443222"></p><p>ok 安装成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> Kibana </tag>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思想汇报</title>
      <link href="/2022/05/20/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/"/>
      <url>/2022/05/20/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>​        公元2021年，对于中国共产党和中国人民来说，是极度不平凡的一年。因为今年是中国共产党成立的一百周年。一百年前，浙江嘉兴南湖的一条小船上，先进的中国共产党应运而生，将中国这头沉睡已久的东方巨龙唤醒，犹如黑夜中的一道闪电在东方闪烁，照亮了当时黑暗的中国社会，同时也照亮了中国通向未来的繁荣大道的方向。自此，中国迎来了新的征程。</p><p>​        近代的中国可谓是受尽屈辱，从第一次鸦片战争开始，外国侵略者使用坚船利炮轰开中国的大门，迫使我们签署屈辱的不平等合约。我们这个国家，我们这个民族就一直在压迫和屈辱中度过。当然，我们不会坐以待毙，民族的很多有志之士进行了许许多多的自救行动，“洋务运动”、“戊戌变法”、“辛亥革命”、“新文化运动”等等。在经历了一个又一个的军阀想要复辟的情况下，中国正处于历史上最混乱，最黑暗的一段时期，人民的生活苦不堪言。随着俄国十月革命的一声炮响，        李大钊同志在研究了俄国历史后深受马克思主义的影响，在南下的逃亡中看到了无数苦难深重的人民，这些底层人民的暗无天日的生活，让李大钊痛心疾首。立志想要建立一个全国性质的能够拯救中国，能够让中国人民摆脱压迫，走出这种水深火热生活的政党。他将自己的所看到的，所思考的同自己的亲密“战友”陈独秀同志交流，两人一拍即合。而陈独秀在这么多年苦苦寻求能够拯救中国的药方的过程中，也逐渐确立了，只有马克思主义能够救中国，只有效仿俄国十月革命，才能使破旧不堪的救中国重获新生，在这样的情况下，南陈北李相约建党。</p><p>​        回顾党的百年历史。我们不仅要了解中国共产党的历史，更要从这百年历史中学习到很多宝贵的东西。要明白中国共产党这一路走来并不都是一帆风顺的，更多的是艰难险阻。而当遇到这些困难的时候，靠的就是那些不屈不挠的坚定的信念。</p><p>​        前段时间热播的电视剧《觉醒年代》，让我看的热泪盈眶，那些历史书上原本厚重的名字，现在一个个活灵活现的出现在我的面前。跟随着先辈们，一同在那些混乱黑暗的社会中经历。有一幕我记得特别清楚，李大钊和陈独秀去散发《北京市民宣言》，陈独秀自己则爬上顶楼，将传单奋力抛散并大声演说。呼吁同胞们团结起来，坚决抵制无耻的《巴黎和约》。不怕被警察逮捕，宁愿牺牲自己。也想让当时的人们觉醒。他们的信念是多么的坚定。</p><p>​        我们新时代的年轻人，要推崇这样的坚定的信念。我们应该在以后生活中不断的完善自己的信念，将自己和国家，和人民紧密的联系在一起。可以先从简单的做起，比如坚持，就拿我自己来说，好多时候都是三分钟热度。有些虽然也能坚持下去，但是到了后期就是会很乏力，虽然对自己这个方面有了解，但还是会放纵自己。所以一定要坚持。再比如担当，不能过分计较自己的那些小小的得失，大的方面应该是，将民族，国家时刻放在心中的第一位，要相信我们能成为中国社会主义的接班人。简单来说，就是在班级和宿舍生活中，为同学服务啊。当然最重要的还是要做好自己的本职工作，现在的身份是学生，当然是要学习，并且不能满足于课堂上的知识。要拓展自己的知识面，不能好高骛远，也不能妄自菲薄。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>尊敬的党组织：</p><p>​        当时光的脚步又一次来到九月，新的学年就又开始了，不知不觉之间大学又过去了一年的时间，但是当我上个学年成为一名入党积极分子，参加了入党积极分子的各种的培训后，我对于党员的认识又更近了一步，我明白了共产党的宗旨是“全心全意为人民服务”、我明白党的各种思想离我不再是那么的遥远，那么的晦涩和难懂。这些东西时时刻刻的体现在我们生活中的方方面面、明白了党员是很平凡的，他们从人民中产生，徘徊在群众之间。但是他们带领人民脱贫攻坚，在各个方面起着模范带头的作用。我想要成为一名光荣的共产党员的心情越来越热切。</p><p>​        回首刚刚过去的那个学年，有得有失，但是总体上还是积极向上的，在假期的时候，对于刚放假时制定的那些计划，只是完成的七七八八。对于没有完美的完成，对此我很懊恼，由此可以看出自己的自控力还没有很好，处于家里面那样安逸的环境中，总是会让人忘乎所以，变得颓废，我有愧于入党积极分子这个身份，以上是我对刚过去的假期的反思。</p><p>​        而在其他方面，尤其是政治理论基础很薄弱，理论联系实际的能力并不是很好。这应该是在上个学年中对这个方面的学习程度不够。</p><p>​        尤其是当上一次提交思想汇报的时候，书记向我们提问党章的有关内容，我们却一点都不清楚。身为入党积极分子的我们倍感羞愧。因此，我认真阅读了党章。对党的性质、理想目标、指导思想、基本要求以及党员义务权利有的更深的理解。更加坚定了自己的理想信念。</p><p>​         身为一名入党积极分子，我们应该时时刻刻以一名优秀党员的标准来要求自己，认真学习党的历史，性质，奋斗目标，建党宗旨，组织制度和组织原则等基本知识。遵守党章、贯彻党章，用党章指导实践，还应该经常阅读有关党建、党史及党员先进事迹的书籍和报刊等，不断加强对党路线、方针政策的认识和理解。提升自己的党性修养，认真学习全面提高能力，使我们能够在错综复杂的新时代有清楚的认知。</p><p>​        新的学期开始了，每个人都有自己的目标与计划，当然我也不例外。</p><p>​        虽然本学期的课程并不是很繁重，但是我知道并不能满足于完成课业就好，我还有很多的事情要去做。并且不能只停留在纸面计划或是脑海想象中，要在实际生活中严格做到。</p><p>​        因此，我对自己提出以下要求：在学习上，肯定是一点都不能马虎，认认真真的对待每一节课，在完成课程安排上的任务后，要把精力放在那些自己一直没有做好的事情上，比如自己的四级，还没有通过，所以一定要好好的准备，争取下次通过。然后就是考研，现在大三了。要开始准备了。在生活中，更加的乐于助人，乐观积极，为身边的同学做好表率。工作上，要主动的配合班级上的安排，要改变过去的那种“事不关己高高挂起”的态度，对每件事情都要态度认真，积极参与，为不断建设一个积极向上的班集体而努力。在思想上，要认真学习上级组织的各项精神，不断提升自己的思想面貌，并且多多关注国内外的大事，并多多思考，比如在学习强国上认真提升思想觉悟。争取早日达到党组织的要求成为一名光荣的共产党员。</p><p>​        以上是我这个季度的思想汇报，作为一名新时代的青年大学生，有志于用自己知识，技能去报效祖国，建设社会。身为入党积极分子要时刻不忘党章的要求，坚持做到自重、自警、自律。希望党组织在各个方面能够给予我批评和指正，我一定会虚心接受并积极改正，不断在各个方面严格要求自己，并为成为一名光荣的共产党员而努力，请党组织在实践中考验我！</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>敬爱的党组织：</p><p>​       通过这段时间的学习，我对党组织的了解也越来越多，无论是在党的理论方面的学习，还是思想方面的理解，我认为我都有了一定的进步。随着对中国共产党有了更多的了解，对党组织更加崇敬和热爱，也更加坚定了我努力学习的决心。</p><p>​       在对党组织的认识上， 作为一名积极分子，我积极学习党组织的新思想，努力向党组织靠拢。前段时间召开的中国共产党第19届中央委员会第六次全体会议，为了更加深刻地了解党组织，我搜索了许多关于此次会议的资料，我了解到，该会议的重点是关于研究总结党的百年奋斗的重大成就和历史经验问题。一年多来，国内疫情防控和经济社会发展各项任务非常的繁重和艰巨。但是在中国共产党的正确领导下，中华民族打赢了这场艰难的战役。纵观我们党的百年历史，我们能够经历磨难，不断地创造辉煌的重要的原因就是无数的共产党人不忘初心，牢记使命，坚定不移地为之奉献。所以我更要积极学习党的19届六中全会的精神，坚持以马克思列宁主义，毛泽东思想，中国特色社会主义理论体系为指导，将理论用于实践，在实践中学习这些思想。</p><p>​      在思想感悟上，我要加强思想道德修养，树立远大理想。在学习之余，我也经常通过网络，例如学习强国等软件，了解关于党的新消息，关心着国家大事。我要牢记历史，坚定理想信念，牢记党和人民的初心使命。随着《长津湖》《觉醒年代》等主旋律影视作品的大火，中国共产党的百年奋斗历史也深深地震撼着我。作为21世纪的新青年，我再次感觉到了中国共产党的伟大，每一个片段、每一次伟人的演讲，都让我热血沸腾、热泪盈眶。同时我也更加珍惜现在的幸福生活，现在的我们吃得饱穿得暖，能够享受良好的教育，无一不是伟大的中国共产党奋斗的结果。生活在这样美好的时代，我觉得自己很幸福，要让自己的生活更有意义，更应该树立远大的理想和追求，然后为了理想努力地奋斗。</p><p>​        在学习上，我要增强自己的创新精神，加强对实际应用知识的学习，提高自己的学习效率。还要提升专业知识能力，拓宽自己的知识面，并且要善于将理论与实际相结合，坚持实践才是检验真理的唯一标准，要相信实践出真知的道理，千万不能机械式地背书学习。我也认识到自己的学习与理解水平还有待提高，因此更加不能松懈，要做到严格要求自己，无论是日常的学习，期末考试，还是将来的研究生考试，都要付出百分之百的努力，不断奋斗，做到无愧于心。</p><p>​        通过以上总结，我也深刻认识到了自己的不足。虽然我对政治有一定的了解，但理解的很大一部分还是表面，没有认真领会其中的深刻含义，对理论的理解也没有及时地结合社会实践。除此之外，我还没有做到完全的自我约束和监督，在一些工作上的积极性不强，这些都是我需要改正的问题。我相信，跟随着党的脚步，我会努力改掉学习和生活中不良习惯，成为更好的自己。</p><p>​        以上便是我这段时间以来的思想情况，在学习了十九届六中会议后，我进一步加深了对于中国共产党的认识。所以我更要继续以一名优秀党员的身份严格要求自己，在各个方面争取发挥带头作用，不断的提升自己。恳请党组织给予批评和指正。我会认真吸取并改正。</p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>敬爱的党组织：</p><p>​        通过这段时间的学习。我对于党的思想和宗旨的学习和领悟又有了更深一层的理解。与此同时，在党的思想的指导下，我的思想道德行为素质也有了较大程度的提升。尤其是寒假在家与之后的志愿者服务之后，看到了许许多多优秀的共产党员为了老百姓的平安幸福，舍小家为大家。我更加明白中国共产党是一心为人民服务的，时刻保卫着人民的幸福安定生活，为人民谋幸福。</p><p>​        思想上，在学习了更多的党的知识与亲眼见证到了疫情隔离期间很多村委的优秀的共产党员努力的组织疫情防控工作后，我认识到中国共产党人一直是吃苦在前，享受在后的。当苦难来临的时候，当疫情又一次的气势汹汹的袭来的时候。冲锋在第一线的永远都是中国共产党员。为人民服务，中国共产党任何时候都是把把人民的利益放在第一位的，为此，无数共产党员前仆后继，不懈努力，为了人民的幸福，国家的富强而奋斗。我们身为新时代的青年，要有责任和担当，肩负起属于我们这一代人的责任。</p><p>​        学习上，仍旧保持着自律，因为开学就要大三下了。然后考研的时间也所剩不多。所以在家积极学习专业的知识，提升自己，在家的效率虽然不高，但是我仍然坚持学习了很多，比如：RabbitMq、Docker和ElasticSearch等。而且，在学校还有一些项目没有做完，在家也一直在坚持写。我的专业的技能有了很多的提高。同时，我也在进行文化课的学习，每天坚持背单词，然后四级终于过了。这让我明白，只有坚持。会有好的结果的。前提是自律。所以我们要保持的自律。始终督促自己向好的方向发展。所以在开学后，在决定考研之后，每天坚持早起，然后学习。虽然很累，但是一定要坚持。而且现在的程度比我的其他的同学根本不值一提。所以才更要更加努力。</p><p>​        在日常生活和工作中，我们要有不畏艰辛的拼搏精神和奉献精神。寒假期间我报名参加了社区的社区的志愿活动，虽然只是个在村口检查过往车辆的行程码和健康码这种微不足道的工作，但是，这种志愿活动让我感到很开心。因为我认为我正在向一个优秀共产党员的方向去靠拢。我体会到了党员的责任。我看到了我们中华民族在面对困难时的荣辱与共，看到了中国共产党能够齐心协力办大事的特质，看到了中国中产党为了人民的幸福平安的生活做出的不懈努力。身为新时代的青年，在党的思想和精神的指引下，我们原意，也有这个责任去为我们的国家、社会做出一些自己的贡献。</p><p>​        以上便是我近期在思想、学习、生活和工作等方面的汇报。在以后的学习和生活中，我会努力学习专业的文化知识、关心时事、努力提升自己，让自己能够可以为国家发展贡献出自己的力量。不断地向党组织靠拢，提升自己的觉悟，在日常生活中做一些自己力所能及的事情去帮助别人。当然，我现在还有许许多多的问题，距离成为一名优秀的共产党员还有很大的差距，希望党组织加强对我的培养和教育。</p>]]></content>
      
      
      <categories>
          
          <category> 思想汇报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思想汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 8 新特性</title>
      <link href="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="java-8"><a href="#java-8" class="headerlink" title="java 8"></a>java 8</h1><h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><blockquote><p>Lambda是一个&#x3D;&#x3D;匿名函数&#x3D;&#x3D;，我们可以把Lambda表达式理解为是一段&#x3D;&#x3D;可以传递的代码（将代码像数据一样传递）&#x3D;&#x3D;。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使java的语言表达能力得到了提升。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Intreger</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span><span class="token class-name">Integer</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Lambda 表达式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如：有个集合存储了员工信息。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如何将员工信息中工资，或年龄大于30的提取出来。</p><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//方式一</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//优化方式二： 匿名内部类</span>   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//优化方式三：Lambda 表达式</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//优化方式四：Stream API</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">filterEmployee</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span><span class="token class-name">MyPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> emps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="Lambda-基础语法"><a href="#Lambda-基础语法" class="headerlink" title="Lambda 基础语法"></a>Lambda 基础语法</h2><blockquote><p>java8 中引入了一个新的操作符“-&gt;” ，该操作符称为箭头操作符或Lambda操作符。</p><p>​箭头操作符将Lambda表达式拆分为两部分。</p><p>左侧：Lambda 表达式中的参数列表</p><p>右侧：Lambda 表达式中所需执行的功能，即Lambda体</p></blockquote><h3 id="语法格式一"><a href="#语法格式一" class="headerlink" title="语法格式一"></a>语法格式一</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式一： 无参数，无返回值</span><span class="token comment">//() -> System.out.println("hello Lambda !");</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda02</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// jdk 1.7 之前。必须是final</span>        <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//System.out.println("hello world!"+ num++);  num++ 就报错。 默认 final int num = 0;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Lambda!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式-三"><a href="#语法格式-三" class="headerlink" title="语法格式 三"></a>语法格式 三</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式二：有一个参数，并且无返回值</span><span class="token comment">// (x) -> System.out.println(x);</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式三"><a href="#语法格式三" class="headerlink" title="语法格式三"></a>语法格式三</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式三：若只有一个参数，并且无返回值，肖括号可以省略不写</span><span class="token comment">// x -> System.out.println(x);</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式四"><a href="#语法格式四" class="headerlink" title="语法格式四"></a>语法格式四</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式五"><a href="#语法格式五" class="headerlink" title="语法格式五"></a>语法格式五</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式五：若Lambda体中只有一条语句。return 和 大括号都可以省略不写。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="语法格式六"><a href="#语法格式六" class="headerlink" title="语法格式六"></a>语法格式六</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为jvm的编译器可以通过上下文推断出，数据类型。即“类型推断”。</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span><span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Lambda-表达式需要“函数式接口”的支持"><a href="#Lambda-表达式需要“函数式接口”的支持" class="headerlink" title="Lambda 表达式需要“函数式接口”的支持"></a>Lambda 表达式需要“函数式接口”的支持</h2><blockquote><p>函数式接口：接口中只有一个抽象方法的接口，称为函数式接口。可以使用注解&#x3D;&#x3D;@FunctionalInterface&#x3D;&#x3D; 修饰</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">-></span> y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">,</span><span class="token class-name">MyFun</span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda03</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先按照年龄排序，再按照姓名排序</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="对字符串进行处理"><a href="#对字符串进行处理" class="headerlink" title="对字符串进行处理"></a>对字符串进行处理</h3><pre class="language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//需求：用于处理字符串</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t\t\t\t\t\t hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">MyFunction</span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="对两个Long型的数据进行处理"><a href="#对两个Long型的数据进行处理" class="headerlink" title="对两个Long型的数据进行处理"></a>对两个Long型的数据进行处理</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span><span class="token class-name">T</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">op</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span> <span class="token operator">-></span> l1 <span class="token operator">+</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">op</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span> <span class="token operator">-></span> l1 <span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求：对于两个long类型的数字进行处理</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">op</span><span class="token punctuation">(</span><span class="token class-name">Long</span> l1<span class="token punctuation">,</span><span class="token class-name">Long</span> l2<span class="token punctuation">,</span><span class="token class-name">MyFunction2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> mf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h2><h3 id="Consumer-消费型接口-void-accept-T-t"><a href="#Consumer-消费型接口-void-accept-T-t" class="headerlink" title="Consumer : 消费型接口( void accept(T t);)"></a>Consumer<T> : 消费型接口( void accept(T t);)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Consumer&lt;T> 消费型接口</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">happy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> money <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happy</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>​     </p><h3 id="Supplier-供给型接口-T-get"><a href="#Supplier-供给型接口-T-get" class="headerlink" title="Supplier : 供给型接口(T get();)"></a>Supplier<T> : 供给型接口(T get();)</h3> <pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Supplier&lt;T> 供给型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numList <span class="token operator">=</span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：产生一些整数，并放入集合中</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Function-lt-T-R-gt-函数型接口-R-apply-T-t"><a href="#Function-lt-T-R-gt-函数型接口-R-apply-T-t" class="headerlink" title="Function &lt;T,R&gt;:  函数型接口(  R apply(T t);)"></a>Function &lt;T,R&gt;:  函数型接口(  R apply(T t);)</h3> <pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Function&lt;T, R> 函数型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t\thello"</span><span class="token punctuation">,</span> str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"成果成大事"</span><span class="token punctuation">,</span> str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：用于处理字符串</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> function<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Predicate-函数型接口（-boolean-test-T-t-）"><a href="#Predicate-函数型接口（-boolean-test-T-t-）" class="headerlink" title="Predicate :  函数型接口（ boolean test(T t);）"></a>Predicate <T>:  函数型接口（ boolean test(T t);）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Predicate&lt;T> 断言型接口</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"ok"</span><span class="token punctuation">,</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token function">filterStr</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//需求：将满足条件的数据放入集合中</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">filterStr</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stringList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><blockquote><p>若Lambda 体中的内容有方法已经实现了，我们可以使用“方法引用”（可以理解为方法引用是Lambda 表达式的另外一种表现形式）</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：</p><p>1，Lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中的抽象方法的函数列表和返回值类型保持一致！</p><p>2，若Lambda  参数列表中的第一参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用ClassName::method</p></blockquote><p>主要有三种语法格式：</p><h3 id="对象-实例方法名"><a href="#对象-实例方法名" class="headerlink" title="对象::实例方法名"></a>对象::实例方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//对象::实例方法名</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>       <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>       consumer2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Hello Lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> employee<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="类-静态方法名"><a href="#类-静态方法名" class="headerlink" title="类::静态方法名"></a>类::静态方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//类::静态方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505082305870.png" alt="image-20220505082305870"></p><h3 id="类-实例方法名"><a href="#类-实例方法名" class="headerlink" title="类::实例方法名"></a>类::实例方法名</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//类::实例方法名</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bp <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bp2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505082346240.png" alt="image-20220505082346240"></p><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>注意：需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致！</p><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> integer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> integer<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//构造器引用</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造器引用</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee2 <span class="token operator">=</span> sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> fun3 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//数组引用</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apply <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fun2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apply2 <span class="token operator">=</span> fun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h2><blockquote><p>Stream是 Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。<br>使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。也可以使用Stream API来并行执行操作。简而言之，Stream API提供了一种高效且易于使用的处理数据的方式。</p></blockquote><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505164354196.png" alt="image-20220505164354196"></p><h3 id="流（Steam-到底是什么？"><a href="#流（Steam-到底是什么？" class="headerlink" title="流（Steam)到底是什么？"></a>流（Steam)到底是什么？</h3><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。&#x3D;&#x3D;“集合讲的是数据，流讲的是计算”。&#x3D;&#x3D;</p><p>注意：</p><ul><li>Steanm 自己不会存储元素</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Steam</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ul><h3 id="Stream-的操作三个步骤"><a href="#Stream-的操作三个步骤" class="headerlink" title="Stream 的操作三个步骤"></a>Stream 的操作三个步骤</h3><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505164909488.png" alt="image-20220505164909488"></p><h4 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h4><p>一个数据源（如：集合、数组），获取一个流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，可以通过Collection 系列集合提供的stream()或parallelStream()</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，通过Arrays 中的静态方法stream() 获取数组流</span><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3，通过Stream类中的静态方法of()</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4，创建无限流</span><span class="token comment">//迭代</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><blockquote><p> 一个中间操作链，对数据源的数据进行处理</p><p> 多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为&#x3D;&#x3D;“惰性求值”。&#x3D;&#x3D;</p></blockquote><pre class="language-none"><code class="language-none">筛选与切片filter-接收Lambda，从流中排除某些元素limit-截断流 ，使其元素不超过给定数量skip(n)-跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补distinct-筛选，通过流所生成元素的hashCode()和equals()去除重复元素</code></pre><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-接收Lambda，从流中排除某些元素    </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//内部迭代：迭代操作由Stream API完成</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//中间操作:不会执行任何操作(定义操作)</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stream API的中间操作！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//终止操作：一次性执行全部内容(执行操作)</span>        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//外部迭代</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>满足条件就打印！</p><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505171439132.png" alt="image-20220505171439132"></p><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-截断流 ，使其元素不超过给定数量</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505172553136.png" alt="image-20220505172553136"></p><h5 id="skip-n"><a href="#skip-n" class="headerlink" title="skip(n)"></a>skip(n)</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//-跳过元素，返回一个扔掉前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//筛选，通过流所生成元素的hashCode()和equals()去除重复元素    </span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="Stream-映射"><a href="#Stream-映射" class="headerlink" title="Stream 映射"></a>Stream 映射</h5><blockquote><p>map—接收Lambda ，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/05/19/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/image-20220505175227066.png" alt="image-20220505175227066"></p><blockquote><p>flatMap—接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">TestStreamApi03</span><span class="token operator">::</span><span class="token function">filterCharacter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> characterStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">TestStreamApi03</span><span class="token operator">::</span><span class="token function">filterCharacter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> <span class="token function">filterCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Character</span> ch <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h5 id="中间排序"><a href="#中间排序" class="headerlink" title="中间排序"></a>中间排序</h5><p>sorted() - 自然排序(Comparable)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre><p>sorted(Comparator com) – 定制排序(Comparator)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="终止操作（终端操作）"><a href="#终止操作（终端操作）" class="headerlink" title="终止操作（终端操作）"></a>终止操作（终端操作）</h4><p>一个终止操作，执行中间操作链，并产生结果</p><h5 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5><blockquote><pre class="language-none"><code class="language-none">&#x2F;*    allMatch—检查是否匹配所有元素anyMatch——检查是否至少匹配一个元素noneMatch—检查是否没有匹配所有元素findFirst——返回第一个元素findAny——返回当前流中的任意元素count——返回流中元素的总个数max——返回流中最大值min——返回流中最小值*&#x2F;</code></pre></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">"王五wu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">"赵刘"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"田七"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> any <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>any<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h5><blockquote><p>reduce(T identity,BinaryOperator) &#x2F;reduce(BinaryOperator) – 可以将流中的元素反复结合起来，得到一个值</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//reduce  归约</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reduce1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h5><blockquote><p>collect–将流转换成其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法。</p><p>Collector接口中的方法的实现决定了如何对流执行收集操作（如收集到List、set、Map)。但是&#x3D;&#x3D;Collectors&#x3D;&#x3D;使用类提供了很多静态的方法，可以方便的创建常见收集器实例。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//总数</span>    <span class="token class-name">Long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//平均值</span>    <span class="token class-name">Double</span> avg <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//总和</span>    <span class="token class-name">Double</span> sum <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最大值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最小值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//收集</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集到指定的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多级分组</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token string">"青年"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token string">"中年"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"==="</span><span class="token punctuation">,</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DoubleSummaryStatistics</span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="并行流和顺序流"><a href="#并行流和顺序流" class="headerlink" title="并行流和顺序流"></a>并行流和顺序流</h2><blockquote><p>并行流就是把一个内容分成多个数据快，并用不同的线程分别处理每个数据块的流。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 学习笔记</title>
      <link href="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p>MQ（Message Quene）：消息队列，通过典型的生产者和消费者模型不断向消息队列中生产消息，消费者不断从队列中获取消息。因为消息的生产和消费是异步的，而且只关系消息的发送和接收，没有业务逻辑的侵入，轻松地实现系统间解耦。别名为消息中间件，通过利用高效可靠的消息传递机制进行平台无关的数据交流，并给予数据通信进行分布式系统的集成。</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><p>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:<br><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085612216.png" alt="image-20220518085612216"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220518085548646.png" alt="image-20220518085548646"></p><h3 id="不同MQ特点："><a href="#不同MQ特点：" class="headerlink" title="不同MQ特点："></a>不同MQ特点：</h3><ul><li>ActiveMQ：是Apache出品，是最流行，能力强劲的开源消息总线。它是一个完全支持JMS规范的消息中间件。有丰富的API，多种集群架构模式让ActiveMQ称为老牌成熟的消息中间件，中小企业使用广泛</li><li>Kafka：是LinkedIn开源的分布式发布-订阅消息系统，目前属于Apache顶级项目。主要特点是基于Pull的模式处理消息消费，追求吞吐量。一开始的目的就是用于日志收集和传输，0.8版本之后开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务</li><li>RocketMQ：是阿里开源的消息中间件，纯java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ起源于Kafka，对消息的可靠传输及事务性做了优化，在阿里被广泛用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景</li><li>RabbitMQ：使用Erlang语言开发的消息队列系统。基于AMQP协议来实现。主要特征是面向消息、队列、路由(包括点对点和发布&#x2F;订阅)、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求在其次。</li></ul><blockquote><p><a href="https://so.csdn.net/so/search?q=RabbitMQ&spm=1001.2101.3001.7020">RabbitMQ</a>比Kafka更可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性(少量延迟)，可靠性(少量丢失数据)要求稍低的场景使用，比如ELK日志收集</p></blockquote><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><blockquote><p><a href="https://www.rabbitmq.com/">RabbitMQ官网</a></p><p><a href="https://www.rabbitmq.com/news.html">RabbitMQ下载</a> (注意与erlang版本对应关系)</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">Releases · rabbitmq&#x2F;rabbitmq-server (github.com)</a></p><p><a href="https://github.com/rabbitmq/erlang-rpm/releases">Releases · rabbitmq&#x2F;erlang-rpm (github.com)</a></p></blockquote><pre class="language-java" data-language="java"><code class="language-java"># <span class="token number">1.</span>将安装包上传到服务器erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">2.</span>安装erlang依赖包yum install <span class="token operator">-</span>y erlang<span class="token operator">-</span><span class="token number">23.3</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm# <span class="token number">3.</span>安装rabbitmqyum install <span class="token operator">-</span>y rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">3.8</span><span class="token number">.13</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm# <span class="token number">4.</span>配置文件#见下方配置文件说明# <span class="token number">5.</span>修改配置文件loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span># <span class="token number">6.</span>启动rabbitmq中的插件管理rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management# <span class="token number">7.</span>启动rabbitmqsystemctl start rabbitmq<span class="token operator">-</span>server # 启动rabbitmq服务systemctl restart rabbitmq<span class="token operator">-</span>server # 重启服务systemctl stop rabbitmq<span class="token operator">-</span>server  # 停止服务# <span class="token number">8.</span>查看rabbitmq状态systemctl status rabbitmq<span class="token operator">-</span>server# <span class="token number">9.</span>访问rabbitmq的web管理界面#开放端口访问firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">15672</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanentfirewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reloadhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.232</span><span class="token number">.134</span><span class="token operator">:</span><span class="token number">15672</span><span class="token operator">/</span>  #访问# <span class="token number">10.</span>初始登录guest guest</code></pre><blockquote><p>rabbitmq-server-3.8.13配置文件</p><p>安装之后&#x2F;etc&#x2F;rabbitmq&#x2F;目录下没有rabbitmq的配置文件，在&#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.8.13&#x2F;目录下也没有提供配置文件模板</p><p>可以到github上下载将其拷贝到目录下</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs">https://github.com/rabbitmq/rabbitmq-server/tree/v3.8.x/deps/rabbit/docs</a></p><p>因为没有多少配置，此处直接在&#x2F;etc&#x2F;rabbitmq&#x2F;目录下新建rabbit.conf，添加</p><pre class="language-java" data-language="java"><code class="language-java">loopback_users<span class="token punctuation">.</span>guest <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><p>我个人使用这个：<a href="https://blog.csdn.net/weixin_40584261/article/details/106826044">https://blog.csdn.net/weixin_40584261/article/details/106826044</a></p></blockquote><p>登录成功显示：</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h2><p>web界面连接rabbitmq端口：15672</p><p>java连接rabbitmq端口：5672</p><h3 id="RabbitMQ管理命令行"><a href="#RabbitMQ管理命令行" class="headerlink" title="RabbitMQ管理命令行"></a>RabbitMQ管理命令行</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1,服务启动相关</span>systemctl start <span class="token operator">|</span> restart <span class="token operator">|</span> stop <span class="token operator">|</span> status rabbitmq-server<span class="token comment">#2,管理命令行 用来在不适用web管理界面情况下操作RabbitMQ</span>rabbitmq <span class="token builtin class-name">help</span> 可以查看更多命令<span class="token comment">#3，插件管理命令行</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> <span class="token operator">|</span> list <span class="token operator">|</span> disable</code></pre><h3 id="web管理界面介绍"><a href="#web管理界面介绍" class="headerlink" title="web管理界面介绍"></a>web管理界面介绍</h3><h4 id="导航栏介绍"><a href="#导航栏介绍" class="headerlink" title="导航栏介绍"></a>导航栏介绍</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206292.png" alt="在这里插入图片描述"></p><h4 id="常见概念："><a href="#常见概念：" class="headerlink" title="常见概念："></a>常见概念：</h4><blockquote><p>Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。</p><p>Virtual Host：虚拟主机，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host</p><p>Connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才能完成消息的生产和消费，在这里可以查看连接情况。对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。</p><p>Channels：通道，建立连接后会形成通道，消息的传递获取依赖于通道</p><p>Exchanges：交换机，用来实现消息的路由。接收生产者发送的消息，并根据一定规则将消息路由给服务器中的队列</p><p>Message Queues：消息队列，消息存放在队列中，等待消费，消费后被移除队列</p><p>Message：由Header和Body组成。Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。</p></blockquote><h4 id="Admin用户管理和虚拟主机管理"><a href="#Admin用户管理和虚拟主机管理" class="headerlink" title="Admin用户管理和虚拟主机管理"></a>Admin用户管理和虚拟主机管理</h4><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206293.png" alt="在这里插入图片描述"></p><h5 id="Tags选项用户可选类型"><a href="#Tags选项用户可选类型" class="headerlink" title="Tags选项用户可选类型"></a>Tags选项用户可选类型</h5><ul><li>Admin：超级管理员，可登录管理控制台，可查看所有信息，并且可以对用户，策略(policy)进行操作</li><li>Monitoring：监控者，可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li>Policymaker：策略制定者，可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)</li><li>Management：普通管理者， 仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理</li><li>其他：无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h5 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h5><p>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206304.png" alt="在这里插入图片描述"></p><h5 id="绑定虚拟主机和用户"><a href="#绑定虚拟主机和用户" class="headerlink" title="绑定虚拟主机和用户"></a>绑定虚拟主机和用户</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfbGV0dGVy,size_16,color_FFFFFF,t_70-16528347206305.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ支持的消息模型"><a href="#RabbitMQ支持的消息模型" class="headerlink" title="RabbitMQ支持的消息模型"></a>RabbitMQ支持的消息模型</h2><blockquote><p><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p></blockquote><p>添加端口访问：</p><blockquote><p>firewall-cmd –add-port&#x3D;5672&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;15672&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>firewall-cmd –list-all</p></blockquote><p>rabbitmq依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="第一种模型（直连）"><a href="#第一种模型（直连）" class="headerlink" title="第一种模型（直连）"></a>第一种模型（直连）</h3><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117142437407.png" alt="image-20220117142437407"></p><p>在上图的模型中，有以下概念：</p><ul><li>P:生产者，也就是要发送消息的程序</li><li>C:消费者：消息的接收者，会一直等待消息的到来</li><li>queue:消息队列，图中红色的部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h4 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *发布消息         * 参数1； exchange    交换机名称         * 参数2： routinqKey   队列名称         * 参数3：传递消息额外设置         * 参数4：消息的具体内容         */</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将队列中的消息持久化</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2.开发消费者"></a>2.开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接mq的连接工厂对象</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接rabbitmq的主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置端口号</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置连接哪个虚拟主机</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置访问虚拟主机的用户名和密码</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">creatChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*         *消费消息         * 参数1：消费那个队列的消息  队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//最后一个参数：消息队列中取出的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new String(body) = "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3,参数的说明"></a>3,参数的说明</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*         * 通道绑定对应的消息队列         * 参数一：queue       队列名称，如果队列不存在自动创建         * 参数二：durable     用来定义队列特性是否要持久化  true 持久化队列  false 不持久化         * 参数三：exclusive   是否独占队列 true 独占  false 不独占         * 参数四：autoDelete  是否在消费完成后自动删除队列，   true 自动删除   false  不自动删除         * 参数五：arguments   额外附加参数         */</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第二种模型（work-queue）"><a href="#第二种模型（work-queue）" class="headerlink" title="第二种模型（work queue）"></a>第二种模型（work queue）</h3><p>Work queues ，也被称为（Task queues），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时可以使用work模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117145602393.png" alt="image-20220117145602393"></p><p>角色：</p><ul><li>P:生产者：任务的发布者</li><li>C1:消费者：领取任务并且完成任务，假设完成任务速度较慢</li><li>C2:消费者2：领取任务并且完成任务，假设完成速度快</li></ul><h4 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"====>:MSG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152604409.png" alt="image-20220117152604409"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117152617846.png" alt="image-20220117152617846"></p><blockquote><p>总结：默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</p></blockquote><h4 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5,消息自动确认机制"></a>5,消息自动确认机制</h4><blockquote><p>​Doing a taskcan tale a few seconds.Ylou may wonder what happens if one of the consumers starts a longtask and dies with itonly partly done. .ith our curent code, once<br>Rabitue delvesamessageto the consume it imeditely marks it fordeleton. n thiscase,f y il aworker we il lose the message itwas just processing W ell alse lose al themessages that were dispatched to this particular worker but were not yet handled.<br>​But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一次只接受一条未确认的消息</span><span class="token comment">//参数2：关闭自动确认消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者-1："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//手动确认消息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>这是通道一次只能消费一个消息</li><li>关闭消息的自动确认。开启手动确认消息。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154610522.png" alt="image-20220117154610522"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154621828.png" alt="image-20220117154621828"></p><h3 id="第三种模型（fanout）"><a href="#第三种模型（fanout）" class="headerlink" title="第三种模型（fanout）"></a>第三种模型（fanout）</h3><p><font color="red">fanout 也称为广播</font></p><p>Putting it all together</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117154957193.png" alt="image-20220117154957193"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个消费者。</li><li>每个消费者有自己的queue（队列）。</li><li>每个队列都要绑定到Exchange（交换机）。</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。</li><li>交换机把消息发送给绑定过的所有队列。</li><li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费。</li></ul><h4 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//广播 一条消息多个消费者同时消费</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2.开发消费者 -1"></a>2.开发消费者 -1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3.开发消费者 -2"></a>3.开发消费者 -2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4,开发消费者-3"></a>4,开发消费者-3</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通道绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时队列</span><span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定交换机和队列</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5,测试结果"></a>5,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161350681.png" alt="image-20220117161350681"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161404352.png" alt="image-20220117161404352"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161420304.png" alt="image-20220117161420304"></p><h3 id="第四种模型（route）"><a href="#第四种模型（route）" class="headerlink" title="第四种模型（route）"></a>第四种模型（route）</h3><h4 id="1-Routing之订阅模型-Direct"><a href="#1-Routing之订阅模型-Direct" class="headerlink" title="1,Routing之订阅模型-Direct"></a>1,Routing之订阅模型-Direct</h4><p><font color="orange">在Fanout模式中，一条消息，会被所有订阅的队列消费。但是，在某种场景下，我们希望不同的消息被不同的队列消费。这是就要用到Direct类型的Exchange。</font></p><p>在Direct模型中：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是指定一个RoutingKey（路由Key）。</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的RoutingKey。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会接收到消息。</p><p>流程：</p></li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117161449322.png" alt="image-20220117161449322"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X: Exchange(交换机)，在接收生产者的消息，然后把消息递交给routing key完全匹配的队列。</li><li>C1:消费者，其所在队列指定了需要routing key为error的消息</li><li>C2:消费者，其所在队列指定了需要routing key为info、error、warning的消息</li></ul><h4 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机 参数1：交换机名称  参数2：交换机类型  基于指令的RoutingKey转发</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>#发布消息channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"指定的route key"</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2,开发消费者-1"></a>2,开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过通道去声明交换机以及交换的类型</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于route key 绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///获取消费的信息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4,测试结果"></a>4,测试结果</h4><h5 id="发布info消息"><a href="#发布info消息" class="headerlink" title="发布info消息"></a>发布info消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165459262.png" alt="image-20220117165459262"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165508443.png" alt="image-20220117165508443"></p><h5 id="发布error消息"><a href="#发布error消息" class="headerlink" title="发布error消息"></a>发布error消息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165633333.png" alt="image-20220117165633333"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165642971.png" alt="image-20220117165642971"></p><h5 id="发布没有绑定的"><a href="#发布没有绑定的" class="headerlink" title="发布没有绑定的"></a>发布没有绑定的</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165726987.png" alt="image-20220117165726987"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117165735835.png" alt="image-20220117165735835"></p><h3 id="第五种模型-Routing之订阅模式-Topic"><a href="#第五种模型-Routing之订阅模式-Topic" class="headerlink" title="第五种模型 Routing之订阅模式-Topic"></a>第五种模型 Routing之订阅模式-Topic</h3><p>Topic类型的Exchange与Direct相比，都是可以根据Routingkey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候使用通配符!这种模型Routingkey一般都是由一个或多个单词组成，多个单词之间以””分割，例如: item.insert</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220117170033173.png" alt="image-20220117170033173"></p><pre class="language-java" data-language="java"><code class="language-java"># 通配符<span class="token operator">*</span> <span class="token punctuation">(</span>star<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> exactly one word       匹配不多不少恰好一个单词<span class="token operator">*</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> zero or more word      匹配一个或多个词# 如    audit<span class="token punctuation">.</span>#           匹配audit<span class="token punctuation">.</span>irs<span class="token punctuation">.</span>corporate 或者audit<span class="token punctuation">.</span>irs等    audit<span class="token punctuation">.</span>*           只能匹配audit<span class="token punctuation">.</span>irs</code></pre><h4 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//生命交换机和交换机类型 topic 使用动态路由（通配符方式）</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> routeKey <span class="token operator">=</span> <span class="token string">"user.save"</span><span class="token punctuation">;</span>    <span class="token comment">//动态路由</span></code></pre><h4 id="2，开发消费者-1"><a href="#2，开发消费者-1" class="headerlink" title="2，开发消费者-1"></a>2，开发消费者-1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3,开发消费者-2"></a>3,开发消费者-2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机以及交换类型 topic</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机  动态通配符形式route key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重量级资源，类加载执行h之后执行一次。</span>        connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq的主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.200.130"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义提供连接对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭通道和关闭连接工具方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnectionAndChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Springboot-集成-RabbitMQ"><a href="#Springboot-集成-RabbitMQ" class="headerlink" title="Springboot 集成 RabbitMQ"></a>Springboot 集成 RabbitMQ</h2><h3 id="搭建初始环境"><a href="#搭建初始环境" class="headerlink" title="搭建初始环境"></a>搭建初始环境</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1,引入依赖"></a>1,引入依赖</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--rabbitmq 集成的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2,配置配置文件"></a>2,配置配置文件</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.200.130    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> ems    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /ems</code></pre><p><font color="orange">RabbitTemplate</font>用来简化操作，使用的时候，直接在项目中注入即可使用。</p><h3 id="第一种Hello-world模型使用"><a href="#第一种Hello-world模型使用" class="headerlink" title="第一种Hello world模型使用"></a>第一种Hello world模型使用</h3><h4 id="1-开发生产者-5"><a href="#1-开发生产者-5" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//hello world</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>durable <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">,</span>autoDelete <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> helloCustomer <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receivel</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118133734854.png" alt="image-20220118133734854"></p><h3 id="第二种work模型的使用"><a href="#第二种work模型的使用" class="headerlink" title="第二种work模型的使用"></a>第二种work模型的使用</h3><h4 id="1-开发生产者-6"><a href="#1-开发生产者-6" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//work 模型</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"work 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-2"><a href="#2-开发消费者-2" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//一个消费者</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-1"><a href="#3-测试结果-1" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134030447.png" alt="image-20220118134030447"></p><h3 id="第三种fanout（广播）模型使用"><a href="#第三种fanout（广播）模型使用" class="headerlink" title="第三种fanout（广播）模型使用"></a>第三种fanout（广播）模型使用</h3><h4 id="1-开发生产者-7"><a href="#1-开发生产者-7" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//fanout 广播</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"fanout 模型！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-3"><a href="#2-开发消费者-3" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token comment">//绑定的交换机</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试的结果"><a href="#3-测试的结果" class="headerlink" title="3,测试的结果"></a>3,测试的结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134317791.png" alt="image-20220118134317791"></p><h3 id="第四种Route模型"><a href="#第四种Route模型" class="headerlink" title="第四种Route模型"></a>第四种Route模型</h3><h4 id="1-开发生产者-8"><a href="#1-开发生产者-8" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 路由模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"发送info的key 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-4"><a href="#2-开发消费者-4" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"warn"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>    <span class="token comment">//创建临时队列</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//指定交换机名称和类型</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-2"><a href="#3-测试结果-2" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><h5 id="error信息"><a href="#error信息" class="headerlink" title="error信息"></a>error信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134531098.png" alt="image-20220118134531098"></p><h5 id="info信息"><a href="#info信息" class="headerlink" title="info信息"></a>info信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134602104.png" alt="image-20220118134602104"></p><h5 id="warn信息"><a href="#warn信息" class="headerlink" title="warn信息"></a>warn信息</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118134644195.png" alt="image-20220118134644195"></p><h3 id="第五种Topic模型"><a href="#第五种Topic模型" class="headerlink" title="第五种Topic模型"></a>第五种Topic模型</h3><h4 id="1-开发生产者-9"><a href="#1-开发生产者-9" class="headerlink" title="1,开发生产者"></a>1,开发生产者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注入rabbitmqTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">// route 动态路由 订阅模式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user.save 的路由信息！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-开发消费者-5"><a href="#2-开发消费者-5" class="headerlink" title="2,开发消费者"></a>2,开发消费者</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.save"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 1 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"order.#"</span><span class="token punctuation">,</span><span class="token string">"produce.*"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message 2 : "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-测试结果-3"><a href="#3-测试结果-3" class="headerlink" title="3,测试结果"></a>3,测试结果</h4><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118143907267.png" alt="image-20220118143907267"></p><h2 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><font color ="orange">场景说明：用户注册后，需要发送注册邮件和注册短信，传统的做法有两种： 1，串行的方式；2，并行的方式</font></p><ul><li><font color="orange">串行方式：</font>将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144429472.png" alt="image-20220118144429472"></p><ul><li><font color="orange">并行方式：</font>将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的事件。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144556401.png" alt="image-20220118144556401"></p><ul><li><font color = "orange">消息队列：</font>·假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并行已经提高的处理时间,但是前面说过邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功应该是写入数据库后就返回．<font color = "orange">消息队列：</font>引入消息队列后，把发送邮件短信不是必须的业务逻辑异步处理</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118144854793.png" alt="image-20220118144854793"></p><blockquote><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间（可以忽略不计），引入消息队列后处理后，响应时间是串行的三倍，是并行的两倍。</p></blockquote><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><font color="orange">场景：双十一，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口。</font></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145133031.png" alt="image-20220118145133031"></p><p>这种做法有一个缺点：</p><p>当库存系统出现故障时，订单就会失败。订单系统和库存系统高耦合，引入消息队列。</p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118145230792.png" alt="image-20220118145230792"></p><ul><li><font color = "orange">订单系统：</font>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。</li><li><font color = "orange">库存系统：</font>订阅下单的消息，获取下单的消息，进行库操作。就算库存系统出现故障，消息队列能保证消息的可靠投递，不会导致消息的丢失。</li></ul><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p><font color = "orange">场景：</font>秒杀活动，一般会因为流量过大，导致应用挂掉，为解决这个问题，一般在应用前端加入消息队列。</p><p><font color = "orange">作用：</font></p><ul><li>可以控制活动人数，超过此一定阈值的订单直接丢弃。</li><li>可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)。</li></ul><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118150245500.png" alt="image-20220118150245500"></p><blockquote><p>1，用户的请求，服务器收到之后，首先写入消息队列，假如消息队列长度超过最大值，则直接抛弃用户请求或跳转到错误页面。</p><p>2，秒杀业务根据消息队列中的请求信息，再做后续处理。</p></blockquote><h2 id="RabbiMQ的集群"><a href="#RabbiMQ的集群" class="headerlink" title="RabbiMQ的集群"></a>RabbiMQ的集群</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><h4 id="普通集群（副本集群）"><a href="#普通集群（副本集群）" class="headerlink" title="普通集群（副本集群）"></a>普通集群（副本集群）</h4><blockquote><p>All data&#x2F;state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this message queues,which by default reside on one node,though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster  –摘自官网</p></blockquote><p><font color = "orange">默认情况下：RabbitMQ代理操作所需的所有数据&#x2F;状态都将跨所有节点复制，这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</font></p><h5 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1, 架构图"></a>1, 架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220118151113890.png" alt="image-20220118151113890"></p><p>核心解决问题：<font color = "orange">当集群中某一时刻master节点宕机，可以对Queue中信息，进行备份。</font></p><h5 id="2-集群搭建"><a href="#2-集群搭建" class="headerlink" title="2, 集群搭建"></a>2, 集群搭建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.集群规划</span>    node1: <span class="token number">192.168</span>.200.130  mq1 master  主节点    node2: <span class="token number">192.168</span>.200.131  mq2 repl1  副本节点    node3: <span class="token number">192.168</span>.200.132  mq3 repl2  副本节点<span class="token comment"># 1,克隆三台机器主机名和ip映射</span><span class="token function">vim</span> /etc/hosts 加入：<span class="token number">192.168</span>.200.130  mq1<span class="token number">192.168</span>.200.131  mq2<span class="token number">192.168</span>.200.132  mq3node1: <span class="token function">vim</span> /etc/hostname 加入: mq1node2: <span class="token function">vim</span> /etc/hostname 加入: mq2node3: <span class="token function">vim</span> /etc/hostname 加入: mq3<span class="token comment">#2,三个机器安装rabbitmq，并同步cookie文件，在node1上执行：</span><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/<span class="token comment">#3,查看cookie是否一致</span>node1: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode2: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookienode3: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie<span class="token comment">#4,后台启动rabbitmq所有节点执行如下命令，启动成功访问管理界面：</span>rabbitmq-server -detached<span class="token comment">#5,在node2和node3执行加入集群命令：</span><span class="token number">1</span>,关闭               rabbitmqctl stop_app<span class="token number">2</span>,加入集群           rabbitmqctl join_cluster rabbit@mq1<span class="token number">3</span>,启动服务           rabbitmqctl start_app<span class="token comment">#6,查看集群状态，任意节点执行：</span>rabbitmqctl cluster_status<span class="token comment">#7,如果出现如下显示，汲取搭建成功：</span> Cluster status of <span class="token function">node</span> rabbit@mq3 <span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>nodes,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>disc,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>running_nodes,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>cluster_name,<span class="token operator">&lt;&lt;</span><span class="token string">"rabbit@mq1"</span><span class="token operator">>></span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>partitions,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>alarms,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>rabbit@mq1,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq2,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq3,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 8,登录管理界面，展示如下状态：</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220523140558358.png" alt="image-20220523140558358"></p><h6 id="测试集群在node1上，创建队列"><a href="#测试集群在node1上，创建队列" class="headerlink" title="测试集群在node1上，创建队列"></a>测试集群在node1上，创建队列</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h6 id="查看node2和node3节点"><a href="#查看node2和node3节点" class="headerlink" title="查看node2和node3节点"></a>查看node2和node3节点</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206337.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206338.png" alt="在这里插入图片描述"></p><h6 id="关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3"><a href="#关闭node1节点，执行（rabbitmqctl-stop-app-，查看node2和node3" class="headerlink" title="关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3"></a>关闭node1节点，执行（rabbitmqctl stop_app)，查看node2和node3</h6><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-16528347206339.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063310.png" alt="在这里插入图片描述"></p><h4 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes.<br>–摘自官网<br>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</p></blockquote><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center-165283472063311.png" alt="在这里插入图片描述"></p><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.策略说明</span>rabbitmqctl set_policy <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>vhost<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--priority <span class="token operator">&lt;</span>priority<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--apply-to <span class="token operator">&lt;</span>apply-to<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>definition<span class="token operator">></span>-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name:     policy的名称Pattern: queue的匹配模式<span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-modeha-mode:指明镜像队列的模式，有效值为 all/exactly/nodesall：表示在集群中所有的节点上进行镜像exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定ha-params：ha-mode模式需要用到的参数ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual              priority：可选参数，policy的优先级                             <span class="token comment"># 1.查看当前策略</span>rabbitmqctl list_policies<span class="token comment"># 2.添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hello'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> 说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列<span class="token comment"># 3.删除策略</span>rabbitmqctl clear_policy ha-all<span class="token comment"># 4.测试集群</span></code></pre><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063312.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063313.png" alt="在这里插入图片描述"></p><p><img src="/2022/05/18/RabbitMQ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70-165283472063314.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop 大数据集群的搭建以及使用</title>
      <link href="/2022/05/16/hadoop/"/>
      <url>/2022/05/16/hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-hadoop集群搭建及使用"><a href="#1-hadoop集群搭建及使用" class="headerlink" title="1.hadoop集群搭建及使用"></a>1.hadoop集群搭建及使用</h1><h2 id="1-集群规划；"><a href="#1-集群规划；" class="headerlink" title="(1).集群规划；"></a>(1).集群规划；</h2><p><img src="/2022/05/16/hadoop/image-20220516121650308.png" alt="image-20220516121650308"></p><h2 id="2-虚拟机准备；"><a href="#2-虚拟机准备；" class="headerlink" title="(2).虚拟机准备；"></a>(2).虚拟机准备；</h2><h3 id="1、创建虚拟机（具体步骤不再展示）；"><a href="#1、创建虚拟机（具体步骤不再展示）；" class="headerlink" title="1、创建虚拟机（具体步骤不再展示）；"></a>1、创建虚拟机（具体步骤不再展示）；</h3><p><img src="/2022/05/16/hadoop/image-20220516121741768.png" alt="image-20220516121741768"> </p><h3 id="2-、配置网络；"><a href="#2-、配置网络；" class="headerlink" title="2 、配置网络；"></a>2 、配置网络；</h3><h4 id="ping外网：ping-baidu-com"><a href="#ping外网：ping-baidu-com" class="headerlink" title="ping外网：ping baidu.com"></a>ping外网：ping baidu.com</h4><p><img src="/2022/05/16/hadoop/image-20220516121747924.png" alt="image-20220516121747924"> </p><h4 id="如果ping不通"><a href="#如果ping不通" class="headerlink" title="如果ping不通"></a>如果ping不通</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改如下文件：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121754932.png" alt="image-20220516121754932"> </p><h4 id="重启网络服务："><a href="#重启网络服务：" class="headerlink" title="重启网络服务："></a>重启网络服务：</h4><p>service network restart</p><p><img src="/2022/05/16/hadoop/image-20220516121802380.png" alt="image-20220516121802380"> </p><h4 id="配置静态IP："><a href="#配置静态IP：" class="headerlink" title="配置静态IP："></a>配置静态IP：</h4><p>打开VMware-&gt;编辑-&gt;虚拟机网络编辑器</p><p><img src="/2022/05/16/hadoop/image-20220516121810372.png" alt="image-20220516121810372"> </p><p><img src="/2022/05/16/hadoop/image-20220516121816889.png" alt="image-20220516121816889"> </p><p><img src="/2022/05/16/hadoop/image-20220516121824390.png" alt="image-20220516121824390"> </p><p>查看IP：ip addr</p><p><img src="/2022/05/16/hadoop/image-20220516140004855.png" alt="image-20220516140004855"> </p><h4 id="修改网卡的配置文件"><a href="#修改网卡的配置文件" class="headerlink" title="修改网卡的配置文件"></a>修改网卡的配置文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#修改并添加：（IP为静态）</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.132<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.246.2</code></pre><p>如图所示</p><p><img src="/2022/05/16/hadoop/image-20220516121832458.png" alt="image-20220516121832458"> </p><p>重启网络服务：service network restart</p><p>ping外网（查看是否可以ping通）：ping baidu.com </p><h3 id="3-克隆两台上述已配置的虚拟机；"><a href="#3-克隆两台上述已配置的虚拟机；" class="headerlink" title="3).克隆两台上述已配置的虚拟机；"></a>3).克隆两台上述已配置的虚拟机；</h3><p>关闭虚拟机：</p><p><img src="/2022/05/16/hadoop/image-20220516121836984.png" alt="image-20220516121836984"> </p><p>点击下一页，</p><p>选择克隆类型时，创建完整克隆：</p><p><img src="/2022/05/16/hadoop/image-20220516121842574.png" alt="image-20220516121842574"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打开第二、三台虚拟机，进入：</span><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens-33<span class="token comment">#更改</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.133  <span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.246.134</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121847510.png" alt="image-20220516121847510"> </p><p>重启网络服务并查看是否可以ping通外网。</p><h2 id="3-修改主机名；"><a href="#3-修改主机名；" class="headerlink" title="(3).修改主机名；"></a>(3).修改主机名；</h2><p>查看主机名：hostname</p><p>修改第一台主机名：sudo hostnamectl set-hostname hadoop1</p><p><img src="/2022/05/16/hadoop/image-20220516121854101.png" alt="image-20220516121854101"> </p><p>修改第二台主机名：sudo hostnamectl set-hostname hadoop2</p><p><img src="/2022/05/16/hadoop/image-20220516121858625.png" alt="image-20220516121858625"> </p><p>修改第三台主机名：sudo hostnamectl set-hostname hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121903823.png" alt="image-20220516121903823"> </p><p>三台都要修改ip与主机名的映射：sudo vi &#x2F;etc&#x2F;hosts</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加：</span><span class="token number">192.168</span>.246.132 hadoop1<span class="token number">192.168</span>.246.134 hadoop2<span class="token number">192.168</span>.246.133 hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121908682.png" alt="image-20220516121908682"> </p><p>重启虚拟机生效：reboot</p><h2 id="4-配置免密登录"><a href="#4-配置免密登录" class="headerlink" title="(4).配置免密登录"></a>(4).配置免密登录</h2><p>在hadoop1机器上操作：ssh-keygen -t rsa</p><p>执行命令后，连续敲击三次回车键，生成公钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拷贝公钥：</span>ssh-copy-id hadoop1ssh-copy-id hadoop2ssh-copy-id hadoop3</code></pre><p>由于我已拷贝过，所以显示已存在</p><p><img src="/2022/05/16/hadoop/image-20220516121913155.png" alt="image-20220516121913155"> </p><p>进入hadoop2、hadoop3同样操作，实现可以使用ssh hadoop2、ssh hadoop3，不需要密码就能进入hadoop2、hadoop3</p><p><img src="/2022/05/16/hadoop/image-20220516121917445.png" alt="image-20220516121917445"> </p><h2 id="5-编写分发脚本；"><a href="#5-编写分发脚本；" class="headerlink" title="(5).编写分发脚本；"></a>(5).编写分发脚本；</h2><p>输入：rsync –help</p><p><img src="/2022/05/16/hadoop/image-20220516121922280.png" alt="image-20220516121922280"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#三台虚拟机安装rsync命令：</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">rsync</span> -y<span class="token comment">#rsync与scp区别：用rsync做文件的复制比scp快，rsync只对差异文件作更新</span><span class="token comment">#在主目录创建bin目录：</span><span class="token function">mkdir</span> ~/bin<span class="token comment">#创建分发脚本脚本：</span><span class="token function">vim</span> ~/bin/xsync</code></pre><p>脚本内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash </span><span class="token comment">#1. 判断参数个数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> Not Enough Arguement<span class="token operator">!</span>    <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#2. 遍历集群所有机器</span><span class="token comment">#注意，如果你的主机名命名和我不一样，下面这三个更换成你的主机名</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3<span class="token keyword">do</span>     <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>  <span class="token variable">$host</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>        <span class="token comment">#3. 遍历所有目录，挨个发送</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span>    <span class="token keyword">do</span>    <span class="token comment">#4 判断文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>             <span class="token comment">#5. 获取父目录</span>                <span class="token assign-left variable">pdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> -P <span class="token punctuation">$(</span>dirname $file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>                <span class="token assign-left variable">fname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $file<span class="token variable">)</span></span>                <span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">"mkdir -p <span class="token variable">$pdir</span>"</span>                <span class="token function">rsync</span> -av <span class="token variable">$pdir</span>/<span class="token variable">$fname</span> <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>            <span class="token keyword">else</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$file</span> does not exists<span class="token operator">!</span>                        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span>    </code></pre><p><img src="/2022/05/16/hadoop/image-20220516121927761.png" alt="image-20220516121927761"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改权限：</span><span class="token function">chmod</span> +x ~/bin/xsync<span class="token comment">#测试：把xsync命令发送到hadoop2、hadoop3</span><span class="token comment">#进入目录：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#将xsync脚本发送到hadoop2、hadoop3：</span>xsync xsync</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121932285.png" alt="image-20220516121932285"> </p><h2 id="6-安装JDK"><a href="#6-安装JDK" class="headerlink" title="(6).安装JDK;"></a>(6).安装JDK;</h2><p>进入官网下载匹配的jdk8安装包，上传至linux：cd</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> soft<span class="token function">mkdir</span> installfile<span class="token builtin class-name">cd</span> ~/installfile</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121937403.png" alt="image-20220516121937403"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压：</span><span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz.crdownload -C ~/soft<span class="token comment">#切换到soft目录下：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s jdk1.8.0_281 jdk</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121942242.png" alt="image-20220516121942242"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=~</span>/soft/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="token variable">$&#123;JRE_HOME&#125;</span>/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516121946353.png" alt="image-20220516121946353"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>java -version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121950307.png" alt="image-20220516121950307"> </p><p>进入hadoop2、hadoop3按照上述步骤配置jdk、环境变量并验证</p><h2 id="7-安装hadoop"><a href="#7-安装hadoop" class="headerlink" title="(7).安装hadoop"></a>(7).安装hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至installfile目录解压hadoop安装包：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下</span><span class="token function">tar</span> -zxvf hadoop-3.1.3.tar.gz -C ~/soft<span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121954599.png" alt="image-20220516121954599"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516121958454.png" alt="image-20220516121958454"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122002381.png" alt="image-20220516122002381"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入hadoop配置目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span class="token comment">#在hadoop-env.sh中配置JAVA_HOME路径：</span><span class="token function">vi</span> hadoop-env.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122006516.png" alt="image-20220516122006516"> </p><p>配置core-site.xml：vi core-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Abase for other temporary directories.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token comment">&lt;!-- hadoop1的内网IP地址 --></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 指定NameNode的地址 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122011920.png" alt="image-20220516122011920"> </p><p>配置hdfs-site.xml：vi hdfs-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定NameNode的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 设置SecondaryNameNode(2NN)的web端访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop3:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>need not permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122016807.png" alt="image-20220516122016807"> </p><p><img src="/2022/05/16/hadoop/image-20220516122021019.png" alt="image-20220516122021019"> </p><p>配置yarn-site.xml：vi yarn-site.xml</p><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定MapReduce走shuffle --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.aux-services<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>mapreduce_shuffle<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定ResourceManager的地址 --<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.hostname<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>hadoop<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the applications manager interface <span class="token keyword">in</span> the RM.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the scheduler interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.scheduler.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The http address of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:808<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The https adddress of the RM web application.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.webapp.https.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:809<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.resource-tracker.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>description<span class="token operator">></span>The address of the RM admin interface.<span class="token operator">&lt;</span>/description<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.resourcemanager.admin.address<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token variable">$&#123;yarn.resourcemanager.hostname&#125;</span>:803<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.scheduler.maximum-allocation-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span>  <span class="token operator">&lt;</span>discription<span class="token operator">></span>每个节点可用内存,单位MB,默认8182MB<span class="token operator">&lt;</span>/discription<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-pmem-ratio<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">2</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.resource.memory-mb<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">204</span><span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.vmem-check-enabled<span class="token operator">&lt;</span>/name<span class="token operator">></span>  <span class="token operator">&lt;</span>value<span class="token operator">></span>false<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122026970.png" alt="image-20220516122026970"> </p><p><img src="/2022/05/16/hadoop/image-20220516122030561.png" alt="image-20220516122030561"> </p><p><img src="/2022/05/16/hadoop/image-20220516122034104.png" alt="image-20220516122034104"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制并且配置mapred-site.xml：</span><span class="token function">cp</span> mapred-site.xml mapred-site.xml.template<span class="token function">vi</span> mapred-site.xml</code></pre><p>在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定MapReduce程序运行在Yarn上的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1:49001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.local.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop_data/var<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=/root/soft/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122039094.png" alt="image-20220516122039094"> </p><p>配置workers，将三个主机名添加进去：vi workers</p><p><img src="/2022/05/16/hadoop/image-20220516122042633.png" alt="image-20220516122042633"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入/sbin目录下：</span><span class="token builtin class-name">cd</span> /root/soft/hadoop/sbin/<span class="token comment">#修改start-dfs.sh和stop-dfs.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_SECURE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122046435.png" alt="image-20220516122046435"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改start-yarn.sh和stop-yarn.sh在这两个文件开头加如下内容：</span><span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">HADOOP_SECURE_DN_USER</span><span class="token operator">=</span>root<span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122050361.png" alt="image-20220516122050361"> </p><p>切换到soft目录下：cd &#x2F;root&#x2F;soft</p><p>使用xsync脚本将hadoop-3.1.3发送到hadoop2、hadoop3：</p><p><img src="/2022/05/16/hadoop/image-20220516122054081.png" alt="image-20220516122054081"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换hadoop2、hadoop3在soft目录下创建hadoop-3.1.3的软连接：</span><span class="token function">ln</span> -s hadoop-3.1.3 hadoop<span class="token comment">#配置hadoop环境变量：</span><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=~</span>/soft/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hadoop version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122058346.png" alt="image-20220516122058346"> </p><p><img src="/2022/05/16/hadoop/image-20220516122102094.png" alt="image-20220516122102094"> </p><h2 id="8-启动hadoop"><a href="#8-启动hadoop" class="headerlink" title="(8).启动hadoop"></a>(8).启动hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#格式化hadoop：</span>hadoop namenode -format</code></pre><p>注：hadoop只能格式化一次，在下面出现successfully formatted为格式化成功，这里由于我已经格式化了，就不附截图了。</p><p>在hadoop1启动hdfs：start-dfs.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122107291.png" alt="image-20220516122107291"> </p><p>在hadoop2启动yarn：start-yarn.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122112228.png" alt="image-20220516122112228"> </p><p>验证进程：</p><p>在hadoop1、hadoop2、hadoop3分别输入：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122116494.png" alt="image-20220516122116494"> </p><p><img src="/2022/05/16/hadoop/image-20220516122120013.png" alt="image-20220516122120013"> </p><p><img src="/2022/05/16/hadoop/image-20220516122123607.png" alt="image-20220516122123607"> </p><p>关闭防火墙：systemctl stop firewalld</p><p>在浏览器输入：192.168.246.132:9870</p><p><img src="/2022/05/16/hadoop/image-20220516140133885.png" alt="image-20220516140133885"> </p><p><img src="/2022/05/16/hadoop/image-20220516122128674.png" alt="image-20220516122128674"> </p><p>在浏览器输入：192.168.246.134:8088</p><p><img src="/2022/05/16/hadoop/image-20220516122132496.png" alt="image-20220516122132496"> </p><p>在浏览器端可查看每台服务器状态：</p><p><img src="/2022/05/16/hadoop/image-20220516122138080.png" alt="image-20220516122138080"> </p><h2 id="9-简单使用hadoop"><a href="#9-简单使用hadoop" class="headerlink" title="(9).简单使用hadoop"></a>(9).简单使用hadoop</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看hdfs的根目录：</span>hdfs dfs -ls /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122143737.png" alt="image-20220516122143737"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在根目录下创建文件夹：</span>hdfs dfs -mkdir /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122147922.png" alt="image-20220516122147922"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将linux本地文件上传到hdfs：</span>hdfs dfs -put emp.csv /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122151618.png" alt="image-20220516122151618"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#移动emp.csv的位置到/data目录下：</span>hdfs dfs -mv /emp.csv /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122155106.png" alt="image-20220516122155106"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将data目录下的emp.csv复制到hdfs的根目录下：</span>hdfs dfs -cp /data/emp.csv /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122159630.png" alt="image-20220516122159630"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看emp.csv文件内容：</span>hdfs dfs -cat /emp-copy.csv</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122204310.png" alt="image-20220516122204310"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除文件emp-copy.csv：</span>hdfs dfs -rm /emp-copy.csv <span class="token comment">#删除data文件夹:</span>hdfs dfs -rm -r /data</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122209350.png" alt="image-20220516122209350"> </p><p><img src="/2022/05/16/hadoop/image-20220516122212683.png" alt="image-20220516122212683"> </p><p>使用wordcount脚本（自己编写的），对某个文件里面的字符进行统计</p><p>在linux本地创建1.txt文件并上传到hdfs根目录下的input（上面已有步骤，直接附截图）：</p><p><img src="/2022/05/16/hadoop/image-20220516122216665.png" alt="image-20220516122216665"> </p><p><img src="/2022/05/16/hadoop/image-20220516122220619.png" alt="image-20220516122220619"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#运行脚本：</span>hadoop jar wordcount-1.0-SNAPSHOT.jar org.example.MyMain /input/1.txt /output/wordcount</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122224444.png" alt="image-20220516122224444"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看结果：</span>hdfs dfs -cat /output/wordcount/part-r-00000</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122228709.png" alt="image-20220516122228709"> </p><p>在浏览器界面（9870）也可查看hdfs的文件存放情况：</p><p><img src="/2022/05/16/hadoop/image-20220516122232821.png" alt="image-20220516122232821"> </p><h1 id="2-ZooKeeper集群搭建及使用"><a href="#2-ZooKeeper集群搭建及使用" class="headerlink" title="2.ZooKeeper集群搭建及使用"></a>2.ZooKeeper集群搭建及使用</h1><h2 id="1-下载zookeeper安装包并解压"><a href="#1-下载zookeeper安装包并解压" class="headerlink" title="(1).下载zookeeper安装包并解压"></a>(1).下载zookeeper安装包并解压</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf zookeeper-3.4.9.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122236855.png" alt="image-20220516122236855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s zookeeper-3.4.9 zookeeper<span class="token comment">#同步zookeeper至其他机器：</span>xsync zookeeper-3.4.9</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="(2).配置环境变量"></a>(2).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/root/soft/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122242022.png" alt="image-20220516122242022"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（2）步骤</p><p><img src="/2022/05/16/hadoop/image-20220516122246648.png" alt="image-20220516122246648"> </p><h2 id="3-配置zoo-cfg"><a href="#3-配置zoo-cfg" class="headerlink" title="(3).配置zoo.cfg"></a>(3).配置zoo.cfg</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入conf目录：</span><span class="token builtin class-name">cd</span> zookeeper/conf/<span class="token comment">#复制zoo_sample.cf：</span><span class="token function">cp</span> zoo_sample.cfg zoo.cfg</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122251044.png" alt="image-20220516122251044"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑zoo.cfg：</span><span class="token function">vi</span> zoo.cfg<span class="token comment">#修改：</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/root/soft/zookeeper/zkData</code></pre><p><img src="/2022/05/16/hadoop/image-20225171803.png" alt="img"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#末尾添加：</span>server.1<span class="token operator">=</span>hadoop1:2888:3888server.2<span class="token operator">=</span>hadoop2:2888:3888server.3<span class="token operator">=</span>hadoop3:2888:3888</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122258768.png" alt="image-20220516122258768"> </p><p>server.A&#x3D;B: C: D。</p><p>A:机器编号  </p><p>B:主机名  </p><p>C: Leader与Follower的访问端口 </p><p>D:选举Leader接口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#同步zoo.cfg：</span>xsync zoo.cfg</code></pre><p>配置服务器编号：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入zookeeper：</span><span class="token builtin class-name">cd</span> <span class="token variable">$ZOOKEEPER_HOME</span><span class="token comment">#创建数据存放目录：</span><span class="token function">mkdir</span> zkData<span class="token comment">#编辑myid：.</span><span class="token function">vi</span> zkData/myid</code></pre><p>内容为：1</p><p><img src="/2022/05/16/hadoop/image-20220516122303679.png" alt="image-20220516122303679"> </p><p><img src="/2022/05/16/hadoop/image-20220516122307298.png" alt="image-20220516122307298"> </p><p>在hadoop2中的myid添加内容为：2</p><p>在hadoop3中的myid添加内容为：3</p><h2 id="4-编写zookeeper脚本"><a href="#4-编写zookeeper脚本" class="headerlink" title="(4).编写zookeeper脚本"></a>(4).编写zookeeper脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> zk.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh start "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------状态 <span class="token variable">$i</span> zookeeper-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"zkServer.sh status"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122311485.png" alt="image-20220516122311485"> </p><p>添加脚本执行权限：chmod u+x zk.sh</p><p><img src="/2022/05/16/hadoop/image-20220516122316821.png" alt="image-20220516122316821"> </p><h2 id="5-启动zookeeper集群"><a href="#5-启动zookeeper集群" class="headerlink" title="(5).启动zookeeper集群"></a>(5).启动zookeeper集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群（启动前先检查防火墙。没关的关一下）：</span>zk.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122320281.png" alt="image-20220516122320281"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看各机器状态：</span>zk.sh status</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122324340.png" alt="image-20220516122324340"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止zookeeper集群：</span>zk.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122328422.png" alt="image-20220516122328422"> </p><h2 id="6-zookeeper集群的简单使用"><a href="#6-zookeeper集群的简单使用" class="headerlink" title="(6).zookeeper集群的简单使用"></a>(6).zookeeper集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动zookeeper集群：</span>zk.sh start<span class="token comment">#进入zookeeper命令行：</span>zkCli.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122331781.png" alt="image-20220516122331781"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建节点（节点有四种类型，永久节点、临时节点、永久序列化节点、临时序列化节点）：</span><span class="token comment"># -s 序列化 -e 临时节点 path  创建路径  data 节点数据</span>create <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> path data  <span class="token comment">#创建demo临时节点：</span>create -e /demo <span class="token number">321</span><span class="token comment">#查看根下的所有节点：</span><span class="token function">ls</span> /</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122336640.png" alt="image-20220516122336640"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看path下所有znode,以及zonde的属性：</span>ls2 /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122340206.png" alt="image-20220516122340206"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拿到/demo的数据：</span>get /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122344420.png" alt="image-20220516122344420"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改/demo的数据：</span><span class="token builtin class-name">set</span> /demo <span class="token number">456</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122348066.png" alt="image-20220516122348066"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#递归删除节点：</span>rmr /demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122352849.png" alt="image-20220516122352849"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看历史记录：</span><span class="token function">history</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122356338.png" alt="image-20220516122356338"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出zookeeper命令行：</span>quit</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122400137.png" alt="image-20220516122400137"> </p><h1 id="3-HBase集群搭建及使用"><a href="#3-HBase集群搭建及使用" class="headerlink" title="3.HBase集群搭建及使用"></a>3.HBase集群搭建及使用</h1><h2 id="1-查看hbase与jdk、hadoop的版本匹配；"><a href="#1-查看hbase与jdk、hadoop的版本匹配；" class="headerlink" title="(1).查看hbase与jdk、hadoop的版本匹配；"></a>(1).查看hbase与jdk、hadoop的版本匹配；</h2><p><img src="/2022/05/16/hadoop/image-20220516122405362.png" alt="image-20220516122405362"> </p><p><img src="/2022/05/16/hadoop/image-20220516122409109.png" alt="image-20220516122409109"> </p><h2 id="2-集群规划"><a href="#2-集群规划" class="headerlink" title="(2).集群规划"></a>(2).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516122412571.png" alt="image-20220516122412571"> </p><h2 id="3-下载、解压hbase安装包"><a href="#3-下载、解压hbase安装包" class="headerlink" title="(3).下载、解压hbase安装包"></a>(3).下载、解压hbase安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf hbase-2.4.11-bin.tar.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122416499.png" alt="image-20220516122416499"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s hbase-2.4.11 hbase<span class="token comment">#同步zookeeper至其他机器：</span>xsync hbase-2.4.11<span class="token comment">#切换hadoop2、hadoop3创建软连接</span></code></pre><p> (4).配置环境变量；</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_HOME</span><span class="token operator">=~</span>/soft/hbase-2.4.11<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HBASE_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122421127.png" alt="image-20220516122421127"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment">#验证：</span>hbase version</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122426092.png" alt="image-20220516122426092"> </p><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（4）步骤</p><h2 id="5-配置hbase-site-xml"><a href="#5-配置hbase-site-xml" class="headerlink" title="(5).配置hbase-site.xml"></a>(5).配置hbase-site.xml</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到conf目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$HBASE_HOME</span>/conf<span class="token comment">#编辑hbase-site.xml：</span><span class="token function">vi</span> hbase-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122430589.png" alt="image-20220516122430589"> </p><p>(先将原有配置全部删除)在<configuration>和</configuration>之间添加如下内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop1:8020/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop1,hadoop2,hadoop3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/zookeeper/zkData<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/soft/hbase-2.4.11/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 在分布式的情况下一定要设置，不然容易出现Hmaster起不来的情况 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.unsafe.stream.capability.enforce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122435139.png" alt="image-20220516122435139"> </p><h2 id="6-配置regionservers"><a href="#6-配置regionservers" class="headerlink" title="(6).配置regionservers"></a>(6).配置regionservers</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑regionservers：</span><span class="token function">vi</span> regionservers <span class="token comment">#删除原有的localhost，添加如下内容： </span>hadoop1hadoop2hadoop3</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122439505.png" alt="image-20220516122439505"> </p><h2 id="7-配置备用master"><a href="#7-配置备用master" class="headerlink" title="(7).配置备用master"></a>(7).配置备用master</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑backup-masters：</span><span class="token function">vi</span> backup-masters <span class="token comment">#添加内容为：</span>hadoop2</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122443768.png" alt="image-20220516122443768"> </p><p><img src="/2022/05/16/hadoop/image-20220516122447722.png" alt="image-20220516122447722"> </p><h2 id="8-软连接hadoop配置文件到hbase配置目录并分发hbase；"><a href="#8-软连接hadoop配置文件到hbase配置目录并分发hbase；" class="headerlink" title="(8).软连接hadoop配置文件到hbase配置目录并分发hbase；"></a>(8).软连接hadoop配置文件到hbase配置目录并分发hbase；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#软连接hadoop的core-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/core-site.xml core-site.xml<span class="token comment">#软连接hadoop的hdfs-site.xml到hbase：</span><span class="token function">ln</span> -s /root/soft/hadoop/etc/hadoop/hdfs-site.xml hdfs-site.xml</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122452063.png" alt="image-20220516122452063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#返回上一级目录：</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">#同步conf文件夹：</span>xsync conf</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122456356.png" alt="image-20220516122456356"> </p><h2 id="9-启动hbase集群"><a href="#9-启动hbase集群" class="headerlink" title="(9).启动hbase集群"></a>(9).启动hbase集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase前需要先启动zookeeper、hadoop：</span>zk.sh startstart-all.shstart-hbase.sh<span class="token comment">#或者分开启动hbase：</span>hbase-daemon.sh start masterhbase-daemon.sh start regionserver</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122500574.png" alt="image-20220516122500574"> </p><p>分别在hadoop1、hadoop2、hadoop3输入jps查看节点：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122505347.png" alt="image-20220516122505347"> </p><p><img src="/2022/05/16/hadoop/image-20220516122508629.png" alt="image-20220516122508629"> </p><p><img src="/2022/05/16/hadoop/image-20220516122512505.png" alt="image-20220516122512505"> </p><p><img src="/2022/05/16/hadoop/image-20220516122517185.png" alt="image-20220516122517185"> </p><p>进入浏览器查看：192.168.246.132:16010</p><p><img src="/2022/05/16/hadoop/image-20220516122524759.png" alt="image-20220516122524759"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#停止hbase集群：</span>stop-hbase.sh<span class="token comment">#如果无法关闭就分别关闭master、regionserver：</span>hbase-daemons.sh stop regionserverhbase-daemons.sh stop master</code></pre><h2 id="10-hbase集群的简单使用；"><a href="#10-hbase集群的简单使用；" class="headerlink" title="(10).hbase集群的简单使用；"></a>(10).hbase集群的简单使用；</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hbase集群：</span>start-hbase.sh<span class="token comment">#进入hbase命令行：</span>hbase shell</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122531557.png" alt="image-20220516122531557"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有表：</span>list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122537346.png" alt="image-20220516122537346"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建stu表：</span>create <span class="token string">'stu'</span>,<span class="token string">'info'</span>,<span class="token string">'no'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122542755.png" alt="image-20220516122542755"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看表结构：</span>describe <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122546736.png" alt="image-20220516122546736"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启用或禁用表：</span>is_enabled <span class="token string">'stu'</span>is_disabled <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122551001.png" alt="image-20220516122551001"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1001'</span>,<span class="token string">'info:name'</span>,<span class="token string">'HYX'</span><span class="token comment">#扫描表数据：</span>scan <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122555113.png" alt="image-20220516122555113"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#继续向stu表添加数据：</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:name'</span>,<span class="token string">'Jack'</span>put <span class="token string">'stu'</span>,<span class="token string">'1002'</span>,<span class="token string">'info:age'</span>,<span class="token string">'22'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122559328.png" alt="image-20220516122559328"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#统计表记录数：</span>count <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122604057.png" alt="image-20220516122604057"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除stu表需要禁用表：</span>disable <span class="token string">'stu'</span><span class="token comment">#删除表：</span>drop <span class="token string">'stu'</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122607441.png" alt="image-20220516122607441"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出hbase命令行：</span><span class="token builtin class-name">exit</span> 或 quit</code></pre><h1 id="4-Kafka集群搭建及使用"><a href="#4-Kafka集群搭建及使用" class="headerlink" title="4.Kafka集群搭建及使用"></a>4.Kafka集群搭建及使用</h1><h2 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="(1).集群规划"></a>(1).集群规划</h2><p><img src="/2022/05/16/hadoop/image-20220516140250117.png" alt="image-20220516140250117"> </p><h2 id="2-下载并解压安装包"><a href="#2-下载并解压安装包" class="headerlink" title="(2).下载并解压安装包"></a>(2).下载并解压安装包</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到installfile目录：</span><span class="token builtin class-name">cd</span> /root/installfile<span class="token comment">#解压至soft目录下：</span><span class="token function">tar</span> -zxvf kafka_2.11-2.4.1.gz -C ~/soft</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122622290.png" alt="image-20220516122622290"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至soft目录：</span><span class="token builtin class-name">cd</span> /root/soft<span class="token comment">#创建软连接：</span><span class="token function">ln</span> -s kafka_2.11-2.4.1 kafka<span class="token comment">#同步kafka至其他机器：</span>xsync kafka_2.11-2.4.1</code></pre><p>切换hadoop2、hadoop3创建软连接</p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="(3).配置环境变量"></a>(3).配置环境变量</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token comment">#内容如下：</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HOME</span><span class="token operator">=</span>/root/soft/kafka<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KAFKA_HOME</span>/bin</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122628614.png" alt="image-20220516122628614"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让环境变量生效：</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>每一台都需要配置环境变量，在hadoop2、hadoop3重复（3）步骤</p><h2 id="4-分别在三台机器上创建logs目录"><a href="#4-分别在三台机器上创建logs目录" class="headerlink" title="(4).分别在三台机器上创建logs目录"></a>(4).分别在三台机器上创建logs目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#创建logs目录：</span><span class="token function">mkdir</span> logs</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122633371.png" alt="image-20220516122633371"> </p><h2 id="5-修改配置文件server-properties"><a href="#5-修改配置文件server-properties" class="headerlink" title="(5).修改配置文件server.properties"></a>(5).修改配置文件server.properties</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换至config目录：</span><span class="token builtin class-name">cd</span> config<span class="token comment">#编辑server.properties：</span><span class="token function">vi</span> server.properties</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122637275.png" alt="image-20220516122637275"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改内容如下：</span>broker.id<span class="token operator">=</span><span class="token number">0</span><span class="token comment">#删除topic功能</span>delete.topic.enable<span class="token operator">=</span>truelog.dirs<span class="token operator">=</span>/root/soft/kafka/logszookeeper.connect<span class="token operator">=</span>hadoop1:2181,hadoop2:2181,hadoop3:2181/kafka</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122641096.png" alt="image-20220516122641096"> </p><p><img src="/2022/05/16/hadoop/image-20220516122644972.png" alt="image-20220516122644972"> </p><p><img src="/2022/05/16/hadoop/image-20220516122649136.png" alt="image-20220516122649136"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#分发server.properties到hadoop2、hadoop3：</span>xsync server.properties<span class="token comment">#修改hadoop2的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#修改hadoop3的server.properties中</span>broker.id<span class="token operator">=</span><span class="token number">2</span></code></pre><h2 id="6-编写kafka脚本"><a href="#6-编写kafka脚本" class="headerlink" title="(6).编写kafka脚本"></a>(6).编写kafka脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入bin目录下：</span><span class="token builtin class-name">cd</span> ~/bin<span class="token comment">#创建脚本：</span><span class="token function">vi</span> kf.sh</code></pre><p>内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------启动 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-start.sh -daemon /root/soft/kafka/config/server.properties "</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop1 hadoop2 hadoop3  <span class="token keyword">do</span>​    <span class="token builtin class-name">echo</span> <span class="token string">" --------停止 <span class="token variable">$i</span> Kafka-------"</span>​    <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"/root/soft/kafka/bin/kafka-server-stop.sh stop"</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122655855.png" alt="image-20220516122655855"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加脚本执行权限：</span><span class="token function">chmod</span> u+x kf.sh</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122701672.png" alt="image-20220516122701672"> </p><h2 id="7-启动kafka集群"><a href="#7-启动kafka集群" class="headerlink" title="(7).启动kafka集群"></a>(7).启动kafka集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash">启<span class="token comment">#动kafka集群需要先启动zookeeper集群：</span>zk.sh start <span class="token operator">|</span>  kf.sh start</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122705626.png" alt="image-20220516122705626"> </p><p>使用jps查看三台机器的节点是否启动：jps</p><p><img src="/2022/05/16/hadoop/image-20220516122709528.png" alt="image-20220516122709528"> </p><p><img src="/2022/05/16/hadoop/image-20220516122713433.png" alt="image-20220516122713433"> </p><p><img src="/2022/05/16/hadoop/image-20220516122716947.png" alt="image-20220516122716947"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭kafka集群：</span>kf.sh stop</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122721107.png" alt="image-20220516122721107"> </p><h2 id="8-kafka集群的简单使用"><a href="#8-kafka集群的简单使用" class="headerlink" title="(8).kafka集群的简单使用"></a>(8).kafka集群的简单使用</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动kafka集群：</span>kf.sh start<span class="token comment">#进入kafka目录：</span><span class="token builtin class-name">cd</span> <span class="token variable">$KAFKA_HOME</span><span class="token comment">#查看kafka topic列表：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --list</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122725063.png" alt="image-20220516122725063"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--create --replication-factor <span class="token number">3</span> --partitions <span class="token number">1</span> --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122729379.png" alt="image-20220516122729379"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除topic：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span>--delete --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122733878.png" alt="image-20220516122733878"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#发送消息：</span>bin/kafka-console-producer.sh <span class="token punctuation">\</span>--broker-list hadoop1:9092 --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122737468.png" alt="image-20220516122737468"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#消费消息：</span>bin/kafka-console-consumer.sh <span class="token punctuation">\</span>--bootstrap-server hadoop1:9092 --from-beginning --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122741682.png" alt="image-20220516122741682"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看某个topic的详情：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka <span class="token punctuation">\</span> --describe --topic demo</code></pre><p><img src="/2022/05/16/hadoop/image-20220516122746568.png" alt="image-20220516122746568"> </p><p><img src="/2022/05/16/hadoop/image-20220516122750832.png" alt="image-20220516122750832"> </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改分区数：</span>bin/kafka-topics.sh --zookeeper hadoop1:2181/kafka --alter --topic demo --partitions <span class="token number">6</span></code></pre><p><img src="/2022/05/16/hadoop/image-20220516122757161.png" alt="image-20220516122757161"></p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> zookeeper </tag>
            
            <tag> kafka </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
